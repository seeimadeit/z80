F00:0001       
F00:0002       .include "Routines.inc"
F01:0001       
F01:0002       # address where user programs load
F01:0003       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       
F01:0004       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0005       .equ commandMemory, 0x1000
F01:0006       .equ userMemory,0x2000
F01:0007       
F01:0008       .equ TRUE, 1
F01:0009       .equ FALSE, 0
F01:0010       
F01:0011       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0012       # ld a, PRINT
F01:0013       # call GetAddress
F01:0014       # address for print loaded into hl
F01:0015       # the value in hl can change between os versions so do not hard code the values
F01:0016       
F01:0017       .equ GetAddress, 0x0804
F01:0018       .equ PRINT,		1
F01:0019       .equ PRINTLN,	9
F01:0020       .equ PRINTHEX,	2
F01:0021       .equ LOADFILE,	3
F01:0022       .equ MEMSET,	4
F01:0023       .equ STRLEN,	5
F01:0024       .equ PUTC,		6
F01:0025       .equ TOUPPERCASE,7
F01:0026       .equ HEXTOBYTE,	8
F01:0027       .equ STRNCPY,10
F01:0028       .equ CREATEPROCESS,16
F01:0029       .equ GETCOMMANDPARAMS,17
F01:0030       # filesystem - primitive functions, probably going to change 
F01:0031       .equ DIRECTORYOPEN,13
F01:0032       .equ DIRECTORYNEXTFILE,14
F01:0033       .equ GETFILENAME,15
F01:0034       
F01:0035       
F01:0036       
F01:0037       .equ NEXTNUMBER,18
F01:0038       
F01:0039       
F00:0003       .set __CMD__,0
F00:0004       .org commandMemory
F00:0005       .include "libs.inc"
F04:0001       
F04:0002       .ifndef __CMD__
F04:0003       	.org userMemory
F04:0004       .endif
F04:0005       	ld a,PRINT
               S01:00001000:  3E 01
F04:0006       	call GetAddress
               S01:00001002:  CD 04 08
F04:0007       	ld (printadr),hl
               S01:00001005:  22 75 10
F04:0008       	ld a,PRINTHEX
               S01:00001008:  3E 02
F04:0009       	call GetAddress
               S01:0000100A:  CD 04 08
F04:0010       	ld (printhexadr),hl
               S01:0000100D:  22 7B 10
F04:0011       	ld a,LOADFILE
               S01:00001010:  3E 03
F04:0012       	call GetAddress
               S01:00001012:  CD 04 08
F04:0013       	ld (loadfileadr),hl
               S01:00001015:  22 7E 10
F04:0014       	ld a,MEMSET
               S01:00001018:  3E 04
F04:0015       	call GetAddress
               S01:0000101A:  CD 04 08
F04:0016       	ld (memsetadr),hl
               S01:0000101D:  22 81 10
F04:0017       	ld a,STRLEN
               S01:00001020:  3E 05
F04:0018       	call GetAddress
               S01:00001022:  CD 04 08
F04:0019       	ld (strlenadr),hl
               S01:00001025:  22 84 10
F04:0020       	ld a,PUTC
               S01:00001028:  3E 06
F04:0021       	call GetAddress
               S01:0000102A:  CD 04 08
F04:0022       	ld (putcadr),hl
               S01:0000102D:  22 87 10
F04:0023       	ld a,TOUPPERCASE
               S01:00001030:  3E 07
F04:0024       	call GetAddress
               S01:00001032:  CD 04 08
F04:0025       	ld (touppercaseadr),hl
               S01:00001035:  22 8A 10
F04:0026       	ld a,HEXTOBYTE
               S01:00001038:  3E 08
F04:0027       	call GetAddress
               S01:0000103A:  CD 04 08
F04:0028       	ld (hextobyteadr),hl
               S01:0000103D:  22 8D 10
F04:0029       	ld a,PRINTLN
               S01:00001040:  3E 09
F04:0030       	call GetAddress
               S01:00001042:  CD 04 08
F04:0031       	ld (printlnadr),hl
               S01:00001045:  22 78 10
F04:0032       	ld a,DIRECTORYOPEN
               S01:00001048:  3E 0D
F04:0033       	call GetAddress
               S01:0000104A:  CD 04 08
F04:0034       	ld (directoryopenadr),hl
               S01:0000104D:  22 90 10
F04:0035       	ld a,NEXTFILE
               S01:00001050:  3E 32
F04:0036       	call GetAddress
               S01:00001052:  CD 04 08
F04:0037       	ld (directorynextfileadr),hl
               S01:00001055:  22 93 10
F04:0038       	ld a,GETFILENAME
               S01:00001058:  3E 0F
F04:0039       	call GetAddress
               S01:0000105A:  CD 04 08
F04:0040       	ld (getfilenameadr),hl
               S01:0000105D:  22 96 10
F04:0041       	ld a,CREATEPROCESS
               S01:00001060:  3E 10
F04:0042       	call GetAddress
               S01:00001062:  CD 04 08
F04:0043       	ld (createProcessadr),hl
               S01:00001065:  22 99 10
F04:0044       	ld a,GETCOMMANDPARAMS
               S01:00001068:  3E 11
F04:0045       	call GetAddress
               S01:0000106A:  CD 04 08
F04:0046       	ld (getcommandparamsadr),hl
               S01:0000106D:  22 9C 10
F04:0047       
F04:0048       
F04:0049       	jp _main
               S01:00001070:  C3 9E 10
F04:0050       
F04:0051       	functionlookups:
F04:0052       	.align 2
F04:0053       	print: .byte 0xc3
               S01:00001074:  C3
F04:0054       	printadr: .2byte 0
               S01:00001075:  00 00
F04:0055       	println: .byte 0xc3
               S01:00001077:  C3
F04:0056       	printlnadr: .2byte 0
               S01:00001078:  00 00
F04:0057       	printhex: .byte 0xc3
               S01:0000107A:  C3
F04:0058       	printhexadr: .2byte 0
               S01:0000107B:  00 00
F04:0059       	loadfile: .byte 0xc3
               S01:0000107D:  C3
F04:0060       	loadfileadr: .2byte 0
               S01:0000107E:  00 00
F04:0061       	memset: .byte 0xc3
               S01:00001080:  C3
F04:0062       	memsetadr: .2byte 0
               S01:00001081:  00 00
F04:0063       	strlen: .byte 0xc3
               S01:00001083:  C3
F04:0064       	strlenadr: .2byte 0
               S01:00001084:  00 00
F04:0065       	putc: .byte 0xc3
               S01:00001086:  C3
F04:0066       	putcadr: .2byte 0
               S01:00001087:  00 00
F04:0067       	touppercase: .byte 0xc3
               S01:00001089:  C3
F04:0068       	touppercaseadr: .2byte 0
               S01:0000108A:  00 00
F04:0069       	hextobyte: .byte 0xc3
               S01:0000108C:  C3
F04:0070       	hextobyteadr: .2byte 0
               S01:0000108D:  00 00
F04:0071       	directoryopen: .byte 0xc3
               S01:0000108F:  C3
F04:0072       	directoryopenadr: .2byte 0
               S01:00001090:  00 00
F04:0073       	directorynextfile: .byte 0xc3
               S01:00001092:  C3
F04:0074       	directorynextfileadr: .2byte 0
               S01:00001093:  00 00
F04:0075       	getfilename: .byte 0xc3
               S01:00001095:  C3
F04:0076       	getfilenameadr: .2byte 0
               S01:00001096:  00 00
F04:0077       	createProcess: .byte 0xc3
               S01:00001098:  C3
F04:0078       	createProcessadr: .2byte 0
               S01:00001099:  00 00
F04:0079       	getcommandparams: .byte 0xc3
               S01:0000109B:  C3
F04:0080       	getcommandparamsadr: .2byte 0
               S01:0000109C:  00 00
F04:0081       
F04:0082       _main:
F00:0006       	
F00:0007       
F00:0008       	ld hl,welcomemsg
               S01:0000109E:  21 22 14
F00:0009       	call println
               S01:000010A1:  CD 77 10
F00:0010       newcommand:
F00:0011       	; #setup/reset the interrupt vector who knows what could have happen to it
F00:0012       	di
               S01:000010A4:  F3
F00:0013       	im 2
               S01:000010A5:  ED 5E
F00:0014       	ld a, jumptable/256 ; initialize the new interrupt vector
               S01:000010A7:  3E 18
F00:0015       	ld i,a
               S01:000010A9:  ED 47
F00:0016       	ei
               S01:000010AB:  FB
F00:0017       
F00:0018       
F00:0019       	call resetcommandline
               S01:000010AC:  CD 23 11
F00:0020       	ld hl,commandPromptmsg ;# display command prompt
               S01:000010AF:  21 0A 16
F00:0021       	call print
               S01:000010B2:  CD 74 10
F00:0022       loop:
F00:0023       	halt		;# wait for interrupt
               S01:000010B5:  76
F00:0024       	ld hl,cmdlineexecute ;# if user pressed enter then cmdlineexecute will contain 1
               S01:000010B6:  21 A4 17
F00:0025       	ld a,(hl)
               S01:000010B9:  7E
F00:0026       	cp 1
               S01:000010BA:  FE 01
F00:0027       	jp nz,loop ;# nothing to process so repeat
               S01:000010BC:  C2 B5 10
F00:0028       
F00:0029       	ld hl,cmdlinebuffer ;# test if user entered a value
               S01:000010BF:  21 A6 17
F00:0030       	call strlen
               S01:000010C2:  CD 83 10
F00:0031       	ld a,b
               S01:000010C5:  78
F00:0032       	cp 0
               S01:000010C6:  FE 00
F00:0033       	jp z, newcommand ;# if no commands display prompt and repeat
               S01:000010C8:  CA A4 10
F00:0034       	ld hl,0
               S01:000010CB:  21 00 00
F00:0035       	call println
               S01:000010CE:  CD 77 10
F00:0036       	ld hl,cmdlinebuffer
               S01:000010D1:  21 A6 17
F00:0037       	call findbuiltin
               S01:000010D4:  CD 65 11
F00:0038       	cp TRUE ;# true if builtin was found
               S01:000010D7:  FE 01
F00:0039       	call nz,loadandrun ;# must be something to do
               S01:000010D9:  C4 E5 10
F00:0040       	ld hl,0
               S01:000010DC:  21 00 00
F00:0041       	call println
               S01:000010DF:  CD 77 10
F00:0042       	jp newcommand
               S01:000010E2:  C3 A4 10
F00:0043       
F00:0044       loadandrun:
F00:0045       	
F00:0046       	ld hl,0
               S01:000010E5:  21 00 00
F00:0047       	call println ;# display a new line
               S01:000010E8:  CD 77 10
F00:0048       ;	ld hl, cmdlinebuffer ;# load filename of program
F00:0049       ;	ld de, userMemory ;# address where to load program
F00:0050       ;	call loadfile
F00:0051       ;	cp 0
F00:0052       ;	jp nz,loaderr ;# if load returned anything except 0, its an error
F00:0053       ;	jp runuserMemory
F00:0054       	call createprocess
               S01:000010EB:  CD FF 13
F00:0055       	cp 0
               S01:000010EE:  FE 00
F00:0056       	jp nz,loaderr
               S01:000010F0:  C2 F7 10
F00:0057       	call resetcommandline
               S01:000010F3:  CD 23 11
F00:0058       	ret
               S01:000010F6:  C9
F00:0059       
F00:0060       
F00:0061       loaderr:
F00:0062       	call printhex ;# print return code
               S01:000010F7:  CD 7A 10
F00:0063       	ld hl,cmdlinebuffer
               S01:000010FA:  21 A6 17
F00:0064       	call print ;# print the command
               S01:000010FD:  CD 74 10
F00:0065       	ld hl,invalidcommandmsg
               S01:00001100:  21 0E 16
F00:0066       	call println ;# print msg
               S01:00001103:  CD 77 10
F00:0067       	call hexdumpcmdline
               S01:00001106:  CD 0A 11
F00:0068       ;#	call resetcommandline
F00:0069       	ret
               S01:00001109:  C9
F00:0070       
F00:0071       
F00:0072       hexdumpcmdline: 
F00:0073       	;# when an invalid command happens hexdump 16 bytes 
F00:0074       	;# of the commmandline.
F00:0075       	ld hl,cmdlinebuffer
               S01:0000110A:  21 A6 17
F00:0076       	ld b,16
               S01:0000110D:  06 10
F00:0077       _hexdp$99:
F00:0078       
F00:0079       	;# print the byte values
F00:0080       	ld a,(hl)
               S01:0000110F:  7E
F00:0081       	call printhex
               S01:00001110:  CD 7A 10
F00:0082       	ld a,' '
               S01:00001113:  3E 20
F00:0083       	call putc
               S01:00001115:  CD 86 10
F00:0084       	;# next byte
F00:0085       	inc hl
               S01:00001118:  23
F00:0086       	djnz _hexdp$99
               S01:00001119:  10 F4
F00:0087       	ret
               S01:0000111B:  C9
F00:0088       
F00:0089       runuserMemory:
F00:0090       	
F00:0091       	call userMemory
               S01:0000111C:  CD 00 20
F00:0092       	call resetcommandline
               S01:0000111F:  CD 23 11
F00:0093       	ret
               S01:00001122:  C9
F00:0094       
F00:0095       resetcommandline:
F00:0096       	push af
               S01:00001123:  F5
F00:0097       	push hl
               S01:00001124:  E5
F00:0098       # reset the command line variables
F00:0099       	ld hl,cmdlinebufferlen
               S01:00001125:  21 A5 17
F00:0100       	ld a,0
               S01:00001128:  3E 00
F00:0101       	ld (hl),a
               S01:0000112A:  77
F00:0102       	ld hl, cmdlinebuffer
               S01:0000112B:  21 A6 17
F00:0103       	ld b, cmdlinebuffer$-cmdlinebuffer
               S01:0000112E:  06 32
F00:0104       	call memset
               S01:00001130:  CD 80 10
F00:0105       	pop hl
               S01:00001133:  E1
F00:0106       	pop af
               S01:00001134:  F1
F00:0107       	ret
               S01:00001135:  C9
F00:0108       
F00:0109       	;##############################################################
F00:0110       	cmdline: ;#/* interrupt 2, echo what was sent*/
F00:0111       		in a,(SERIALPORT)
               S01:00001136:  DB 01
F00:0112       		cp 0x0d
               S01:00001138:  FE 0D
F00:0113       		jp z, executecmd
               S01:0000113A:  CA 5C 11
F00:0114       		cp 0x0a
               S01:0000113D:  FE 0A
F00:0115       		jp z,executeexit
               S01:0000113F:  CA 62 11
F00:0116       		
F00:0117       
F00:0118       	
F00:0119       		ld hl,cmdlinebufferlen # load the length into b
               S01:00001142:  21 A5 17
F00:0120       		ld b,0
               S01:00001145:  06 00
F00:0121       		ld c,(hl)
               S01:00001147:  4E
F00:0122       
F00:0123       
F00:0124       		ld hl,cmdlinebuffer ;# load buffer address into hl
               S01:00001148:  21 A6 17
F00:0125       		add hl,bc ;# add the buffer length to get the last character pointer
               S01:0000114B:  09
F00:0126       		ld (hl),a ;# store keyboard character
               S01:0000114C:  77
F00:0127       		
F00:0128       		ld hl,cmdlinebufferlen ;# load buffer length
               S01:0000114D:  21 A5 17
F00:0129       		inc (hl) ;# increment buffer len
               S01:00001150:  34
F00:0130       		
F00:0131       
F00:0132       		out (SERIALPORT),a
               S01:00001151:  D3 01
F00:0133       		ld a,0
               S01:00001153:  3E 00
F00:0134       		ld hl,cmdlineexecute
               S01:00001155:  21 A4 17
F00:0135       		ld (hl),a
               S01:00001158:  77
F00:0136       		jp executeexit
               S01:00001159:  C3 62 11
F00:0137       	executecmd:
F00:0138       		ld a,1
               S01:0000115C:  3E 01
F00:0139       		ld hl,cmdlineexecute
               S01:0000115E:  21 A4 17
F00:0140       		ld (hl),a
               S01:00001161:  77
F00:0141       	executeexit:
F00:0142       		ei
               S01:00001162:  FB
F00:0143       		reti
               S01:00001163:  ED 4D
F00:0144       
F00:0145       		
F00:0146       	;# ======================== find builtin function =======
F00:0147       		;# ld hl, buffer (zero terminated string)
F00:0148       		;# call findbuiltin
F00:0149       		;# returns TRUE if builtin command located
F00:0150       		;#         FALSE if no builtin command located
F00:0151       
F00:0152       findbuiltin:
F00:0153       	
F00:0154       	push hl ;# save hl
               S01:00001165:  E5
F00:0155       	push hl
               S01:00001166:  E5
F00:0156       
F00:0157       
F00:0158       	pop ix;# copy hl into ix, ix contains the user supplied cmd
               S01:00001167:  DD E1
F00:0159       
F00:0160       	ld iy,builtin ;# load start of list
               S01:00001169:  FD 21 84 17
F00:0161       	ld b,0 ;# used to keep count of the number of characters - because a 0 length is bad
               S01:0000116D:  06 00
F00:0162       findbuiltinrestart:
F00:0163       	ld l, (iy)	;# load hl with the pointer address
               S01:0000116F:  FD 6E 00
F00:0164       	ld h, (iy+1)
               S01:00001172:  FD 66 01
F00:0165       
F00:0166       findbuiltin1:
F00:0167       	ld a,(ix)
               S01:00001175:  DD 7E 00
F00:0168       	cp 0 ;# if we have a null character we have made a match
               S01:00001178:  FE 00
F00:0169       	jp z,_findbuiltinSuccess
               S01:0000117A:  CA AD 11
F00:0170       
F00:0171       	inc b ;# character count
               S01:0000117D:  04
F00:0172       	ld a,(hl)
               S01:0000117E:  7E
F00:0173       	sub (ix)
               S01:0000117F:  DD 96 00
F00:0174       
F00:0175       	inc ix ;# no flag changes for inc
               S01:00001182:  DD 23
F00:0176       	inc hl
               S01:00001184:  23
F00:0177       	jp z,findbuiltin1 ;# if the same characters repeat
               S01:00001185:  CA 75 11
F00:0178       
F00:0179       	;# if we get here, its because the characters no longer match.
F00:0180       	;# so we need to test the builtin cmd to see if it's a zero,
F00:0181       	;# if it is then we have matched the builtin command
F00:0182       	dec hl ;# need to backup 1 byte because we moved it before the test
               S01:00001188:  2B
F00:0183       	ld a,(hl)
               S01:00001189:  7E
F00:0184       	cp 0
               S01:0000118A:  FE 00
F00:0185       	jp z,_findbuiltinSuccess
               S01:0000118C:  CA AD 11
F00:0186       	;# if we reach here then we did not find a match, so
F00:0187       	;# we can load the next builtin cmd and try again.
F00:0188       	pop hl
               S01:0000118F:  E1
F00:0189       	push hl ;# save hl
               S01:00001190:  E5
F00:0190       	push hl ;# restore the user supplied cmd
               S01:00001191:  E5
F00:0191       	pop ix ;# now ix contains the user supplied cmd
               S01:00001192:  DD E1
F00:0192       	;# iy still contains the builtin address pointer.
F00:0193       	;# so if we add 4 bytes to it we will point to the next
F00:0194       	;# table entry for the builtin command.
F00:0195       	ld bc,4
               S01:00001194:  01 04 00
F00:0196       	add iy,bc
               S01:00001197:  FD 09
F00:0197       	;# before we try with the current entry we need to check
F00:0198       	;# its not the end of the list
F00:0199       	ld a,(iy)
               S01:00001199:  FD 7E 00
F00:0200       	cp 0
               S01:0000119C:  FE 00
F00:0201       	jp nz, findbuiltinrestart
               S01:0000119E:  C2 6F 11
F00:0202       	ld a,(iy+1)
               S01:000011A1:  FD 7E 01
F00:0203       	cp 0
               S01:000011A4:  FE 00
F00:0204       	jp nz,findbuiltinrestart
               S01:000011A6:  C2 6F 11
F00:0205       	
F00:0206       
F00:0207       _findbuildtinFail:
F00:0208       	pop hl ;# remove the save hl
               S01:000011A9:  E1
F00:0209       	ld a,FALSE
               S01:000011AA:  3E 00
F00:0210       	ret
               S01:000011AC:  C9
F00:0211       _findbuiltinSuccess:
F00:0212       	;# check the length - it can't be 0
F00:0213       	ld a,b
               S01:000011AD:  78
F00:0214       	cp 0
               S01:000011AE:  FE 00
F00:0215       	jp z,_findbuildtinFail
               S01:000011B0:  CA A9 11
F00:0216       	;# ok good from here to continue
F00:0217       	pop hl ;# remove the saved hl
               S01:000011B3:  E1
F00:0218       	ld bc,2 ;# we have a success so now we load the address of the subroutine
               S01:000011B4:  01 02 00
F00:0219       	add iy,bc
               S01:000011B7:  FD 09
F00:0220       	
F00:0221       	ld l, (iy)	;# load hl with the pointer address
               S01:000011B9:  FD 6E 00
F00:0222       	ld h, (iy+1) ;# to jump into the address I need to use the iy registers
               S01:000011BC:  FD 66 01
F00:0223       	push hl
               S01:000011BF:  E5
F00:0224       	pop iy
               S01:000011C0:  FD E1
F00:0225       	jp (iy)
               S01:000011C2:  FD E9
F00:0226       	halt ;# we will never get here
               S01:000011C4:  76
F00:0227       
F00:0228       
F00:0229       
F00:0230       		;#======================= builtin functions ====================
F00:0231       #== hexdump memory builtin == #
F00:0232       		hexdumpcmd: .string "h,",0
               S01:000011C5:  68 2C
               S01:000011C7:  00
F00:0233       		
F00:0234       	hexdump:
F00:0235       		ld hl,hexdumpmsg
               S01:000011C9:  21 31 14
F00:0236       		call println
               S01:000011CC:  CD 77 10
F00:0237       		ld hl,cmdlinebuffer ;# command length must be 8 characters
               S01:000011CF:  21 A6 17
F00:0238       		call strlen
               S01:000011D2:  CD 83 10
F00:0239       		ld a,b
               S01:000011D5:  78
F00:0240       		cp 8
               S01:000011D6:  FE 08
F00:0241       		jp nz,hexdumperror
               S01:000011D8:  C2 0C 12
F00:0242       		ld hl,cmdlinebuffer ;# the hextobyte is expect uppercase characters
               S01:000011DB:  21 A6 17
F00:0243       		call touppercase
               S01:000011DE:  CD 89 10
F00:0244       		call println
               S01:000011E1:  CD 77 10
F00:0245       		ld ix,cmdlinebuffer ;# get the 4th and 5th characters into the lobyte
               S01:000011E4:  DD 21 A6 17
F00:0246       		ld h,(ix+4)
               S01:000011E8:  DD 66 04
F00:0247       		ld l,(ix+5)
               S01:000011EB:  DD 6E 05
F00:0248       		call hextobyte
               S01:000011EE:  CD 8C 10
F00:0249       		ld (lodump),a
               S01:000011F1:  32 21 14
F00:0250       	
F00:0251       		ld h,(ix+6) ;# get the 6th and 7th characters into the hibyte
               S01:000011F4:  DD 66 06
F00:0252       		ld l,(ix+7)
               S01:000011F7:  DD 6E 07
F00:0253       		call hextobyte
               S01:000011FA:  CD 8C 10
F00:0254       		ld (hidump),a
               S01:000011FD:  32 20 14
F00:0255       		ld hl,0
               S01:00001200:  21 00 00
F00:0256       		call println
               S01:00001203:  CD 77 10
F00:0257       
F00:0258       	;# hidump has the address to dump so let dump it out
F00:0259       		call hexdumpprint
               S01:00001206:  CD 15 12
F00:0260       		jp hexdumpexit
               S01:00001209:  C3 12 12
F00:0261       
F00:0262       hexdumperror:
F00:0263       		ld hl,hexdumpsyntaxmsg
               S01:0000120C:  21 3C 14
F00:0264       		call println
               S01:0000120F:  CD 77 10
F00:0265       hexdumpexit:
F00:0266       		ld a,TRUE
               S01:00001212:  3E 01
F00:0267       		ret
               S01:00001214:  C9
F00:0268       
F00:0269       
F00:0270       hexdumpprint:
F00:0271       
F00:0272       	;# print the heading
F00:0273       
F00:0274       	ld b,7
               S01:00001215:  06 07
F00:0275       _sp$1:
F00:0276       	ld a,' ' ;# 7 spaces
               S01:00001217:  3E 20
F00:0277       	call putc
               S01:00001219:  CD 86 10
F00:0278       	djnz _sp$1
               S01:0000121C:  10 F9
F00:0279       
F00:0280       	ld a,0 ;# for column header
               S01:0000121E:  3E 00
F00:0281       	ld b,16 ;# 16 column headers
               S01:00001220:  06 10
F00:0282       _col$1:
F00:0283       	call printhex
               S01:00001222:  CD 7A 10
F00:0284       	inc a
               S01:00001225:  3C
F00:0285       
F00:0286       	push af
               S01:00001226:  F5
F00:0287       	ld a,' '
               S01:00001227:  3E 20
F00:0288       	call putc
               S01:00001229:  CD 86 10
F00:0289       	pop af
               S01:0000122C:  F1
F00:0290       
F00:0291       	djnz _col$1
               S01:0000122D:  10 F3
F00:0292       
F00:0293       	ld hl,0 ;# newline
               S01:0000122F:  21 00 00
F00:0294       	call println
               S01:00001232:  CD 77 10
F00:0295       
F00:0296       	ld hl,(hidump)
               S01:00001235:  2A 20 14
F00:0297       
F00:0298       	ld b,16 ;# outer loop
               S01:00001238:  06 10
F00:0299       _hexdp0:
F00:0300       	push bc
               S01:0000123A:  C5
F00:0301       
F00:0302       	ld b,16 ;# inner loop
               S01:0000123B:  06 10
F00:0303       		;# print the address
F00:0304       	push hl
               S01:0000123D:  E5
F00:0305       	ld hl,hexdumpprefix
               S01:0000123E:  21 39 14
F00:0306       	call print
               S01:00001241:  CD 74 10
F00:0307       	pop hl
               S01:00001244:  E1
F00:0308       
F00:0309       	ld a,h
               S01:00001245:  7C
F00:0310       	call printhex
               S01:00001246:  CD 7A 10
F00:0311       	ld a,l
               S01:00001249:  7D
F00:0312       	call printhex
               S01:0000124A:  CD 7A 10
F00:0313       	ld a,' '
               S01:0000124D:  3E 20
F00:0314       	call putc
               S01:0000124F:  CD 86 10
F00:0315       _hexdp$1:
F00:0316       
F00:0317       	;# print the byte values
F00:0318       	ld a,(hl)
               S01:00001252:  7E
F00:0319       	call printhex
               S01:00001253:  CD 7A 10
F00:0320       	ld a,' '
               S01:00001256:  3E 20
F00:0321       	call putc
               S01:00001258:  CD 86 10
F00:0322       	;# next byte
F00:0323       	inc hl
               S01:0000125B:  23
F00:0324       	djnz _hexdp$1
               S01:0000125C:  10 F4
F00:0325       	;# now repeat the line and display the ascii value
F00:0326       	or a ;# reset carry flag
               S01:0000125E:  B7
F00:0327       	ld de,16
               S01:0000125F:  11 10 00
F00:0328       	sbc hl,de ;# subtrack 16bytes
               S01:00001262:  ED 52
F00:0329       
F00:0330       	ld a,'|' ;# output border character
               S01:00001264:  3E 7C
F00:0331       	call putc
               S01:00001266:  CD 86 10
F00:0332       	ld b,16
               S01:00001269:  06 10
F00:0333       _dexdpc$1:
F00:0334       	ld a,(hl)
               S01:0000126B:  7E
F00:0335       	cp 32 ;# space
               S01:0000126C:  FE 20
F00:0336       	jp p, _nex$2 ;# if character >= 32 jump
               S01:0000126E:  F2 76 12
F00:0337       	ld a,'.'
               S01:00001271:  3E 2E
F00:0338       	jp _prt$
               S01:00001273:  C3 7D 12
F00:0339       _nex$2:
F00:0340       	cp 127 ;# delete
               S01:00001276:  FE 7F
F00:0341       	jp m,_prt$ ;# if character < 127 jump print
               S01:00001278:  FA 7D 12
F00:0342       	ld a,'.' ;# else print a dot
               S01:0000127B:  3E 2E
F00:0343       
F00:0344       _prt$:
F00:0345       	call putc
               S01:0000127D:  CD 86 10
F00:0346       	inc hl
               S01:00001280:  23
F00:0347       	djnz _dexdpc$1
               S01:00001281:  10 E8
F00:0348       
F00:0349       	ld a,"|" ;# output border character
               S01:00001283:  3E 7C
F00:0350       	call putc
               S01:00001285:  CD 86 10
F00:0351       
F00:0352       	;# next line
F00:0353       	push hl
               S01:00001288:  E5
F00:0354       	ld hl,0
               S01:00001289:  21 00 00
F00:0355       	call println
               S01:0000128C:  CD 77 10
F00:0356       	pop hl
               S01:0000128F:  E1
F00:0357       	pop bc
               S01:00001290:  C1
F00:0358       	djnz _hexdp0
               S01:00001291:  10 A7
F00:0359       	ret
               S01:00001293:  C9
F00:0360       
F00:0361       	;# ====== LOAD builtin ==== #
F00:0362       	loadcmd: .string "l,",0
               S01:00001294:  6C 2C
               S01:00001296:  00
F00:0363       	load:
F00:0364       		ld hl,loadmsg
               S01:00001298:  21 7A 14
F00:0365       		call println
               S01:0000129B:  CD 77 10
F00:0366       		ld hl,cmdlinebuffer ;# command length must be >= 10 characters
               S01:0000129E:  21 A6 17
F00:0367       		call strlen
               S01:000012A1:  CD 83 10
F00:0368       		ld a,b
               S01:000012A4:  78
F00:0369       		cp 10
               S01:000012A5:  FE 0A
F00:0370       		jp p, _loadc$1
               S01:000012A7:  F2 B3 12
F00:0371       		ld hl,loadsyntaxmsg ;# load failure message
               S01:000012AA:  21 7F 14
F00:0372       		call println
               S01:000012AD:  CD 77 10
F00:0373       		ld a,TRUE
               S01:000012B0:  3E 01
F00:0374       		ret
               S01:000012B2:  C9
F00:0375       _loadc$1:
F00:0376       		ld hl,cmdlinebuffer+4
               S01:000012B3:  21 AA 17
F00:0377       		ld de,_ladr
               S01:000012B6:  11 01 13
F00:0378       		ld bc,4
               S01:000012B9:  01 04 00
F00:0379       		ldir
               S01:000012BC:  ED B0
F00:0380       		ld a,0
               S01:000012BE:  3E 00
F00:0381       		ld (de),a ;# zero terminated
               S01:000012C0:  12
F00:0382       		ld hl,_ladr ;# hex address stored in _adr
               S01:000012C1:  21 01 13
F00:0383       		call touppercase
               S01:000012C4:  CD 89 10
F00:0384       		call println
               S01:000012C7:  CD 77 10
F00:0385       
F00:0386       		ld ix,_ladr ;# covert text to binary address and store in hidump,lodump
               S01:000012CA:  DD 21 01 13
F00:0387       		ld h,(ix)
               S01:000012CE:  DD 66 00
F00:0388       		ld l,(ix+1)
               S01:000012D1:  DD 6E 01
F00:0389       		call hextobyte
               S01:000012D4:  CD 8C 10
F00:0390       		ld (lodump),a
               S01:000012D7:  32 21 14
F00:0391       		ld h,(ix+2)
               S01:000012DA:  DD 66 02
F00:0392       		ld l,(ix+3)
               S01:000012DD:  DD 6E 03
F00:0393       		call hextobyte
               S01:000012E0:  CD 8C 10
F00:0394       		ld (hidump),a
               S01:000012E3:  32 20 14
F00:0395       
F00:0396       		
F00:0397       		ld hl,cmdlinebuffer+9
               S01:000012E6:  21 AF 17
F00:0398       		ld de,(hidump)
               S01:000012E9:  ED 5B 20 14
F00:0399       		call loadfile
               S01:000012ED:  CD 7D 10
F00:0400       		cp 0
               S01:000012F0:  FE 00
F00:0401       		jp z, _doneload$1
               S01:000012F2:  CA FE 12
F00:0402       		call printhex ;# print return code
               S01:000012F5:  CD 7A 10
F00:0403       		ld hl,loaderrormsg
               S01:000012F8:  21 BD 14
F00:0404       		call println
               S01:000012FB:  CD 77 10
F00:0405       
F00:0406       
F00:0407       
F00:0408       		
F00:0409       _doneload$1:
F00:0410       		ld a,TRUE
               S01:000012FE:  3E 01
F00:0411       		ret
               S01:00001300:  C9
F00:0412       _ladr: .space 5 ;# store character address
F00:0413       
F00:0414       ;# === run builtin ==========
F00:0415       
F00:0416       runcmd: .string "r,",0
               S01:00001306:  72 2C
               S01:00001308:  00
F00:0417       run:
F00:0418       	ld hl,runmsg
               S01:0000130A:  21 CB 14
F00:0419       	call println
               S01:0000130D:  CD 77 10
F00:0420       
F00:0421       	ld hl,cmdlinebuffer ;# command length must be 8 characters
               S01:00001310:  21 A6 17
F00:0422       	call strlen
               S01:00001313:  CD 83 10
F00:0423       	ld a,b
               S01:00001316:  78
F00:0424       	cp 8
               S01:00001317:  FE 08
F00:0425       	jp nz, runerror
               S01:00001319:  C2 4D 13
F00:0426       	ld hl,cmdlinebuffer
               S01:0000131C:  21 A6 17
F00:0427       	call touppercase
               S01:0000131F:  CD 89 10
F00:0428       	call println
               S01:00001322:  CD 77 10
F00:0429       	ld ix, cmdlinebuffer
               S01:00001325:  DD 21 A6 17
F00:0430       	ld h,(ix+4)
               S01:00001329:  DD 66 04
F00:0431       	ld l,(ix+5)
               S01:0000132C:  DD 6E 05
F00:0432       	call hextobyte
               S01:0000132F:  CD 8C 10
F00:0433       	ld (lodump),a
               S01:00001332:  32 21 14
F00:0434       
F00:0435       	ld h,(ix+6)
               S01:00001335:  DD 66 06
F00:0436       	ld l,(ix+7)
               S01:00001338:  DD 6E 07
F00:0437       	call hextobyte
               S01:0000133B:  CD 8C 10
F00:0438       	ld (hidump),a
               S01:0000133E:  32 20 14
F00:0439       	ld hl,0
               S01:00001341:  21 00 00
F00:0440       	call println
               S01:00001344:  CD 77 10
F00:0441       
F00:0442       	call runfrom
               S01:00001347:  CD 1F 14
F00:0443       	jp runexit
               S01:0000134A:  C3 53 13
F00:0444       runerror:
F00:0445       	ld hl,runsyntaxmsg
               S01:0000134D:  21 CF 14
F00:0446       	call println
               S01:00001350:  CD 77 10
F00:0447       runexit:
F00:0448       	ld a,TRUE
               S01:00001353:  3E 01
F00:0449       	ret
               S01:00001355:  C9
F00:0450       
F00:0451       # === help builtin === #
F00:0452       helpcmd: .string "?"
               S01:00001356:  3F
F00:0453       
F00:0454       help:
F00:0455       	ld hl,helpmsg
               S01:00001358:  21 21 16
F00:0456       	call println
               S01:0000135B:  CD 77 10
F00:0457       
F00:0458       	ld a,TRUE
               S01:0000135E:  3E 01
F00:0459       	ret
               S01:00001360:  C9
F00:0460       
F00:0461       	# === in builtin == #
F00:0462       incmd: .string "in,"
               S01:00001361:  69 6E 2C
F00:0463       din:
F00:0464       	ld hl,inmsg
               S01:00001365:  21 00 15
F00:0465       	call println
               S01:00001368:  CD 77 10
F00:0466       
F00:0467       	ld hl,cmdlinebuffer
               S01:0000136B:  21 A6 17
F00:0468       	call strlen
               S01:0000136E:  CD 83 10
F00:0469       	ld a,b
               S01:00001371:  78
F00:0470       	cp 7
               S01:00001372:  FE 07
F00:0471       	jp nz, _inerror
               S01:00001374:  C2 99 13
F00:0472       	ld hl,cmdlinebuffer
               S01:00001377:  21 A6 17
F00:0473       	call touppercase
               S01:0000137A:  CD 89 10
F00:0474       	call println
               S01:0000137D:  CD 77 10
F00:0475       	ld ix,cmdlinebuffer
               S01:00001380:  DD 21 A6 17
F00:0476       	ld h,(ix+5)
               S01:00001384:  DD 66 05
F00:0477       	ld l,(ix+6)
               S01:00001387:  DD 6E 06
F00:0478       	call hextobyte
               S01:0000138A:  CD 8C 10
F00:0479       	ld (lodump),a ;# address to read in lodump
               S01:0000138D:  32 21 14
F00:0480       	ld c,a
               S01:00001390:  4F
F00:0481       	in a,(c)
               S01:00001391:  ED 78
F00:0482       	call printhex
               S01:00001393:  CD 7A 10
F00:0483       	jp _inexit
               S01:00001396:  C3 9F 13
F00:0484       _inerror:
F00:0485       	ld hl,insyntaxmsg
               S01:00001399:  21 03 15
F00:0486       	call println
               S01:0000139C:  CD 77 10
F00:0487       _inexit:
F00:0488       
F00:0489       	ld a,TRUE
               S01:0000139F:  3E 01
F00:0490       	ret
               S01:000013A1:  C9
F00:0491       
F00:0492       	# === out builtin == #
F00:0493       outcmd: .string "out,"
               S01:000013A2:  6F 75 74 2C
F00:0494       dout:
F00:0495       	ld hl,outmsg
               S01:000013A7:  21 70 15
F00:0496       	call println
               S01:000013AA:  CD 77 10
F00:0497       
F00:0498       	ld hl,cmdlinebuffer
               S01:000013AD:  21 A6 17
F00:0499       	call strlen
               S01:000013B0:  CD 83 10
F00:0500       	ld a,b
               S01:000013B3:  78
F00:0501       	cp 13
               S01:000013B4:  FE 0D
F00:0502       	jp nz, outerror
               S01:000013B6:  C2 E7 13
F00:0503       	ld hl,cmdlinebuffer
               S01:000013B9:  21 A6 17
F00:0504       	call touppercase
               S01:000013BC:  CD 89 10
F00:0505       	call println
               S01:000013BF:  CD 77 10
F00:0506       	ld ix,cmdlinebuffer
               S01:000013C2:  DD 21 A6 17
F00:0507       	ld h,(ix+6)
               S01:000013C6:  DD 66 06
F00:0508       	ld l,(ix+7)
               S01:000013C9:  DD 6E 07
F00:0509       	call hextobyte
               S01:000013CC:  CD 8C 10
F00:0510       	ld (lodump),a ;# byte to send in lodump
               S01:000013CF:  32 21 14
F00:0511       
F00:0512       	ld h,(ix+11)
               S01:000013D2:  DD 66 0B
F00:0513       	ld l,(ix+12)
               S01:000013D5:  DD 6E 0C
F00:0514       	call hextobyte
               S01:000013D8:  CD 8C 10
F00:0515       	ld (hidump),a ;# address in hidump
               S01:000013DB:  32 20 14
F00:0516       	ld c,a
               S01:000013DE:  4F
F00:0517       	ld a,(lodump)
               S01:000013DF:  3A 21 14
F00:0518       	out (C),A
               S01:000013E2:  ED 79
F00:0519       
F00:0520       
F00:0521       	jp outexit
               S01:000013E4:  C3 ED 13
F00:0522       
F00:0523       outerror:
F00:0524       	ld hl,outsyntaxmsg
               S01:000013E7:  21 74 15
F00:0525       	call println
               S01:000013EA:  CD 77 10
F00:0526       outexit:
F00:0527       	ld a,TRUE
               S01:000013ED:  3E 01
F00:0528       	ret
               S01:000013EF:  C9
F00:0529       
F00:0530       
F00:0531       	# === createprocess builtin === #
F00:0532       createprocesscmd: .string "createprocess,"
               S01:000013F0:  63 72 65 61 74 65 70 72 6F 63 65 73 73 2C
F00:0533       createprocess:
F00:0534       	ld hl,createprocessmsg
               S01:000013FF:  21 02 16
F00:0535       	call println
               S01:00001402:  CD 77 10
F00:0536       	ld hl,cmdlinebuffer
               S01:00001405:  21 A6 17
F00:0537       	push hl ;# save program name
               S01:00001408:  E5
F00:0538       	dec hl ;# this is stupid but it works
               S01:00001409:  2B
F00:0539       _1$:
F00:0540       	inc hl
               S01:0000140A:  23
F00:0541       	ld a,(hl)
               S01:0000140B:  7E
F00:0542       	
F00:0543       	cp 0 ;# null terminated
               S01:0000140C:  FE 00
F00:0544       	jp z,_2$
               S01:0000140E:  CA 19 14
F00:0545       
F00:0546       	cp ' ' ;# look for 1st space
               S01:00001411:  FE 20
F00:0547       	jp nz,_1$
               S01:00001413:  C2 0A 14
F00:0548       	ld a,0
               S01:00001416:  3E 00
F00:0549       	ld (hl),a ;# zero terminate prgram name
               S01:00001418:  77
F00:0550       _2$:
F00:0551       	inc hl
               S01:00001419:  23
F00:0552       	push hl ;# save the command parameters
               S01:0000141A:  E5
F00:0553       	call createProcess
               S01:0000141B:  CD 98 10
F00:0554       	ret
               S01:0000141E:  C9
F00:0555       
F00:0556       
F00:0557       ;# shared variables for builtin functions
F00:0558       runfrom: .byte 0xc3 ;# jump instruction - must be next to hidump
               S01:0000141F:  C3
F00:0559       hidump: .byte 0 ;# used but hexdump and load
               S01:00001420:  00
F00:0560       lodump: .byte 0 ;# used by hexdump and load
               S01:00001421:  00
F00:0561       
F00:0562       		;#======================= builtin functions end ================
F00:0563       		;# --- dev note : builtin function must return TRUE in a register
F00:0564       messages:
F00:0565       ;	dbug1: .string "debug1"
F00:0566       ;	dbug2: .string "debug2"
F00:0567       	welcomemsg: .string "Welcome to Z80"
               S01:00001422:  57 65 6C 63 6F 6D 65 20 74 6F 20 5A 38 30
F00:0568       	hexdumpmsg: .string "HEXDUMP"
               S01:00001431:  48 45 58 44 55 4D 50
F00:0569       	hexdumpprefix: .string "0x"
               S01:00001439:  30 78
F00:0570       	hexdumpsyntaxmsg: .string "  hexdump syntax: h,0xXXXX - address specified in hexidecimal"
               S01:0000143C:  20 20 68 65 78 64 75 6D 70 20 73 79 6E 74 61 78
               S01:0000144C:  3A 20 68 2C 30 78 58 58 58 58 20 2D 20 61 64 64
F00:0571       	loadmsg: .string "LOAD"
               S01:0000147A:  4C 4F 41 44
F00:0572       	loadsyntaxmsg: .string "  load syntax: l,0xXXXX,filename - load file @ 0xXXXX address"
               S01:0000147F:  20 20 6C 6F 61 64 20 73 79 6E 74 61 78 3A 20 6C
               S01:0000148F:  2C 30 78 58 58 58 58 2C 66 69 6C 65 6E 61 6D 65
F00:0573       	loaderrormsg: .string "  load error."
               S01:000014BD:  20 20 6C 6F 61 64 20 65 72 72 6F 72 2E
F00:0574       	runmsg: .string "RUN"
               S01:000014CB:  52 55 4E
F00:0575       	runsyntaxmsg: .string "  run syntax: r,0xXXXX - run from 0xXXXX address"
               S01:000014CF:  20 20 72 75 6E 20 73 79 6E 74 61 78 3A 20 72 2C
               S01:000014DF:  30 78 58 58 58 58 20 2D 20 72 75 6E 20 66 72 6F
F00:0576       	inmsg: .string "IN"
               S01:00001500:  49 4E
F00:0577       	insyntaxmsg: .string "  peripheral in syntax: in,0xYY - execute IN A,(0xYY) - register A is displayed in hex on return"
               S01:00001503:  20 20 70 65 72 69 70 68 65 72 61 6C 20 69 6E 20
               S01:00001513:  73 79 6E 74 61 78 3A 20 69 6E 2C 30 78 59 59 20
F00:0578       	inerrormsg: .string "  in error."
               S01:00001564:  20 20 69 6E 20 65 72 72 6F 72 2E
F00:0579       	outmsg: .string "OUT"
               S01:00001570:  4F 55 54
F00:0580       	outsyntaxmsg: .string "  peripheral out syntax: out,0xXX,0xYY - executes\r\nLD A,0xXX\r\nOUT (0xYY), A\r\nwhere 0xYY is
               S01:00001574:  20 20 70 65 72 69 70 68 65 72 61 6C 20 6F 75 74
               S01:00001584:  20 73 79 6E 74 61 78 3A 20 6F 75 74 2C 30 78 58
F00:0581       	outerrormsg: .string " out error."
               S01:000015F6:  20 6F 75 74 20 65 72 72 6F 72 2E
F00:0582       	createprocessmsg: .string "hell no"
               S01:00001602:  68 65 6C 6C 20 6E 6F
F00:0583       
F00:0584       	commandPromptmsg: .string "\r\n>";
               S01:0000160A:  0D 0A 3E
F00:0585       	invalidcommandmsg: .string ": Invalid command."
               S01:0000160E:  3A 20 49 6E 76 61 6C 69 64 20 63 6F 6D 6D 61 6E
               S01:0000161E:  64 2E
F00:0586       	helpmsg: .byte "Z80 command line builtin commands:\r\n"
               S01:00001621:  5A 38 30 20 63 6F 6D 6D 61 6E 64 20 6C 69 6E 65
               S01:00001631:  20 62 75 69 6C 74 69 6E 20 63 6F 6D 6D 61 6E 64
F00:0587       			 .byte "? - help, you are reading help right now\r\n"
               S01:00001645:  3F 20 2D 20 68 65 6C 70 2C 20 79 6F 75 20 61 72
               S01:00001655:  65 20 72 65 61 64 69 6E 67 20 68 65 6C 70 20 72
F00:0588       			 .byte "h,0xXXXX - hexdump from address 0xXXXX for 255 bytes\r\n"
               S01:0000166F:  68 2C 30 78 58 58 58 58 20 2D 20 68 65 78 64 75
               S01:0000167F:  6D 70 20 66 72 6F 6D 20 61 64 64 72 65 73 73 20
F00:0589       			 .byte "l,0xXXXX,filename - load into memory at 0xXXXX the file filename\r\n"
               S01:000016A5:  6C 2C 30 78 58 58 58 58 2C 66 69 6C 65 6E 61 6D
               S01:000016B5:  65 20 2D 20 6C 6F 61 64 20 69 6E 74 6F 20 6D 65
F00:0590       			 .byte "r,0xXXXX - run from address 0xXXXX\r\n"
               S01:000016E7:  72 2C 30 78 58 58 58 58 20 2D 20 72 75 6E 20 66
               S01:000016F7:  72 6F 6D 20 61 64 64 72 65 73 73 20 30 78 58 58
F00:0591       			 .byte "in,0xYY - receive from peripheral at address 0xYY\r\n"
               S01:0000170B:  69 6E 2C 30 78 59 59 20 2D 20 72 65 63 65 69 76
               S01:0000171B:  65 20 66 72 6F 6D 20 70 65 72 69 70 68 65 72 61
F00:0592       			 .byte "out,0xXX,0xYY - send to peripheral at address 0xYY then value 0xXX\r\n"
               S01:0000173E:  6F 75 74 2C 30 78 58 58 2C 30 78 59 59 20 2D 20
               S01:0000174E:  73 65 6E 64 20 74 6F 20 70 65 72 69 70 68 65 72
F00:0593       			 .string 0
               S01:00001782:  00
F00:0594       builtin:
F00:0595       	;# 2bytes pointer to command - zero terminated, 2bytes pointer to handler Routines
F00:0596       	;# last item will have 0x000 to indicate end of list
F00:0597       	;#hexdump
F00:0598       		.2byte hexdumpcmd,hexdump
               S01:00001784:  C5 11
               S01:00001786:  C9 11
F00:0599       		.2byte loadcmd,load
               S01:00001788:  94 12
               S01:0000178A:  98 12
F00:0600       		.2byte runcmd,run
               S01:0000178C:  06 13
               S01:0000178E:  0A 13
F00:0601       		.2byte helpcmd,help
               S01:00001790:  56 13
               S01:00001792:  58 13
F00:0602       		.2byte outcmd,dout
               S01:00001794:  A2 13
               S01:00001796:  A7 13
F00:0603       		.2byte incmd,din
               S01:00001798:  61 13
               S01:0000179A:  65 13
F00:0604       		.2byte createprocesscmd,createprocess
               S01:0000179C:  F0 13
               S01:0000179E:  FF 13
F00:0605       
F00:0606       	endoflist: .2byte 0,0
               S01:000017A0:  00 00
               S01:000017A2:  00 00
F00:0607       
F00:0608       data:
F00:0609       	cmdlineexecute: .byte 0
               S01:000017A4:  00
F00:0610       	cmdlinebufferlen: .byte 0
               S01:000017A5:  00
F00:0611       	cmdlinebuffer: .space 50
F00:0612       	cmdlinebuffer$:
F00:0613       
F00:0614       
F00:0615       
F00:0616       	
F00:0617       
F00:0618       
F00:0619       	;#.org 0x700
F00:0620       	.align 8
F00:0621       	jumptable: ;# for keyboard interrupts
F00:0622       	.2byte cmdline ;0
               S01:00001800:  36 11
F00:0623       	.2byte cmdline ;0
               S01:00001802:  36 11


Sections:
S01  seg1000


Sources:
F00  cmd.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc


Symbols:
data EXPR(6052=0x17a4) UNUSED ABS 
endoflist EXPR(6048=0x17a0) UNUSED ABS 
outerrormsg EXPR(5622=0x15f6) UNUSED ABS 
inerrormsg EXPR(5476=0x1564) UNUSED ABS 
messages EXPR(5154=0x1422) UNUSED ABS 
 createprocess _2$ EXPR(5145=0x1419) ABS 
 createprocess _1$ EXPR(5130=0x140a) ABS 
createprocessmsg EXPR(5634=0x1602) ABS 
createprocesscmd EXPR(5104=0x13f0) ABS 
outsyntaxmsg EXPR(5492=0x1574) ABS 
outexit EXPR(5101=0x13ed) ABS 
outerror EXPR(5095=0x13e7) ABS 
outmsg EXPR(5488=0x1570) ABS 
dout EXPR(5031=0x13a7) ABS 
outcmd EXPR(5026=0x13a2) ABS 
insyntaxmsg EXPR(5379=0x1503) ABS 
_inexit EXPR(5023=0x139f) ABS 
_inerror EXPR(5017=0x1399) ABS 
inmsg EXPR(5376=0x1500) ABS 
din EXPR(4965=0x1365) ABS 
incmd EXPR(4961=0x1361) ABS 
helpmsg EXPR(5665=0x1621) ABS 
help EXPR(4952=0x1358) ABS 
helpcmd EXPR(4950=0x1356) ABS 
runsyntaxmsg EXPR(5327=0x14cf) ABS 
runexit EXPR(4947=0x1353) ABS 
runfrom EXPR(5151=0x141f) ABS 
runerror EXPR(4941=0x134d) ABS 
runmsg EXPR(5323=0x14cb) ABS 
run EXPR(4874=0x130a) ABS 
runcmd EXPR(4870=0x1306) ABS 
loaderrormsg EXPR(5309=0x14bd) ABS 
_doneload$1 EXPR(4862=0x12fe) ABS 
_ladr EXPR(4865=0x1301) ABS 
loadsyntaxmsg EXPR(5247=0x147f) ABS 
_loadc$1 EXPR(4787=0x12b3) ABS 
loadmsg EXPR(5242=0x147a) ABS 
load EXPR(4760=0x1298) ABS 
loadcmd EXPR(4756=0x1294) ABS 
_prt$ EXPR(4733=0x127d) ABS 
_nex$2 EXPR(4726=0x1276) ABS 
_dexdpc$1 EXPR(4715=0x126b) ABS 
_hexdp$1 EXPR(4690=0x1252) ABS 
hexdumpprefix EXPR(5177=0x1439) ABS 
_hexdp0 EXPR(4666=0x123a) ABS 
_col$1 EXPR(4642=0x1222) ABS 
_sp$1 EXPR(4631=0x1217) ABS 
hexdumpsyntaxmsg EXPR(5180=0x143c) ABS 
hexdumpexit EXPR(4626=0x1212) ABS 
hexdumpprint EXPR(4629=0x1215) ABS 
hidump EXPR(5152=0x1420) ABS 
lodump EXPR(5153=0x1421) ABS 
hexdumperror EXPR(4620=0x120c) ABS 
hexdumpmsg EXPR(5169=0x1431) ABS 
hexdump EXPR(4553=0x11c9) ABS 
hexdumpcmd EXPR(4549=0x11c5) ABS 
_findbuildtinFail EXPR(4521=0x11a9) ABS 
_findbuiltinSuccess EXPR(4525=0x11ad) ABS 
findbuiltin1 EXPR(4469=0x1175) ABS 
findbuiltinrestart EXPR(4463=0x116f) ABS 
builtin EXPR(6020=0x1784) ABS 
executeexit EXPR(4450=0x1162) ABS 
executecmd EXPR(4444=0x115c) ABS 
cmdline EXPR(4406=0x1136) ABS 
cmdlinebuffer$ EXPR(6104=0x17d8) ABS 
cmdlinebufferlen EXPR(6053=0x17a5) ABS 
runuserMemory EXPR(4380=0x111c) UNUSED ABS 
_hexdp$99 EXPR(4367=0x110f) ABS 
hexdumpcmdline EXPR(4362=0x110a) ABS 
invalidcommandmsg EXPR(5646=0x160e) ABS 
loaderr EXPR(4343=0x10f7) ABS 
createprocess EXPR(5119=0x13ff) ABS 
loadandrun EXPR(4325=0x10e5) ABS 
findbuiltin EXPR(4453=0x1165) ABS 
cmdlinebuffer EXPR(6054=0x17a6) ABS 
cmdlineexecute EXPR(6052=0x17a4) ABS 
loop EXPR(4277=0x10b5) ABS 
commandPromptmsg EXPR(5642=0x160a) ABS 
resetcommandline EXPR(4387=0x1123) ABS 
jumptable EXPR(6144=0x1800) ABS 
newcommand EXPR(4260=0x10a4) ABS 
welcomemsg EXPR(5154=0x1422) ABS 
getcommandparams EXPR(4251=0x109b) UNUSED ABS 
createProcess EXPR(4248=0x1098) ABS 
getfilename EXPR(4245=0x1095) UNUSED ABS 
directorynextfile EXPR(4242=0x1092) UNUSED ABS 
directoryopen EXPR(4239=0x108f) UNUSED ABS 
hextobyte EXPR(4236=0x108c) ABS 
touppercase EXPR(4233=0x1089) ABS 
putc EXPR(4230=0x1086) ABS 
strlen EXPR(4227=0x1083) ABS 
memset EXPR(4224=0x1080) ABS 
loadfile EXPR(4221=0x107d) ABS 
printhex EXPR(4218=0x107a) ABS 
println EXPR(4215=0x1077) ABS 
print EXPR(4212=0x1074) ABS 
functionlookups EXPR(4211=0x1073) UNUSED ABS 
_main EXPR(4254=0x109e) ABS 
getcommandparamsadr EXPR(4252=0x109c) ABS 
createProcessadr EXPR(4249=0x1099) ABS 
getfilenameadr EXPR(4246=0x1096) ABS 
directorynextfileadr EXPR(4243=0x1093) ABS 
directoryopenadr EXPR(4240=0x1090) ABS 
printlnadr EXPR(4216=0x1078) ABS 
hextobyteadr EXPR(4237=0x108d) ABS 
touppercaseadr EXPR(4234=0x108a) ABS 
putcadr EXPR(4231=0x1087) ABS 
strlenadr EXPR(4228=0x1084) ABS 
memsetadr EXPR(4225=0x1081) ABS 
loadfileadr EXPR(4222=0x107e) ABS 
printhexadr EXPR(4219=0x107b) ABS 
printadr EXPR(4213=0x1075) ABS 
__CMD__ EXPR(0=0x0) UNUSED 
NEXTNUMBER EXPR(18=0x12) UNUSED 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) 
TRUE EXPR(1=0x1) 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT EXPR(1=0x1) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
