F00:0001       
F00:0002       .include "Routines.inc"
F01:0001       
F01:0002       # address where user programs load
F01:0003       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       
F01:0004       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0005       .equ commandMemory, 0x1000
F01:0006       .equ userMemory,0x2000
F01:0007       
F01:0008       .equ TRUE, 1
F01:0009       .equ FALSE, 0
F01:0010       
F01:0011       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0012       # ld a, PRINT
F01:0013       # call GetAddress
F01:0014       # address for print loaded into hl
F01:0015       # the value in hl can change between os versions so do not hard code the values
F01:0016       
F01:0017       .equ GetAddress, 0x0804
F01:0018       .equ PRINT,		1
F01:0019       .equ PRINTLN,	9
F01:0020       .equ PRINTHEX,	2
F01:0021       .equ LOADFILE,	3
F01:0022       .equ MEMSET,	4
F01:0023       .equ STRLEN,	5
F01:0024       .equ PUTC,		6
F01:0025       .equ TOUPPERCASE,7
F01:0026       .equ HEXTOBYTE,	8
F01:0027       .equ STRNCPY,10
F01:0028       .equ CREATEPROCESS,16
F01:0029       .equ GETCOMMANDPARAMS,17
F01:0030       # filesystem - primitive functions, probably going to change 
F01:0031       .equ DIRECTORYOPEN,13
F01:0032       .equ DIRECTORYNEXTFILE,14
F01:0033       .equ GETFILENAME,15
F01:0034       
F01:0035       
F01:0036       
F01:0037       .equ NEXTNUMBER,18
F01:0038       
F01:0039       
F00:0003       .set __CMD__,0
F00:0004       .org commandMemory
F00:0005       .include "libs.inc"
F04:0001       
F04:0002       .ifndef __CMD__
F04:0003       	.org userMemory
F04:0004       .endif
F04:0005       	ld a,PRINT
               S01:00001000:  3E 01
F04:0006       	call GetAddress
               S01:00001002:  CD 04 08
F04:0007       	ld (printadr),hl
               S01:00001005:  22 75 10
F04:0008       	ld a,PRINTHEX
               S01:00001008:  3E 02
F04:0009       	call GetAddress
               S01:0000100A:  CD 04 08
F04:0010       	ld (printhexadr),hl
               S01:0000100D:  22 7B 10
F04:0011       	ld a,LOADFILE
               S01:00001010:  3E 03
F04:0012       	call GetAddress
               S01:00001012:  CD 04 08
F04:0013       	ld (loadfileadr),hl
               S01:00001015:  22 7E 10
F04:0014       	ld a,MEMSET
               S01:00001018:  3E 04
F04:0015       	call GetAddress
               S01:0000101A:  CD 04 08
F04:0016       	ld (memsetadr),hl
               S01:0000101D:  22 81 10
F04:0017       	ld a,STRLEN
               S01:00001020:  3E 05
F04:0018       	call GetAddress
               S01:00001022:  CD 04 08
F04:0019       	ld (strlenadr),hl
               S01:00001025:  22 84 10
F04:0020       	ld a,PUTC
               S01:00001028:  3E 06
F04:0021       	call GetAddress
               S01:0000102A:  CD 04 08
F04:0022       	ld (putcadr),hl
               S01:0000102D:  22 87 10
F04:0023       	ld a,TOUPPERCASE
               S01:00001030:  3E 07
F04:0024       	call GetAddress
               S01:00001032:  CD 04 08
F04:0025       	ld (touppercaseadr),hl
               S01:00001035:  22 8A 10
F04:0026       	ld a,HEXTOBYTE
               S01:00001038:  3E 08
F04:0027       	call GetAddress
               S01:0000103A:  CD 04 08
F04:0028       	ld (hextobyteadr),hl
               S01:0000103D:  22 8D 10
F04:0029       	ld a,PRINTLN
               S01:00001040:  3E 09
F04:0030       	call GetAddress
               S01:00001042:  CD 04 08
F04:0031       	ld (printlnadr),hl
               S01:00001045:  22 78 10
F04:0032       	ld a,DIRECTORYOPEN
               S01:00001048:  3E 0D
F04:0033       	call GetAddress
               S01:0000104A:  CD 04 08
F04:0034       	ld (directoryopenadr),hl
               S01:0000104D:  22 90 10
F04:0035       	ld a,NEXTFILE
               S01:00001050:  3E 32
F04:0036       	call GetAddress
               S01:00001052:  CD 04 08
F04:0037       	ld (directorynextfileadr),hl
               S01:00001055:  22 93 10
F04:0038       	ld a,GETFILENAME
               S01:00001058:  3E 0F
F04:0039       	call GetAddress
               S01:0000105A:  CD 04 08
F04:0040       	ld (getfilenameadr),hl
               S01:0000105D:  22 96 10
F04:0041       	ld a,CREATEPROCESS
               S01:00001060:  3E 10
F04:0042       	call GetAddress
               S01:00001062:  CD 04 08
F04:0043       	ld (createProcessadr),hl
               S01:00001065:  22 99 10
F04:0044       	ld a,GETCOMMANDPARAMS
               S01:00001068:  3E 11
F04:0045       	call GetAddress
               S01:0000106A:  CD 04 08
F04:0046       	ld (getcommandparamsadr),hl
               S01:0000106D:  22 9C 10
F04:0047       
F04:0048       
F04:0049       	jp _main
               S01:00001070:  C3 9E 10
F04:0050       
F04:0051       	functionlookups:
F04:0052       	.align 2
F04:0053       	print: .byte 0xc3
               S01:00001074:  C3
F04:0054       	printadr: .2byte 0
               S01:00001075:  00 00
F04:0055       	println: .byte 0xc3
               S01:00001077:  C3
F04:0056       	printlnadr: .2byte 0
               S01:00001078:  00 00
F04:0057       	printhex: .byte 0xc3
               S01:0000107A:  C3
F04:0058       	printhexadr: .2byte 0
               S01:0000107B:  00 00
F04:0059       	loadfile: .byte 0xc3
               S01:0000107D:  C3
F04:0060       	loadfileadr: .2byte 0
               S01:0000107E:  00 00
F04:0061       	memset: .byte 0xc3
               S01:00001080:  C3
F04:0062       	memsetadr: .2byte 0
               S01:00001081:  00 00
F04:0063       	strlen: .byte 0xc3
               S01:00001083:  C3
F04:0064       	strlenadr: .2byte 0
               S01:00001084:  00 00
F04:0065       	putc: .byte 0xc3
               S01:00001086:  C3
F04:0066       	putcadr: .2byte 0
               S01:00001087:  00 00
F04:0067       	touppercase: .byte 0xc3
               S01:00001089:  C3
F04:0068       	touppercaseadr: .2byte 0
               S01:0000108A:  00 00
F04:0069       	hextobyte: .byte 0xc3
               S01:0000108C:  C3
F04:0070       	hextobyteadr: .2byte 0
               S01:0000108D:  00 00
F04:0071       	directoryopen: .byte 0xc3
               S01:0000108F:  C3
F04:0072       	directoryopenadr: .2byte 0
               S01:00001090:  00 00
F04:0073       	directorynextfile: .byte 0xc3
               S01:00001092:  C3
F04:0074       	directorynextfileadr: .2byte 0
               S01:00001093:  00 00
F04:0075       	getfilename: .byte 0xc3
               S01:00001095:  C3
F04:0076       	getfilenameadr: .2byte 0
               S01:00001096:  00 00
F04:0077       	createProcess: .byte 0xc3
               S01:00001098:  C3
F04:0078       	createProcessadr: .2byte 0
               S01:00001099:  00 00
F04:0079       	getcommandparams: .byte 0xc3
               S01:0000109B:  C3
F04:0080       	getcommandparamsadr: .2byte 0
               S01:0000109C:  00 00
F04:0081       
F04:0082       _main:
F00:0006       	
F00:0007       
F00:0008       	ld hl,welcomemsg
               S01:0000109E:  21 B2 14
F00:0009       	call println
               S01:000010A1:  CD 77 10
F00:0010       	ld a,0
               S01:000010A4:  3E 00
F00:0011       	ld (doreload),a
               S01:000010A6:  32 F9 10
F00:0012       
F00:0013       newcommand:
F00:0014       	ld a,(doreload)
               S01:000010A9:  3A F9 10
F00:0015       	cp 1
               S01:000010AC:  FE 01
F00:0016       	jp nz,1$ ;# will force command program reload
               S01:000010AE:  C2 B8 10
F00:0017       	ld hl,reloadmsg
               S01:000010B1:  21 B3 16
F00:0018       	call println
               S01:000010B4:  CD 77 10
F00:0019       	ret
               S01:000010B7:  C9
F00:0020       
F00:0021       1$:
F00:0022       	; #setup/reset the interrupt vector who knows what could have happen to it
F00:0023       	di
               S01:000010B8:  F3
F00:0024       	im 2
               S01:000010B9:  ED 5E
F00:0025       	ld a, jumptable/256 ; initialize the new interrupt vector
               S01:000010BB:  3E 19
F00:0026       	ld i,a
               S01:000010BD:  ED 47
F00:0027       	ei
               S01:000010BF:  FB
F00:0028       
F00:0029       
F00:0030       	call resetcommandline
               S01:000010C0:  CD 41 11
F00:0031       	ld hl,commandPromptmsg ;# display command prompt
               S01:000010C3:  21 BE 16
F00:0032       	call print
               S01:000010C6:  CD 74 10
F00:0033       loop:
F00:0034       	halt		;# wait for interrupt
               S01:000010C9:  76
F00:0035       	ld hl,cmdlineexecute ;# if user pressed enter then cmdlineexecute will contain 1
               S01:000010CA:  21 8B 18
F00:0036       	ld a,(hl)
               S01:000010CD:  7E
F00:0037       	cp 1
               S01:000010CE:  FE 01
F00:0038       	jp nz,loop ;# nothing to process so repeat
               S01:000010D0:  C2 C9 10
F00:0039       
F00:0040       	ld hl,cmdlinebuffer ;# test if user entered a value
               S01:000010D3:  21 8D 18
F00:0041       	call strlen
               S01:000010D6:  CD 83 10
F00:0042       	ld a,b
               S01:000010D9:  78
F00:0043       	cp 0
               S01:000010DA:  FE 00
F00:0044       	jp z, newcommand ;# if no commands display prompt and repeat
               S01:000010DC:  CA A9 10
F00:0045       	ld hl,0
               S01:000010DF:  21 00 00
F00:0046       	call println
               S01:000010E2:  CD 77 10
F00:0047       	ld hl,cmdlinebuffer
               S01:000010E5:  21 8D 18
F00:0048       	call findbuiltin
               S01:000010E8:  CD C5 11
F00:0049       	cp TRUE ;# true if builtin was found
               S01:000010EB:  FE 01
F00:0050       	call nz,loadandrun ;# must be something to do
               S01:000010ED:  C4 FA 10
F00:0051       	ld hl,0
               S01:000010F0:  21 00 00
F00:0052       	call println
               S01:000010F3:  CD 77 10
F00:0053       	jp newcommand
               S01:000010F6:  C3 A9 10
F00:0054       doreload: .byte 0
               S01:000010F9:  00
F00:0055       
F00:0056       loadandrun:
F00:0057       	
F00:0058       	ld hl,0
               S01:000010FA:  21 00 00
F00:0059       	call println ;# display a new line
               S01:000010FD:  CD 77 10
F00:0060       ;	ld hl, cmdlinebuffer ;# load filename of program
F00:0061       ;	ld de, userMemory ;# address where to load program
F00:0062       ;	call loadfile
F00:0063       ;	cp 0
F00:0064       ;	jp nz,loaderr ;# if load returned anything except 0, its an error
F00:0065       ;	jp runuserMemory
F00:0066       
F00:0067       	ld a,1
               S01:00001100:  3E 01
F00:0068       	ld (ignorekeyboard),a
               S01:00001102:  32 16 11
F00:0069       
F00:0070       	call createprocess
               S01:00001105:  CD 82 14
F00:0071       	cp 0
               S01:00001108:  FE 00
F00:0072       	jp nz,loaderr
               S01:0000110A:  C2 17 11
F00:0073       	call resetcommandline
               S01:0000110D:  CD 41 11
F00:0074       	ld a,0
               S01:00001110:  3E 00
F00:0075       	ld (ignorekeyboard),a
               S01:00001112:  32 16 11
F00:0076       	ret
               S01:00001115:  C9
F00:0077       
F00:0078       
F00:0079       ignorekeyboard: .byte 0
               S01:00001116:  00
F00:0080       
F00:0081       loaderr:
F00:0082       	call printhex ;# print return code
               S01:00001117:  CD 7A 10
F00:0083       	ld hl,cmdlinebuffer
               S01:0000111A:  21 8D 18
F00:0084       	call print ;# print the command
               S01:0000111D:  CD 74 10
F00:0085       	ld hl,invalidcommandmsg
               S01:00001120:  21 C2 16
F00:0086       	call println ;# print msg
               S01:00001123:  CD 77 10
F00:0087       	call hexdumpcmdline
               S01:00001126:  CD 2F 11
F00:0088       ;#	call resetcommandline
F00:0089       	ld a,0
               S01:00001129:  3E 00
F00:0090       	ld (ignorekeyboard),a
               S01:0000112B:  32 16 11
F00:0091       	ret
               S01:0000112E:  C9
F00:0092       
F00:0093       
F00:0094       hexdumpcmdline: 
F00:0095       	;# when an invalid command happens hexdump 16 bytes 
F00:0096       	;# of the commmandline.
F00:0097       	ld hl,cmdlinebuffer
               S01:0000112F:  21 8D 18
F00:0098       	ld b,16
               S01:00001132:  06 10
F00:0099       _hexdp$99:
F00:0100       
F00:0101       	;# print the byte values
F00:0102       	ld a,(hl)
               S01:00001134:  7E
F00:0103       	call printhex
               S01:00001135:  CD 7A 10
F00:0104       	ld a,' '
               S01:00001138:  3E 20
F00:0105       	call putc
               S01:0000113A:  CD 86 10
F00:0106       	;# next byte
F00:0107       	inc hl
               S01:0000113D:  23
F00:0108       	djnz _hexdp$99
               S01:0000113E:  10 F4
F00:0109       	ret
               S01:00001140:  C9
F00:0110       
F00:0111       ;runuserMemory:
F00:0112       	
F00:0113       
F00:0114       ;	call userMemory
F00:0115       ;	call resetcommandline
F00:0116       ;	ret
F00:0117       
F00:0118       
F00:0119       
F00:0120       resetcommandline:
F00:0121       	push af
               S01:00001141:  F5
F00:0122       	push hl
               S01:00001142:  E5
F00:0123       # reset the command line variables
F00:0124       	ld hl,cmdlinebufferlen
               S01:00001143:  21 8C 18
F00:0125       	ld a,0
               S01:00001146:  3E 00
F00:0126       	ld (hl),a
               S01:00001148:  77
F00:0127       	ld hl, cmdlinebuffer
               S01:00001149:  21 8D 18
F00:0128       	ld b, cmdlinebuffer$-cmdlinebuffer
               S01:0000114C:  06 32
F00:0129       	call memset
               S01:0000114E:  CD 80 10
F00:0130       	pop hl
               S01:00001151:  E1
F00:0131       	pop af
               S01:00001152:  F1
F00:0132       	ret
               S01:00001153:  C9
F00:0133       
F00:0134       	;##############################################################
F00:0135       	cmdline: ;#/* interrupt 2, echo what was sent*/
F00:0136       		in a,(SERIALPORT)
               S01:00001154:  DB 01
F00:0137       		
F00:0138       		push af  ;# if a program is runing the ignorekeyboard flag is set
               S01:00001156:  F5
F00:0139       		ld a,(ignorekeyboard) ;# so we look for that flag and ignore any keypresses if set true
               S01:00001157:  3A 16 11
F00:0140       		cp a,1
               S01:0000115A:  FE 01
F00:0141       		jp nz,12$
               S01:0000115C:  C2 63 11
F00:0142       		pop af
               S01:0000115F:  F1
F00:0143       		jp executeexit
               S01:00001160:  C3 C2 11
F00:0144       12$:	
F00:0145       		pop af
               S01:00001163:  F1
F00:0146       		cp 0x0d
               S01:00001164:  FE 0D
F00:0147       		jp z, executecmd
               S01:00001166:  CA BC 11
F00:0148       		cp 0x0a
               S01:00001169:  FE 0A
F00:0149       		jp z,executeexit
               S01:0000116B:  CA C2 11
F00:0150       
F00:0151       	
F00:0152       		ld hl,cmdlinebufferlen # load the length into b
               S01:0000116E:  21 8C 18
F00:0153       		ld b,0
               S01:00001171:  06 00
F00:0154       		ld c,(hl)
               S01:00001173:  4E
F00:0155       
F00:0156       
F00:0157       		ld hl,cmdlinebuffer ;# load buffer address into hl
               S01:00001174:  21 8D 18
F00:0158       		add hl,bc ;# add the buffer length to get the last character pointer
               S01:00001177:  09
F00:0159       
F00:0160       		;# for delete or backspace
F00:0161       		cp 8
               S01:00001178:  FE 08
F00:0162       		jp nz,1$
               S01:0000117A:  C2 92 11
F00:0163       
F00:0164       		ld a,(cmdlinebufferlen)
               S01:0000117D:  3A 8C 18
F00:0165       		cp 0
               S01:00001180:  FE 00
F00:0166       		jp z,4$
               S01:00001182:  CA B3 11
F00:0167       
F00:0168       		dec hl
               S01:00001185:  2B
F00:0169       		ld a,0
               S01:00001186:  3E 00
F00:0170       		ld (hl),a
               S01:00001188:  77
F00:0171       		ld a,8
               S01:00001189:  3E 08
F00:0172       		ld hl,cmdlinebufferlen
               S01:0000118B:  21 8C 18
F00:0173       		dec (hl)
               S01:0000118E:  35
F00:0174       		jp 2$
               S01:0000118F:  C3 B1 11
F00:0175       
F00:0176       1$:
F00:0177       		cp 127
               S01:00001192:  FE 7F
F00:0178       		jp nz,3$
               S01:00001194:  C2 AC 11
F00:0179       
F00:0180       		ld a,(cmdlinebufferlen)
               S01:00001197:  3A 8C 18
F00:0181       		cp 0
               S01:0000119A:  FE 00
F00:0182       		jp z,4$
               S01:0000119C:  CA B3 11
F00:0183       
F00:0184       		dec hl
               S01:0000119F:  2B
F00:0185       		ld a,0
               S01:000011A0:  3E 00
F00:0186       		ld (hl),a
               S01:000011A2:  77
F00:0187       		ld a,127
               S01:000011A3:  3E 7F
F00:0188       		ld hl,cmdlinebufferlen
               S01:000011A5:  21 8C 18
F00:0189       		dec (hl)
               S01:000011A8:  35
F00:0190       		jp 2$
               S01:000011A9:  C3 B1 11
F00:0191       
F00:0192       3$:		ld (hl),a ;# store keyboard character
               S01:000011AC:  77
F00:0193       		
F00:0194       		ld hl,cmdlinebufferlen ;# load buffer length
               S01:000011AD:  21 8C 18
F00:0195       		inc (hl) ;# increment buffer len
               S01:000011B0:  34
F00:0196       		
F00:0197       
F00:0198       2$:		out (SERIALPORT),a
               S01:000011B1:  D3 01
F00:0199       4$:		ld a,0
               S01:000011B3:  3E 00
F00:0200       		ld hl,cmdlineexecute
               S01:000011B5:  21 8B 18
F00:0201       		ld (hl),a
               S01:000011B8:  77
F00:0202       		jp executeexit
               S01:000011B9:  C3 C2 11
F00:0203       	executecmd:
F00:0204       		ld a,1
               S01:000011BC:  3E 01
F00:0205       		ld hl,cmdlineexecute
               S01:000011BE:  21 8B 18
F00:0206       		ld (hl),a
               S01:000011C1:  77
F00:0207       	executeexit:
F00:0208       		ei
               S01:000011C2:  FB
F00:0209       		reti
               S01:000011C3:  ED 4D
F00:0210       
F00:0211       		
F00:0212       	;# ======================== find builtin function =======
F00:0213       		;# ld hl, buffer (zero terminated string)
F00:0214       		;# call findbuiltin
F00:0215       		;# returns TRUE if builtin command located
F00:0216       		;#         FALSE if no builtin command located
F00:0217       
F00:0218       findbuiltin:
F00:0219       	
F00:0220       	push hl ;# save hl
               S01:000011C5:  E5
F00:0221       	push hl
               S01:000011C6:  E5
F00:0222       
F00:0223       
F00:0224       	pop ix;# copy hl into ix, ix contains the user supplied cmd
               S01:000011C7:  DD E1
F00:0225       
F00:0226       	ld iy,builtin ;# load start of list
               S01:000011C9:  FD 21 67 18
F00:0227       	ld b,0 ;# used to keep count of the number of characters - because a 0 length is bad
               S01:000011CD:  06 00
F00:0228       findbuiltinrestart:
F00:0229       	ld l, (iy)	;# load hl with the pointer address
               S01:000011CF:  FD 6E 00
F00:0230       	ld h, (iy+1)
               S01:000011D2:  FD 66 01
F00:0231       
F00:0232       findbuiltin1:
F00:0233       	ld a,(ix)
               S01:000011D5:  DD 7E 00
F00:0234       	cp 0 ;# if we have a null character we have made a match
               S01:000011D8:  FE 00
F00:0235       	jp z,_findbuiltinSuccess
               S01:000011DA:  CA 0D 12
F00:0236       
F00:0237       	inc b ;# character count
               S01:000011DD:  04
F00:0238       	ld a,(hl)
               S01:000011DE:  7E
F00:0239       	sub (ix)
               S01:000011DF:  DD 96 00
F00:0240       
F00:0241       	inc ix ;# no flag changes for inc
               S01:000011E2:  DD 23
F00:0242       	inc hl
               S01:000011E4:  23
F00:0243       	jp z,findbuiltin1 ;# if the same characters repeat
               S01:000011E5:  CA D5 11
F00:0244       
F00:0245       	;# if we get here, its because the characters no longer match.
F00:0246       	;# so we need to test the builtin cmd to see if it's a zero,
F00:0247       	;# if it is then we have matched the builtin command
F00:0248       	dec hl ;# need to backup 1 byte because we moved it before the test
               S01:000011E8:  2B
F00:0249       	ld a,(hl)
               S01:000011E9:  7E
F00:0250       	cp 0
               S01:000011EA:  FE 00
F00:0251       	jp z,_findbuiltinSuccess
               S01:000011EC:  CA 0D 12
F00:0252       	;# if we reach here then we did not find a match, so
F00:0253       	;# we can load the next builtin cmd and try again.
F00:0254       	pop hl
               S01:000011EF:  E1
F00:0255       	push hl ;# save hl
               S01:000011F0:  E5
F00:0256       	push hl ;# restore the user supplied cmd
               S01:000011F1:  E5
F00:0257       	pop ix ;# now ix contains the user supplied cmd
               S01:000011F2:  DD E1
F00:0258       	;# iy still contains the builtin address pointer.
F00:0259       	;# so if we add 4 bytes to it we will point to the next
F00:0260       	;# table entry for the builtin command.
F00:0261       	ld bc,4
               S01:000011F4:  01 04 00
F00:0262       	add iy,bc
               S01:000011F7:  FD 09
F00:0263       	;# before we try with the current entry we need to check
F00:0264       	;# its not the end of the list
F00:0265       	ld a,(iy)
               S01:000011F9:  FD 7E 00
F00:0266       	cp 0
               S01:000011FC:  FE 00
F00:0267       	jp nz, findbuiltinrestart
               S01:000011FE:  C2 CF 11
F00:0268       	ld a,(iy+1)
               S01:00001201:  FD 7E 01
F00:0269       	cp 0
               S01:00001204:  FE 00
F00:0270       	jp nz,findbuiltinrestart
               S01:00001206:  C2 CF 11
F00:0271       	
F00:0272       
F00:0273       _findbuildtinFail:
F00:0274       	pop hl ;# remove the save hl
               S01:00001209:  E1
F00:0275       	ld a,FALSE
               S01:0000120A:  3E 00
F00:0276       	ret
               S01:0000120C:  C9
F00:0277       _findbuiltinSuccess:
F00:0278       	;# check the length - it can't be 0
F00:0279       	ld a,b
               S01:0000120D:  78
F00:0280       	cp 0
               S01:0000120E:  FE 00
F00:0281       	jp z,_findbuildtinFail
               S01:00001210:  CA 09 12
F00:0282       	;# ok good from here to continue
F00:0283       	pop hl ;# remove the saved hl
               S01:00001213:  E1
F00:0284       	ld bc,2 ;# we have a success so now we load the address of the subroutine
               S01:00001214:  01 02 00
F00:0285       	add iy,bc
               S01:00001217:  FD 09
F00:0286       	
F00:0287       	ld l, (iy)	;# load hl with the pointer address
               S01:00001219:  FD 6E 00
F00:0288       	ld h, (iy+1) ;# to jump into the address I need to use the iy registers
               S01:0000121C:  FD 66 01
F00:0289       	push hl
               S01:0000121F:  E5
F00:0290       	pop iy
               S01:00001220:  FD E1
F00:0291       	jp (iy)
               S01:00001222:  FD E9
F00:0292       	halt ;# we will never get here
               S01:00001224:  76
F00:0293       
F00:0294       
F00:0295       
F00:0296       		;#======================= builtin functions ====================
F00:0297       #== hexdump memory builtin == #
F00:0298       		hexdumpcmd: .string "h,",0
               S01:00001225:  68 2C
               S01:00001227:  00
F00:0299       		
F00:0300       	hexdump:
F00:0301       		ld hl,hexdumpmsg
               S01:00001229:  21 D1 14
F00:0302       		call println
               S01:0000122C:  CD 77 10
F00:0303       		ld hl,cmdlinebuffer ;# command length must be 8 characters
               S01:0000122F:  21 8D 18
F00:0304       		call strlen
               S01:00001232:  CD 83 10
F00:0305       		ld a,b
               S01:00001235:  78
F00:0306       		cp 8
               S01:00001236:  FE 08
F00:0307       		jp nz,hexdumperror
               S01:00001238:  C2 6C 12
F00:0308       		ld hl,cmdlinebuffer ;# the hextobyte is expect uppercase characters
               S01:0000123B:  21 8D 18
F00:0309       		call touppercase
               S01:0000123E:  CD 89 10
F00:0310       		call println
               S01:00001241:  CD 77 10
F00:0311       		ld ix,cmdlinebuffer ;# get the 4th and 5th characters into the lobyte
               S01:00001244:  DD 21 8D 18
F00:0312       		ld h,(ix+4)
               S01:00001248:  DD 66 04
F00:0313       		ld l,(ix+5)
               S01:0000124B:  DD 6E 05
F00:0314       		call hextobyte
               S01:0000124E:  CD 8C 10
F00:0315       		ld (lodump),a
               S01:00001251:  32 B1 14
F00:0316       	
F00:0317       		ld h,(ix+6) ;# get the 6th and 7th characters into the hibyte
               S01:00001254:  DD 66 06
F00:0318       		ld l,(ix+7)
               S01:00001257:  DD 6E 07
F00:0319       		call hextobyte
               S01:0000125A:  CD 8C 10
F00:0320       		ld (hidump),a
               S01:0000125D:  32 B0 14
F00:0321       		ld hl,0
               S01:00001260:  21 00 00
F00:0322       		call println
               S01:00001263:  CD 77 10
F00:0323       
F00:0324       	;# hidump has the address to dump so let dump it out
F00:0325       		call hexdumpprint
               S01:00001266:  CD 75 12
F00:0326       		jp hexdumpexit
               S01:00001269:  C3 72 12
F00:0327       
F00:0328       hexdumperror:
F00:0329       		ld hl,hexdumpsyntaxmsg
               S01:0000126C:  21 E5 14
F00:0330       		call println
               S01:0000126F:  CD 77 10
F00:0331       hexdumpexit:
F00:0332       		ld a,TRUE
               S01:00001272:  3E 01
F00:0333       		ret
               S01:00001274:  C9
F00:0334       
F00:0335       
F00:0336       hexdumpprint:
F00:0337       
F00:0338       	;# print the heading
F00:0339       
F00:0340       	ld b,7
               S01:00001275:  06 07
F00:0341       _sp$1:
F00:0342       	ld a,' ' ;# 7 spaces
               S01:00001277:  3E 20
F00:0343       	call putc
               S01:00001279:  CD 86 10
F00:0344       	djnz _sp$1
               S01:0000127C:  10 F9
F00:0345       
F00:0346       	ld a,0 ;# for column header
               S01:0000127E:  3E 00
F00:0347       	ld b,16 ;# 16 column headers
               S01:00001280:  06 10
F00:0348       _col$1:
F00:0349       	call printhex
               S01:00001282:  CD 7A 10
F00:0350       	inc a
               S01:00001285:  3C
F00:0351       
F00:0352       	push af
               S01:00001286:  F5
F00:0353       	ld a,' '
               S01:00001287:  3E 20
F00:0354       	call putc
               S01:00001289:  CD 86 10
F00:0355       	pop af
               S01:0000128C:  F1
F00:0356       
F00:0357       	djnz _col$1
               S01:0000128D:  10 F3
F00:0358       
F00:0359       	ld hl,0 ;# newline
               S01:0000128F:  21 00 00
F00:0360       	call println
               S01:00001292:  CD 77 10
F00:0361       
F00:0362       	ld hl,(hidump)
               S01:00001295:  2A B0 14
F00:0363       	ld l,0 ;# alway start at page boundry
               S01:00001298:  2E 00
F00:0364       	ld b,16 ;# outer loop
               S01:0000129A:  06 10
F00:0365       _hexdp0:
F00:0366       	push bc
               S01:0000129C:  C5
F00:0367       
F00:0368       	ld b,16 ;# inner loop
               S01:0000129D:  06 10
F00:0369       		;# print the address
F00:0370       	push hl
               S01:0000129F:  E5
F00:0371       	ld hl,hexdumpprefix
               S01:000012A0:  21 D9 14
F00:0372       	call print
               S01:000012A3:  CD 74 10
F00:0373       	pop hl
               S01:000012A6:  E1
F00:0374       
F00:0375       	ld a,h
               S01:000012A7:  7C
F00:0376       	call printhex
               S01:000012A8:  CD 7A 10
F00:0377       	ld a,l
               S01:000012AB:  7D
F00:0378       	call printhex
               S01:000012AC:  CD 7A 10
F00:0379       	ld a,' '
               S01:000012AF:  3E 20
F00:0380       	call putc
               S01:000012B1:  CD 86 10
F00:0381       _hexdp$1:
F00:0382       
F00:0383       	;# print the byte values
F00:0384       	push hl
               S01:000012B4:  E5
F00:0385       	ld hl,hidump
               S01:000012B5:  21 B0 14
F00:0386       	ld a,(hl)
               S01:000012B8:  7E
F00:0387       	pop hl
               S01:000012B9:  E1
F00:0388       	cp l
               S01:000012BA:  BD
F00:0389       	jp nz,1$
               S01:000012BB:  C2 D5 12
F00:0390       
F00:0391       	push hl
               S01:000012BE:  E5
F00:0392       	ld hl,boldon ;# found the byte of interest turn on bold
               S01:000012BF:  21 DC 14
F00:0393       	call print
               S01:000012C2:  CD 74 10
F00:0394       	pop hl
               S01:000012C5:  E1
F00:0395       
F00:0396       	ld a,(hl)  ;# print the hex value
               S01:000012C6:  7E
F00:0397       	call printhex
               S01:000012C7:  CD 7A 10
F00:0398       	
F00:0399       	push hl
               S01:000012CA:  E5
F00:0400       	ld hl,boldoff ;# turn off bold
               S01:000012CB:  21 E1 14
F00:0401       	call print
               S01:000012CE:  CD 74 10
F00:0402       	pop hl
               S01:000012D1:  E1
F00:0403       
F00:0404       	jp 2$ ;# continue
               S01:000012D2:  C3 D9 12
F00:0405       
F00:0406       1$:	ld a,(hl)
               S01:000012D5:  7E
F00:0407       	call printhex
               S01:000012D6:  CD 7A 10
F00:0408       2$:	ld a,' '
               S01:000012D9:  3E 20
F00:0409       	call putc
               S01:000012DB:  CD 86 10
F00:0410       	;# next byte
F00:0411       	inc hl
               S01:000012DE:  23
F00:0412       	djnz _hexdp$1
               S01:000012DF:  10 D3
F00:0413       	;# now repeat the line and display the ascii value
F00:0414       	or a ;# reset carry flag
               S01:000012E1:  B7
F00:0415       	ld de,16
               S01:000012E2:  11 10 00
F00:0416       	sbc hl,de ;# subtrack 16bytes
               S01:000012E5:  ED 52
F00:0417       
F00:0418       	ld a,'|' ;# output border character
               S01:000012E7:  3E 7C
F00:0419       	call putc
               S01:000012E9:  CD 86 10
F00:0420       	ld b,16
               S01:000012EC:  06 10
F00:0421       _dexdpc$1:
F00:0422       	ld a,(hl)
               S01:000012EE:  7E
F00:0423       	cp 32 ;# space
               S01:000012EF:  FE 20
F00:0424       	jp p, _nex$2 ;# if character >= 32 jump
               S01:000012F1:  F2 F9 12
F00:0425       	ld a,'.'
               S01:000012F4:  3E 2E
F00:0426       	jp _prt$
               S01:000012F6:  C3 00 13
F00:0427       _nex$2:
F00:0428       	cp 127 ;# delete
               S01:000012F9:  FE 7F
F00:0429       	jp m,_prt$ ;# if character < 127 jump print
               S01:000012FB:  FA 00 13
F00:0430       	ld a,'.' ;# else print a dot
               S01:000012FE:  3E 2E
F00:0431       
F00:0432       _prt$:
F00:0433       	call putc
               S01:00001300:  CD 86 10
F00:0434       	inc hl
               S01:00001303:  23
F00:0435       	djnz _dexdpc$1
               S01:00001304:  10 E8
F00:0436       
F00:0437       	ld a,"|" ;# output border character
               S01:00001306:  3E 7C
F00:0438       	call putc
               S01:00001308:  CD 86 10
F00:0439       
F00:0440       	;# next line
F00:0441       	push hl
               S01:0000130B:  E5
F00:0442       	ld hl,0
               S01:0000130C:  21 00 00
F00:0443       	call println
               S01:0000130F:  CD 77 10
F00:0444       	pop hl
               S01:00001312:  E1
F00:0445       	pop bc
               S01:00001313:  C1
F00:0446       	djnz _hexdp0
               S01:00001314:  10 86
F00:0447       	ret
               S01:00001316:  C9
F00:0448       
F00:0449       	;# ====== LOAD builtin ==== #
F00:0450       	loadcmd: .string "l,",0
               S01:00001317:  6C 2C
               S01:00001319:  00
F00:0451       	load:
F00:0452       		ld hl,loadmsg
               S01:0000131B:  21 23 15
F00:0453       		call println
               S01:0000131E:  CD 77 10
F00:0454       		ld hl,cmdlinebuffer ;# command length must be >= 10 characters
               S01:00001321:  21 8D 18
F00:0455       		call strlen
               S01:00001324:  CD 83 10
F00:0456       		ld a,b
               S01:00001327:  78
F00:0457       		cp 10
               S01:00001328:  FE 0A
F00:0458       		jp p, _loadc$1
               S01:0000132A:  F2 36 13
F00:0459       		ld hl,loadsyntaxmsg ;# load failure message
               S01:0000132D:  21 28 15
F00:0460       		call println
               S01:00001330:  CD 77 10
F00:0461       		ld a,TRUE
               S01:00001333:  3E 01
F00:0462       		ret
               S01:00001335:  C9
F00:0463       _loadc$1:
F00:0464       		ld hl,cmdlinebuffer+4
               S01:00001336:  21 91 18
F00:0465       		ld de,_ladr
               S01:00001339:  11 84 13
F00:0466       		ld bc,4
               S01:0000133C:  01 04 00
F00:0467       		ldir
               S01:0000133F:  ED B0
F00:0468       		ld a,0
               S01:00001341:  3E 00
F00:0469       		ld (de),a ;# zero terminated
               S01:00001343:  12
F00:0470       		ld hl,_ladr ;# hex address stored in _adr
               S01:00001344:  21 84 13
F00:0471       		call touppercase
               S01:00001347:  CD 89 10
F00:0472       		call println
               S01:0000134A:  CD 77 10
F00:0473       
F00:0474       		ld ix,_ladr ;# covert text to binary address and store in hidump,lodump
               S01:0000134D:  DD 21 84 13
F00:0475       		ld h,(ix)
               S01:00001351:  DD 66 00
F00:0476       		ld l,(ix+1)
               S01:00001354:  DD 6E 01
F00:0477       		call hextobyte
               S01:00001357:  CD 8C 10
F00:0478       		ld (lodump),a
               S01:0000135A:  32 B1 14
F00:0479       		ld h,(ix+2)
               S01:0000135D:  DD 66 02
F00:0480       		ld l,(ix+3)
               S01:00001360:  DD 6E 03
F00:0481       		call hextobyte
               S01:00001363:  CD 8C 10
F00:0482       		ld (hidump),a
               S01:00001366:  32 B0 14
F00:0483       
F00:0484       		
F00:0485       		ld hl,cmdlinebuffer+9
               S01:00001369:  21 96 18
F00:0486       		ld de,(hidump)
               S01:0000136C:  ED 5B B0 14
F00:0487       		call loadfile
               S01:00001370:  CD 7D 10
F00:0488       		cp 0
               S01:00001373:  FE 00
F00:0489       		jp z, _doneload$1
               S01:00001375:  CA 81 13
F00:0490       		call printhex ;# print return code
               S01:00001378:  CD 7A 10
F00:0491       		ld hl,loaderrormsg
               S01:0000137B:  21 66 15
F00:0492       		call println
               S01:0000137E:  CD 77 10
F00:0493       
F00:0494       
F00:0495       
F00:0496       		
F00:0497       _doneload$1:
F00:0498       		ld a,TRUE
               S01:00001381:  3E 01
F00:0499       		ret
               S01:00001383:  C9
F00:0500       _ladr: .space 5 ;# store character address
F00:0501       
F00:0502       ;# === run builtin ==========
F00:0503       
F00:0504       runcmd: .string "r,",0
               S01:00001389:  72 2C
               S01:0000138B:  00
F00:0505       run:
F00:0506       	ld hl,runmsg
               S01:0000138D:  21 74 15
F00:0507       	call println
               S01:00001390:  CD 77 10
F00:0508       
F00:0509       	ld hl,cmdlinebuffer ;# command length must be 8 characters
               S01:00001393:  21 8D 18
F00:0510       	call strlen
               S01:00001396:  CD 83 10
F00:0511       	ld a,b
               S01:00001399:  78
F00:0512       	cp 8
               S01:0000139A:  FE 08
F00:0513       	jp nz, runerror
               S01:0000139C:  C2 D0 13
F00:0514       	ld hl,cmdlinebuffer
               S01:0000139F:  21 8D 18
F00:0515       	call touppercase
               S01:000013A2:  CD 89 10
F00:0516       	call println
               S01:000013A5:  CD 77 10
F00:0517       	ld ix, cmdlinebuffer
               S01:000013A8:  DD 21 8D 18
F00:0518       	ld h,(ix+4)
               S01:000013AC:  DD 66 04
F00:0519       	ld l,(ix+5)
               S01:000013AF:  DD 6E 05
F00:0520       	call hextobyte
               S01:000013B2:  CD 8C 10
F00:0521       	ld (lodump),a
               S01:000013B5:  32 B1 14
F00:0522       
F00:0523       	ld h,(ix+6)
               S01:000013B8:  DD 66 06
F00:0524       	ld l,(ix+7)
               S01:000013BB:  DD 6E 07
F00:0525       	call hextobyte
               S01:000013BE:  CD 8C 10
F00:0526       	ld (hidump),a
               S01:000013C1:  32 B0 14
F00:0527       	ld hl,0
               S01:000013C4:  21 00 00
F00:0528       	call println
               S01:000013C7:  CD 77 10
F00:0529       
F00:0530       	call runfrom
               S01:000013CA:  CD AF 14
F00:0531       	jp runexit
               S01:000013CD:  C3 D6 13
F00:0532       runerror:
F00:0533       	ld hl,runsyntaxmsg
               S01:000013D0:  21 78 15
F00:0534       	call println
               S01:000013D3:  CD 77 10
F00:0535       runexit:
F00:0536       	ld a,TRUE
               S01:000013D6:  3E 01
F00:0537       	ret
               S01:000013D8:  C9
F00:0538       
F00:0539       # === help builtin === #
F00:0540       helpcmd: .string "?"
               S01:000013D9:  3F
F00:0541       
F00:0542       help:
F00:0543       	ld hl,helpmsg
               S01:000013DB:  21 EA 16
F00:0544       	call println
               S01:000013DE:  CD 77 10
F00:0545       
F00:0546       	ld a,TRUE
               S01:000013E1:  3E 01
F00:0547       	ret
               S01:000013E3:  C9
F00:0548       
F00:0549       	# === in builtin == #
F00:0550       incmd: .string "in,"
               S01:000013E4:  69 6E 2C
F00:0551       din:
F00:0552       	ld hl,inmsg
               S01:000013E8:  21 A9 15
F00:0553       	call println
               S01:000013EB:  CD 77 10
F00:0554       
F00:0555       	ld hl,cmdlinebuffer
               S01:000013EE:  21 8D 18
F00:0556       	call strlen
               S01:000013F1:  CD 83 10
F00:0557       	ld a,b
               S01:000013F4:  78
F00:0558       	cp 7
               S01:000013F5:  FE 07
F00:0559       	jp nz, _inerror
               S01:000013F7:  C2 1C 14
F00:0560       	ld hl,cmdlinebuffer
               S01:000013FA:  21 8D 18
F00:0561       	call touppercase
               S01:000013FD:  CD 89 10
F00:0562       	call println
               S01:00001400:  CD 77 10
F00:0563       	ld ix,cmdlinebuffer
               S01:00001403:  DD 21 8D 18
F00:0564       	ld h,(ix+5)
               S01:00001407:  DD 66 05
F00:0565       	ld l,(ix+6)
               S01:0000140A:  DD 6E 06
F00:0566       	call hextobyte
               S01:0000140D:  CD 8C 10
F00:0567       	ld (lodump),a ;# address to read in lodump
               S01:00001410:  32 B1 14
F00:0568       	ld c,a
               S01:00001413:  4F
F00:0569       	in a,(c)
               S01:00001414:  ED 78
F00:0570       	call printhex
               S01:00001416:  CD 7A 10
F00:0571       	jp _inexit
               S01:00001419:  C3 22 14
F00:0572       _inerror:
F00:0573       	ld hl,insyntaxmsg
               S01:0000141C:  21 AC 15
F00:0574       	call println
               S01:0000141F:  CD 77 10
F00:0575       _inexit:
F00:0576       
F00:0577       	ld a,TRUE
               S01:00001422:  3E 01
F00:0578       	ret
               S01:00001424:  C9
F00:0579       
F00:0580       	# === out builtin == #
F00:0581       outcmd: .string "out,"
               S01:00001425:  6F 75 74 2C
F00:0582       dout:
F00:0583       	ld hl,outmsg
               S01:0000142A:  21 19 16
F00:0584       	call println
               S01:0000142D:  CD 77 10
F00:0585       
F00:0586       	ld hl,cmdlinebuffer
               S01:00001430:  21 8D 18
F00:0587       	call strlen
               S01:00001433:  CD 83 10
F00:0588       	ld a,b
               S01:00001436:  78
F00:0589       	cp 13
               S01:00001437:  FE 0D
F00:0590       	jp nz, outerror
               S01:00001439:  C2 6A 14
F00:0591       	ld hl,cmdlinebuffer
               S01:0000143C:  21 8D 18
F00:0592       	call touppercase
               S01:0000143F:  CD 89 10
F00:0593       	call println
               S01:00001442:  CD 77 10
F00:0594       	ld ix,cmdlinebuffer
               S01:00001445:  DD 21 8D 18
F00:0595       	ld h,(ix+6)
               S01:00001449:  DD 66 06
F00:0596       	ld l,(ix+7)
               S01:0000144C:  DD 6E 07
F00:0597       	call hextobyte
               S01:0000144F:  CD 8C 10
F00:0598       	ld (lodump),a ;# byte to send in lodump
               S01:00001452:  32 B1 14
F00:0599       
F00:0600       	ld h,(ix+11)
               S01:00001455:  DD 66 0B
F00:0601       	ld l,(ix+12)
               S01:00001458:  DD 6E 0C
F00:0602       	call hextobyte
               S01:0000145B:  CD 8C 10
F00:0603       	ld (hidump),a ;# address in hidump
               S01:0000145E:  32 B0 14
F00:0604       	ld c,a
               S01:00001461:  4F
F00:0605       	ld a,(lodump)
               S01:00001462:  3A B1 14
F00:0606       	out (C),A
               S01:00001465:  ED 79
F00:0607       
F00:0608       
F00:0609       	jp outexit
               S01:00001467:  C3 70 14
F00:0610       
F00:0611       outerror:
F00:0612       	ld hl,outsyntaxmsg
               S01:0000146A:  21 1D 16
F00:0613       	call println
               S01:0000146D:  CD 77 10
F00:0614       outexit:
F00:0615       	ld a,TRUE
               S01:00001470:  3E 01
F00:0616       	ret
               S01:00001472:  C9
F00:0617       
F00:0618       
F00:0619       	# === createprocess builtin === #
F00:0620       createprocesscmd: .string "createprocess,"
               S01:00001473:  63 72 65 61 74 65 70 72 6F 63 65 73 73 2C
F00:0621       createprocess:
F00:0622       	ld hl,createprocessmsg
               S01:00001482:  21 AB 16
F00:0623       	call println
               S01:00001485:  CD 77 10
F00:0624       	ld hl,cmdlinebuffer
               S01:00001488:  21 8D 18
F00:0625       	push hl ;# save program name
               S01:0000148B:  E5
F00:0626       	dec hl ;# this is stupid but it works
               S01:0000148C:  2B
F00:0627       _1$:
F00:0628       	inc hl
               S01:0000148D:  23
F00:0629       	ld a,(hl)
               S01:0000148E:  7E
F00:0630       	
F00:0631       	cp 0 ;# null terminated
               S01:0000148F:  FE 00
F00:0632       	jp z,_2$
               S01:00001491:  CA 9C 14
F00:0633       
F00:0634       	cp ' ' ;# look for 1st space
               S01:00001494:  FE 20
F00:0635       	jp nz,_1$
               S01:00001496:  C2 8D 14
F00:0636       	ld a,0
               S01:00001499:  3E 00
F00:0637       	ld (hl),a ;# zero terminate prgram name
               S01:0000149B:  77
F00:0638       _2$:
F00:0639       	inc hl
               S01:0000149C:  23
F00:0640       	push hl ;# save the command parameters
               S01:0000149D:  E5
F00:0641       	call createProcess
               S01:0000149E:  CD 98 10
F00:0642       	ret
               S01:000014A1:  C9
F00:0643       
F00:0644       #=== reload builtin ==#
F00:0645       reloadcmd: .string "exit"
               S01:000014A2:  65 78 69 74
F00:0646       reload:
F00:0647       	ld a,1
               S01:000014A7:  3E 01
F00:0648       	ld (doreload),a
               S01:000014A9:  32 F9 10
F00:0649       	ld a,TRUE
               S01:000014AC:  3E 01
F00:0650       	ret
               S01:000014AE:  C9
F00:0651       
F00:0652       ;# shared variables for builtin functions
F00:0653       runfrom: .byte 0xc3 ;# jump instruction - must be next to hidump
               S01:000014AF:  C3
F00:0654       hidump: .byte 0 ;# used but hexdump and load
               S01:000014B0:  00
F00:0655       lodump: .byte 0 ;# used by hexdump and load
               S01:000014B1:  00
F00:0656       
F00:0657       		;#======================= builtin functions end ================
F00:0658       		;# --- dev note : builtin function must return TRUE in a register
F00:0659       messages:
F00:0660       ;	dbug1: .string "debug1"
F00:0661       ;	dbug2: .string "debug2"
F00:0662       	welcomemsg: .string "Would you like to play a game?"
               S01:000014B2:  57 6F 75 6C 64 20 79 6F 75 20 6C 69 6B 65 20 74
               S01:000014C2:  6F 20 70 6C 61 79 20 61 20 67 61 6D 65 3F
F00:0663       	hexdumpmsg: .string "HEXDUMP"
               S01:000014D1:  48 45 58 44 55 4D 50
F00:0664       	hexdumpprefix: .string "0x"
               S01:000014D9:  30 78
F00:0665       	boldon: .string "\033[1m"
               S01:000014DC:  1B 5B 31 6D
F00:0666       	boldoff: .string "\033[m"
               S01:000014E1:  1B 5B 6D
F00:0667       	hexdumpsyntaxmsg: .string "  hexdump syntax: h,0xXXXX - address specified in hexidecimal"
               S01:000014E5:  20 20 68 65 78 64 75 6D 70 20 73 79 6E 74 61 78
               S01:000014F5:  3A 20 68 2C 30 78 58 58 58 58 20 2D 20 61 64 64
F00:0668       	loadmsg: .string "LOAD"
               S01:00001523:  4C 4F 41 44
F00:0669       	loadsyntaxmsg: .string "  load syntax: l,0xXXXX,filename - load file @ 0xXXXX address"
               S01:00001528:  20 20 6C 6F 61 64 20 73 79 6E 74 61 78 3A 20 6C
               S01:00001538:  2C 30 78 58 58 58 58 2C 66 69 6C 65 6E 61 6D 65
F00:0670       	loaderrormsg: .string "  load error."
               S01:00001566:  20 20 6C 6F 61 64 20 65 72 72 6F 72 2E
F00:0671       	runmsg: .string "RUN"
               S01:00001574:  52 55 4E
F00:0672       	runsyntaxmsg: .string "  run syntax: r,0xXXXX - run from 0xXXXX address"
               S01:00001578:  20 20 72 75 6E 20 73 79 6E 74 61 78 3A 20 72 2C
               S01:00001588:  30 78 58 58 58 58 20 2D 20 72 75 6E 20 66 72 6F
F00:0673       	inmsg: .string "IN"
               S01:000015A9:  49 4E
F00:0674       	insyntaxmsg: .string "  peripheral in syntax: in,0xYY - execute IN A,(0xYY) - register A is displayed in hex on return"
               S01:000015AC:  20 20 70 65 72 69 70 68 65 72 61 6C 20 69 6E 20
               S01:000015BC:  73 79 6E 74 61 78 3A 20 69 6E 2C 30 78 59 59 20
F00:0675       	inerrormsg: .string "  in error."
               S01:0000160D:  20 20 69 6E 20 65 72 72 6F 72 2E
F00:0676       	outmsg: .string "OUT"
               S01:00001619:  4F 55 54
F00:0677       	outsyntaxmsg: .string "  peripheral out syntax: out,0xXX,0xYY - executes\r\nLD A,0xXX\r\nOUT (0xYY), A\r\nwhere 0xYY is
               S01:0000161D:  20 20 70 65 72 69 70 68 65 72 61 6C 20 6F 75 74
               S01:0000162D:  20 73 79 6E 74 61 78 3A 20 6F 75 74 2C 30 78 58
F00:0678       	outerrormsg: .string " out error."
               S01:0000169F:  20 6F 75 74 20 65 72 72 6F 72 2E
F00:0679       	createprocessmsg: .string "hell no"
               S01:000016AB:  68 65 6C 6C 20 6E 6F
F00:0680       	reloadmsg: .string "reloading."
               S01:000016B3:  72 65 6C 6F 61 64 69 6E 67 2E
F00:0681       
F00:0682       
F00:0683       
F00:0684       	commandPromptmsg: .string "\r\n>";
               S01:000016BE:  0D 0A 3E
F00:0685       	invalidcommandmsg: .string ": Invalid command.Shall we play a game?"
               S01:000016C2:  3A 20 49 6E 76 61 6C 69 64 20 63 6F 6D 6D 61 6E
               S01:000016D2:  64 2E 53 68 61 6C 6C 20 77 65 20 70 6C 61 79 20
F00:0686       	helpmsg: .byte "Joshua MCP builtin commands:\r\n"
               S01:000016EA:  4A 6F 73 68 75 61 20 4D 43 50 20 62 75 69 6C 74
               S01:000016FA:  69 6E 20 63 6F 6D 6D 61 6E 64 73 3A 0D 0A
F00:0687       			 .byte "? - help, you are reading help right now\r\n"
               S01:00001708:  3F 20 2D 20 68 65 6C 70 2C 20 79 6F 75 20 61 72
               S01:00001718:  65 20 72 65 61 64 69 6E 67 20 68 65 6C 70 20 72
F00:0688       			 .byte "h,0xXXXX - hexdump from address 0xXXXX for 255 bytes\r\n"
               S01:00001732:  68 2C 30 78 58 58 58 58 20 2D 20 68 65 78 64 75
               S01:00001742:  6D 70 20 66 72 6F 6D 20 61 64 64 72 65 73 73 20
F00:0689       			 .byte "l,0xXXXX,filename - load into memory at 0xXXXX the file filename\r\n"
               S01:00001768:  6C 2C 30 78 58 58 58 58 2C 66 69 6C 65 6E 61 6D
               S01:00001778:  65 20 2D 20 6C 6F 61 64 20 69 6E 74 6F 20 6D 65
F00:0690       			 .byte "r,0xXXXX - run from address 0xXXXX\r\n"
               S01:000017AA:  72 2C 30 78 58 58 58 58 20 2D 20 72 75 6E 20 66
               S01:000017BA:  72 6F 6D 20 61 64 64 72 65 73 73 20 30 78 58 58
F00:0691       			 .byte "in,0xYY - receive from peripheral at address 0xYY\r\n"
               S01:000017CE:  69 6E 2C 30 78 59 59 20 2D 20 72 65 63 65 69 76
               S01:000017DE:  65 20 66 72 6F 6D 20 70 65 72 69 70 68 65 72 61
F00:0692       			 .byte "out,0xXX,0xYY - send to peripheral at address 0xYY then value 0xXX\r\n"
               S01:00001801:  6F 75 74 2C 30 78 58 58 2C 30 78 59 59 20 2D 20
               S01:00001811:  73 65 6E 64 20 74 6F 20 70 65 72 69 70 68 65 72
F00:0693       			 .byte "exit - exit and reload the MCP\r\n"
               S01:00001845:  65 78 69 74 20 2D 20 65 78 69 74 20 61 6E 64 20
               S01:00001855:  72 65 6C 6F 61 64 20 74 68 65 20 4D 43 50 0D 0A
F00:0694       			 .string 0
               S01:00001865:  00
F00:0695       builtin:
F00:0696       	;# 2bytes pointer to command - zero terminated, 2bytes pointer to handler Routines
F00:0697       	;# last item will have 0x000 to indicate end of list
F00:0698       	;#hexdump
F00:0699       		.2byte hexdumpcmd,hexdump
               S01:00001867:  25 12
               S01:00001869:  29 12
F00:0700       		.2byte loadcmd,load
               S01:0000186B:  17 13
               S01:0000186D:  1B 13
F00:0701       		.2byte runcmd,run
               S01:0000186F:  89 13
               S01:00001871:  8D 13
F00:0702       		.2byte helpcmd,help
               S01:00001873:  D9 13
               S01:00001875:  DB 13
F00:0703       		.2byte outcmd,dout
               S01:00001877:  25 14
               S01:00001879:  2A 14
F00:0704       		.2byte incmd,din
               S01:0000187B:  E4 13
               S01:0000187D:  E8 13
F00:0705       		.2byte createprocesscmd,createprocess
               S01:0000187F:  73 14
               S01:00001881:  82 14
F00:0706       		.2byte reloadcmd,reload
               S01:00001883:  A2 14
               S01:00001885:  A7 14
F00:0707       
F00:0708       	endoflist: .2byte 0,0
               S01:00001887:  00 00
               S01:00001889:  00 00
F00:0709       
F00:0710       data:
F00:0711       	cmdlineexecute: .byte 0
               S01:0000188B:  00
F00:0712       	cmdlinebufferlen: .byte 0
               S01:0000188C:  00
F00:0713       	cmdlinebuffer: .space 50
F00:0714       	cmdlinebuffer$:
F00:0715       
F00:0716       
F00:0717       
F00:0718       	
F00:0719       
F00:0720       
F00:0721       	;#.org 0x700
F00:0722       	.align 8
F00:0723       	jumptable: ;# for keyboard interrupts
F00:0724       	.2byte cmdline ;0
               S01:00001900:  54 11
F00:0725       	.2byte cmdline ;0
               S01:00001902:  54 11


Sections:
S01  seg1000


Sources:
F00  cmd.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc


Symbols:
data EXPR(6283=0x188b) UNUSED ABS 
endoflist EXPR(6279=0x1887) UNUSED ABS 
outerrormsg EXPR(5791=0x169f) UNUSED ABS 
inerrormsg EXPR(5645=0x160d) UNUSED ABS 
messages EXPR(5298=0x14b2) UNUSED ABS 
reload EXPR(5287=0x14a7) ABS 
reloadcmd EXPR(5282=0x14a2) ABS 
 createprocess _2$ EXPR(5276=0x149c) ABS 
 createprocess _1$ EXPR(5261=0x148d) ABS 
createprocessmsg EXPR(5803=0x16ab) ABS 
createprocesscmd EXPR(5235=0x1473) ABS 
outsyntaxmsg EXPR(5661=0x161d) ABS 
outexit EXPR(5232=0x1470) ABS 
outerror EXPR(5226=0x146a) ABS 
outmsg EXPR(5657=0x1619) ABS 
dout EXPR(5162=0x142a) ABS 
outcmd EXPR(5157=0x1425) ABS 
insyntaxmsg EXPR(5548=0x15ac) ABS 
_inexit EXPR(5154=0x1422) ABS 
_inerror EXPR(5148=0x141c) ABS 
inmsg EXPR(5545=0x15a9) ABS 
din EXPR(5096=0x13e8) ABS 
incmd EXPR(5092=0x13e4) ABS 
helpmsg EXPR(5866=0x16ea) ABS 
help EXPR(5083=0x13db) ABS 
helpcmd EXPR(5081=0x13d9) ABS 
runsyntaxmsg EXPR(5496=0x1578) ABS 
runexit EXPR(5078=0x13d6) ABS 
runfrom EXPR(5295=0x14af) ABS 
runerror EXPR(5072=0x13d0) ABS 
runmsg EXPR(5492=0x1574) ABS 
run EXPR(5005=0x138d) ABS 
runcmd EXPR(5001=0x1389) ABS 
loaderrormsg EXPR(5478=0x1566) ABS 
_doneload$1 EXPR(4993=0x1381) ABS 
_ladr EXPR(4996=0x1384) ABS 
loadsyntaxmsg EXPR(5416=0x1528) ABS 
_loadc$1 EXPR(4918=0x1336) ABS 
loadmsg EXPR(5411=0x1523) ABS 
load EXPR(4891=0x131b) ABS 
loadcmd EXPR(4887=0x1317) ABS 
_prt$ EXPR(4864=0x1300) ABS 
_nex$2 EXPR(4857=0x12f9) ABS 
_dexdpc$1 EXPR(4846=0x12ee) ABS 
 _hexdp$1 2$ EXPR(4825=0x12d9) ABS 
boldoff EXPR(5345=0x14e1) ABS 
boldon EXPR(5340=0x14dc) ABS 
 _hexdp$1 1$ EXPR(4821=0x12d5) ABS 
_hexdp$1 EXPR(4788=0x12b4) ABS 
hexdumpprefix EXPR(5337=0x14d9) ABS 
_hexdp0 EXPR(4764=0x129c) ABS 
_col$1 EXPR(4738=0x1282) ABS 
_sp$1 EXPR(4727=0x1277) ABS 
hexdumpsyntaxmsg EXPR(5349=0x14e5) ABS 
hexdumpexit EXPR(4722=0x1272) ABS 
hexdumpprint EXPR(4725=0x1275) ABS 
hidump EXPR(5296=0x14b0) ABS 
lodump EXPR(5297=0x14b1) ABS 
hexdumperror EXPR(4716=0x126c) ABS 
hexdumpmsg EXPR(5329=0x14d1) ABS 
hexdump EXPR(4649=0x1229) ABS 
hexdumpcmd EXPR(4645=0x1225) ABS 
_findbuildtinFail EXPR(4617=0x1209) ABS 
_findbuiltinSuccess EXPR(4621=0x120d) ABS 
findbuiltin1 EXPR(4565=0x11d5) ABS 
findbuiltinrestart EXPR(4559=0x11cf) ABS 
builtin EXPR(6247=0x1867) ABS 
 cmdline 3$ EXPR(4524=0x11ac) ABS 
 cmdline 2$ EXPR(4529=0x11b1) ABS 
 cmdline 4$ EXPR(4531=0x11b3) ABS 
 cmdline 1$ EXPR(4498=0x1192) ABS 
executecmd EXPR(4540=0x11bc) ABS 
executeexit EXPR(4546=0x11c2) ABS 
 cmdline 12$ EXPR(4451=0x1163) ABS 
cmdline EXPR(4436=0x1154) ABS 
cmdlinebuffer$ EXPR(6335=0x18bf) ABS 
cmdlinebufferlen EXPR(6284=0x188c) ABS 
_hexdp$99 EXPR(4404=0x1134) ABS 
hexdumpcmdline EXPR(4399=0x112f) ABS 
invalidcommandmsg EXPR(5826=0x16c2) ABS 
loaderr EXPR(4375=0x1117) ABS 
createprocess EXPR(5250=0x1482) ABS 
ignorekeyboard EXPR(4374=0x1116) ABS 
loadandrun EXPR(4346=0x10fa) ABS 
findbuiltin EXPR(4549=0x11c5) ABS 
cmdlinebuffer EXPR(6285=0x188d) ABS 
cmdlineexecute EXPR(6283=0x188b) ABS 
loop EXPR(4297=0x10c9) ABS 
commandPromptmsg EXPR(5822=0x16be) ABS 
resetcommandline EXPR(4417=0x1141) ABS 
jumptable EXPR(6400=0x1900) ABS 
reloadmsg EXPR(5811=0x16b3) ABS 
 newcommand 1$ EXPR(4280=0x10b8) ABS 
newcommand EXPR(4265=0x10a9) ABS 
doreload EXPR(4345=0x10f9) ABS 
welcomemsg EXPR(5298=0x14b2) ABS 
getcommandparams EXPR(4251=0x109b) UNUSED ABS 
createProcess EXPR(4248=0x1098) ABS 
getfilename EXPR(4245=0x1095) UNUSED ABS 
directorynextfile EXPR(4242=0x1092) UNUSED ABS 
directoryopen EXPR(4239=0x108f) UNUSED ABS 
hextobyte EXPR(4236=0x108c) ABS 
touppercase EXPR(4233=0x1089) ABS 
putc EXPR(4230=0x1086) ABS 
strlen EXPR(4227=0x1083) ABS 
memset EXPR(4224=0x1080) ABS 
loadfile EXPR(4221=0x107d) ABS 
printhex EXPR(4218=0x107a) ABS 
println EXPR(4215=0x1077) ABS 
print EXPR(4212=0x1074) ABS 
functionlookups EXPR(4211=0x1073) UNUSED ABS 
_main EXPR(4254=0x109e) ABS 
getcommandparamsadr EXPR(4252=0x109c) ABS 
createProcessadr EXPR(4249=0x1099) ABS 
getfilenameadr EXPR(4246=0x1096) ABS 
directorynextfileadr EXPR(4243=0x1093) ABS 
directoryopenadr EXPR(4240=0x1090) ABS 
printlnadr EXPR(4216=0x1078) ABS 
hextobyteadr EXPR(4237=0x108d) ABS 
touppercaseadr EXPR(4234=0x108a) ABS 
putcadr EXPR(4231=0x1087) ABS 
strlenadr EXPR(4228=0x1084) ABS 
memsetadr EXPR(4225=0x1081) ABS 
loadfileadr EXPR(4222=0x107e) ABS 
printhexadr EXPR(4219=0x107b) ABS 
printadr EXPR(4213=0x1075) ABS 
__CMD__ EXPR(0=0x0) UNUSED 
NEXTNUMBER EXPR(18=0x12) UNUSED 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) 
TRUE EXPR(1=0x1) 
userMemory EXPR(8192=0x2000) UNUSED 
commandMemory EXPR(4096=0x1000) 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT EXPR(1=0x1) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
