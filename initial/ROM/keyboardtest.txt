F00:0001       .ifndef BOOT
F00:0002       	.include "Routines.inc"
F01:0001       
F01:0002       # address where user programs load
F01:0003       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       .equ SERIALPORT2, 0x02
F02:0003       
F01:0004       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0005       .equ commandMemory, 0x1000
F01:0006       .equ userMemory,0x2000
F01:0007       .equ libMemory,0xF000
F01:0008       
F01:0009       .equ TRUE, 1
F01:0010       .equ FALSE, 0
F01:0011       
F01:0012       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0013       # ld a, PRINT
F01:0014       # call GetAddress
F01:0015       # address for print loaded into hl
F01:0016       # the value in hl can change between os versions so do not hard code the values
F01:0017       
F01:0018       .equ GetAddress, 0x0804
F01:0019       .equ PRINT,		1
F01:0020       .equ PRINTLN,	9
F01:0021       .equ PRINTHEX,	2
F01:0022       .equ LOADFILE,	3
F01:0023       .equ MEMSET,	4
F01:0024       .equ STRLEN,	5
F01:0025       .equ PUTC,		6
F01:0026       .equ TOUPPERCASE,7
F01:0027       .equ HEXTOBYTE,	8
F01:0028       .equ STRNCPY,10
F01:0029       .equ CREATEPROCESS,16
F01:0030       .equ GETCOMMANDPARAMS,17
F01:0031       # filesystem - primitive functions, probably going to change 
F01:0032       .equ DIRECTORYOPEN,13
F01:0033       .equ DIRECTORYNEXTFILE,14
F01:0034       .equ GETFILENAME,15
F01:0035       .equ GETMALLOCTABLE,18
F01:0036       
F01:0037       
F01:0038       
F01:0039       .equ NEXTNUMBER,19
F01:0040       
F01:0041       
F00:0003       	.include "libs.inc"
F04:0001       
F04:0002       
F04:0003       	.ifdef __LIB__
F04:0004       		.ifdef __ORG__
F04:0005       			.org __ORG__
F04:0006       		.else 
F04:0007       			.org dllMemory
F04:0008       		.endif
F04:0009       		.2byte $ ;# load address
F04:0010       		.byte ((ENDADDRESS-$)/255) ;# memory required to load (in pages)
F04:0011       		.ifdef __STACK__
F04:0012       			.byte __STACK__
F04:0013       		.else 
F04:0014       			.byte 1 ;# stack size (in pages)
F04:0015       		.endif
F04:0016       		jp libaddress
F04:0017       initialize:
F04:0018       	.else
F04:0019       		.ifdef __ORG__
F04:0020       			.org __ORG__
F04:0021       		.else
F04:0022       			.org userMemory
F04:0023       		.endif
F04:0024       		.2byte $ ;# load address
               S01:00002000:  00 20
F04:0025       		.byte ((ENDADDRESS-$)/255) ;# memory required to load (in pages)
               S01:00002002:  04
F04:0026       		.ifdef __STACK__
F04:0027       			.byte __STACK__
F04:0028       		.else 
F04:0029       			.byte 1 ;# stack size (in pages)
               S01:00002003:  01
F04:0030       		.endif
F04:0031       	.endif
F04:0032       
F04:0033       	ld a,PRINT
               S01:00002004:  3E 01
F04:0034       	call GetAddress
               S01:00002006:  CD 04 08
F04:0035       	ld (printadr),hl
               S01:00002009:  22 81 20
F04:0036       	ld a,PRINTHEX
               S01:0000200C:  3E 02
F04:0037       	call GetAddress
               S01:0000200E:  CD 04 08
F04:0038       	ld (printhexadr),hl
               S01:00002011:  22 87 20
F04:0039       	ld a,LOADFILE
               S01:00002014:  3E 03
F04:0040       	call GetAddress
               S01:00002016:  CD 04 08
F04:0041       	ld (loadfileadr),hl
               S01:00002019:  22 8A 20
F04:0042       	ld a,MEMSET
               S01:0000201C:  3E 04
F04:0043       	call GetAddress
               S01:0000201E:  CD 04 08
F04:0044       	ld (memsetadr),hl
               S01:00002021:  22 8D 20
F04:0045       	ld a,STRLEN
               S01:00002024:  3E 05
F04:0046       	call GetAddress
               S01:00002026:  CD 04 08
F04:0047       	ld (strlenadr),hl
               S01:00002029:  22 90 20
F04:0048       	ld a,PUTC
               S01:0000202C:  3E 06
F04:0049       	call GetAddress
               S01:0000202E:  CD 04 08
F04:0050       	ld (putcadr),hl
               S01:00002031:  22 93 20
F04:0051       	ld a,TOUPPERCASE
               S01:00002034:  3E 07
F04:0052       	call GetAddress
               S01:00002036:  CD 04 08
F04:0053       	ld (touppercaseadr),hl
               S01:00002039:  22 96 20
F04:0054       	ld a,HEXTOBYTE
               S01:0000203C:  3E 08
F04:0055       	call GetAddress
               S01:0000203E:  CD 04 08
F04:0056       	ld (hextobyteadr),hl
               S01:00002041:  22 99 20
F04:0057       	ld a,PRINTLN
               S01:00002044:  3E 09
F04:0058       	call GetAddress
               S01:00002046:  CD 04 08
F04:0059       	ld (printlnadr),hl
               S01:00002049:  22 84 20
F04:0060       	ld a,DIRECTORYOPEN
               S01:0000204C:  3E 0D
F04:0061       	call GetAddress
               S01:0000204E:  CD 04 08
F04:0062       	ld (directoryopenadr),hl
               S01:00002051:  22 9C 20
F04:0063       	ld a,NEXTFILE
               S01:00002054:  3E 32
F04:0064       	call GetAddress
               S01:00002056:  CD 04 08
F04:0065       	ld (directorynextfileadr),hl
               S01:00002059:  22 9F 20
F04:0066       	ld a,GETFILENAME
               S01:0000205C:  3E 0F
F04:0067       	call GetAddress
               S01:0000205E:  CD 04 08
F04:0068       	ld (getfilenameadr),hl
               S01:00002061:  22 A2 20
F04:0069       	ld a,CREATEPROCESS
               S01:00002064:  3E 10
F04:0070       	call GetAddress
               S01:00002066:  CD 04 08
F04:0071       	ld (createProcessadr),hl
               S01:00002069:  22 A5 20
F04:0072       	ld a,GETCOMMANDPARAMS
               S01:0000206C:  3E 11
F04:0073       	call GetAddress
               S01:0000206E:  CD 04 08
F04:0074       	ld (getcommandparamsadr),hl
               S01:00002071:  22 A8 20
F04:0075       	ld a,GETMALLOCTABLE
               S01:00002074:  3E 12
F04:0076       	call GetAddress
               S01:00002076:  CD 04 08
F04:0077       	ld (getmalloctableadr),hl
               S01:00002079:  22 AB 20
F04:0078       
F04:0079       
F04:0080       	jp _main
               S01:0000207C:  C3 AD 20
F04:0081       
F04:0082       	functionlookups:
F04:0083       	.align 2
F04:0084       	print: .byte 0xc3
               S01:00002080:  C3
F04:0085       	printadr: .2byte 0
               S01:00002081:  00 00
F04:0086       	println: .byte 0xc3
               S01:00002083:  C3
F04:0087       	printlnadr: .2byte 0
               S01:00002084:  00 00
F04:0088       	printhex: .byte 0xc3
               S01:00002086:  C3
F04:0089       	printhexadr: .2byte 0
               S01:00002087:  00 00
F04:0090       	loadfile: .byte 0xc3
               S01:00002089:  C3
F04:0091       	loadfileadr: .2byte 0
               S01:0000208A:  00 00
F04:0092       	memset: .byte 0xc3
               S01:0000208C:  C3
F04:0093       	memsetadr: .2byte 0
               S01:0000208D:  00 00
F04:0094       	strlen: .byte 0xc3
               S01:0000208F:  C3
F04:0095       	strlenadr: .2byte 0
               S01:00002090:  00 00
F04:0096       	putc: .byte 0xc3
               S01:00002092:  C3
F04:0097       	putcadr: .2byte 0
               S01:00002093:  00 00
F04:0098       	touppercase: .byte 0xc3
               S01:00002095:  C3
F04:0099       	touppercaseadr: .2byte 0
               S01:00002096:  00 00
F04:0100       	hextobyte: .byte 0xc3
               S01:00002098:  C3
F04:0101       	hextobyteadr: .2byte 0
               S01:00002099:  00 00
F04:0102       	directoryopen: .byte 0xc3
               S01:0000209B:  C3
F04:0103       	directoryopenadr: .2byte 0
               S01:0000209C:  00 00
F04:0104       	directorynextfile: .byte 0xc3
               S01:0000209E:  C3
F04:0105       	directorynextfileadr: .2byte 0
               S01:0000209F:  00 00
F04:0106       	getfilename: .byte 0xc3
               S01:000020A1:  C3
F04:0107       	getfilenameadr: .2byte 0
               S01:000020A2:  00 00
F04:0108       	createProcess: .byte 0xc3
               S01:000020A4:  C3
F04:0109       	createProcessadr: .2byte 0
               S01:000020A5:  00 00
F04:0110       	getcommandparams: .byte 0xc3
               S01:000020A7:  C3
F04:0111       	getcommandparamsadr: .2byte 0
               S01:000020A8:  00 00
F04:0112       	getmalloctable: .byte 0xc3
               S01:000020AA:  C3
F04:0113       	getmalloctableadr: .2byte 0
               S01:000020AB:  00 00
F04:0114       
F04:0115       _main:
F04:0116       .ifdef __DLL__
F04:0117       	ret
F04:0118       .endif
F00:0004       .endif
F00:0005       	.include "ansicodes.inc"
F05:0001       
F05:0002       
F00:0006       	.include "SDCARD.inc"
F06:0001       .equ SDCARD,0x05
F06:0002       ; ******* SDCARD *********
F06:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F06:0004       .equ FILENAMECLEAR ,1
F06:0005       
F06:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F06:0007       .equ OPEN ,2
F06:0008       
F06:0009       ; z80 out - close: no return value
F06:0010       .equ CLOSE ,3
F06:0011       
F06:0012       ; z80 out + out - filenameappend: no return value
F06:0013       .equ FILENAMEAPPEND ,4
F06:0014       
F06:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F06:0016       .equ READNEXTBYTE ,5
F06:0017       
F06:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F06:0019       .equ AVAILABLE ,6
F06:0020       
F06:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F06:0022       .equ OPENWRITE,7
F06:0023       
F06:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F06:0025       .equ WRITEBYTE,8
F06:0026       
F06:0027       ;#===============================
F06:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F06:0029       .equ GETNAME,0x20
F06:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F06:0031       .equ NAMEAVAILABLE,0x21
F06:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F06:0033       .equ OPENDIRECTORY,0x31
F06:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F06:0035       .equ NEXTFILE,0x32
F00:0007       	.include "screen.inc"
F07:0001       
F07:0002       
F07:0003       .equ DIVIDE8,1
F07:0004       .equ TEST,2
F07:0005       .equ ANSICODE,3
F07:0006       
F07:0007       
F07:0008       
F07:0009       
F07:0010       
F07:0011       
F07:0012       
F07:0013       #ansicode - see keyboardtest.s
F07:0014       	# A - code to call
F07:0015       
F07:0016       
F07:0017       .equ CLEARSCREEN,		1
F07:0018       .equ CLEARENDOFSCREEN,	2
F07:0019       .equ CLEARBEGINOFSCREEN,3
F07:0020       .equ CLEARWHOLESCREEN,	4
F07:0021       .equ CLEARCURRENTLINE,	5
F07:0022       .equ CLEARTOENDOFLINE,	6
F07:0023       .equ CLEARFROMSTARTOFLINE,7
F07:0024       .equ CLEARLINE,			8
F07:0025       .equ COLORRESET,		9
F07:0026       .equ COLORBOLD,			10
F07:0027       .equ COLORDIM,			11
F07:0028       .equ COLORFGBLACK,		12
F07:0029       .equ COLORFGRED,		13
F07:0030       .equ COLORFGGREEN,		14
F07:0031       .equ COLORFGYELLOW,		15
F07:0032       .equ COLORFGBLUE,		16
F07:0033       .equ COLORFGMAGENTA,	17
F07:0034       .equ COLORFGCYAN,		18
F07:0035       .equ COLORFGWHITE,		19
F07:0036       .equ COLORBGBLACK,		20
F07:0037       .equ COLORBGRED,		21
F07:0038       .equ COLORBGGREEN,		22
F07:0039       .equ COLORBGYELLOW,		23
F07:0040       .equ COLORBGBLUE,		24
F07:0041       .equ COLORBGMAGENTA,	25
F07:0042       .equ COLORBGCYAN,		26
F07:0043       .equ COLORBGWHITE,		27
F07:0044       
F07:0045       
F00:0008       
F00:0009       .ifdef BOOT
F00:0010       	.equ SERIALPORT , 0x01
F00:0011       	.equ SERIALPORT2, 0x02
F00:0012       
F00:0013       	.org 0x800
F00:0014       	ld sp,0xffff
F00:0015       .endif
F00:0016       
F00:0017       	.equ  BUFFERSIZE, 128
F00:0018       
F00:0019       
F00:0020       
F00:0021       
F00:0022       	di
               S01:000020AD:  F3
F00:0023       	ld hl,readymsg
               S01:000020AE:  21 19 22
F00:0024       	call print
               S01:000020B1:  CD 80 20
F00:0025       
F00:0026       		im 2 ;/* interrupt mode 2*/
               S01:000020B4:  ED 5E
F00:0027       		ld a, jumptable/256 ;// hibyte
               S01:000020B6:  3E 23
F00:0028       		ld i,a
               S01:000020B8:  ED 47
F00:0029       		ei   ;#/* enable interrupts*/
               S01:000020BA:  FB
F00:0030       
F00:0031       		ld hl,loadedmsg
               S01:000020BB:  21 09 22
F00:0032       		call print
               S01:000020BE:  CD 80 20
F00:0033       .ifndef BOOT
F00:0034       		ld hl,notboot
               S01:000020C1:  21 2F 22
F00:0035       	call print
               S01:000020C4:  CD 80 20
F00:0036       .endif
F00:0037       
F00:0038       call displaytitle
               S01:000020C7:  CD 2C 21
F00:0039       call move1_0
               S01:000020CA:  CD 33 21
F00:0040       
F00:0041       
F00:0042       loop:
F00:0043       	ld a,(exit)
               S01:000020CD:  3A 05 22
F00:0044       	cp 0
               S01:000020D0:  FE 00
F00:0045       	jp nz,_exit$
               S01:000020D2:  C2 E6 20
F00:0046       
F00:0047       	call haskeys
               S01:000020D5:  CD C7 21
F00:0048       	cp 0
               S01:000020D8:  FE 00
F00:0049       	jp z,loop
               S01:000020DA:  CA CD 20
F00:0050       #	ld a,'*'
F00:0051       #	ld a,(getkeypos)
F00:0052       #	call printhex
F00:0053       	call getchar
               S01:000020DD:  CD EC 20
F00:0054       	#out (SERIALPORT),a
F00:0055       	#ld a,'!'
F00:0056       	call putc
               S01:000020E0:  CD 92 20
F00:0057       
F00:0058       	jp loop
               S01:000020E3:  C3 CD 20
F00:0059       	
F00:0060       _exit$:	;#exit
F00:0061       	ld a,0
               S01:000020E6:  3E 00
F00:0062       	call printhex
               S01:000020E8:  CD 86 20
F00:0063       	ret
               S01:000020EB:  C9
F00:0064       
F00:0065       
F00:0066       getchar: 
F00:0067       	di
               S01:000020EC:  F3
F00:0068       	;# read a byte from the keyboard buffer
F00:0069       	ld ix,buffer ;# the keyboard buffer
               S01:000020ED:  DD 21 3F 22
F00:0070       	ld a,(getkeypos) ;# read from index position
               S01:000020F1:  3A C1 22
F00:0071       	ld b,0
               S01:000020F4:  06 00
F00:0072       	ld c,a
               S01:000020F6:  4F
F00:0073       	add ix,bc ;# ix now contains the memory location to read
               S01:000020F7:  DD 09
F00:0074       	ld a,(ix)
               S01:000020F9:  DD 7E 00
F00:0075       	push af ;# byte now stored in the stack
               S01:000020FC:  F5
F00:0076       	ld a,c ;# restore index position
               S01:000020FD:  79
F00:0077       	inc a
               S01:000020FE:  3C
F00:0078       	cp BUFFERSIZE+1
               S01:000020FF:  FE 81
F00:0079       	jp nz,_1$ 
               S01:00002101:  C2 06 21
F00:0080       	# input position has overflowed
F00:0081       	ld a,0 ;# reset indexpos
               S01:00002104:  3E 00
F00:0082       
F00:0083       _1$:
F00:0084       	ld (getkeypos),a ;# save the new indexposition
               S01:00002106:  32 C1 22
F00:0085       	pop af
               S01:00002109:  F1
F00:0086       	call decbuffer
               S01:0000210A:  CD BD 21
F00:0087       	ei
               S01:0000210D:  FB
F00:0088       	ret
               S01:0000210E:  C9
F00:0089       
F00:0090       
F00:0091       _resetscreenmsg: .string 0x1b,"[0m",0x1b,"[1;1H]",0x1b,"[2J",0x1b,"[1;30HEDITOR"
               S01:0000210F:  1B
               S01:00002110:  5B 30 6D
               S01:00002113:  1B
               S01:00002114:  5B 31 3B 31 48 5D
               S01:0000211A:  1B
               S01:0000211B:  5B 32 4A
               S01:0000211E:  1B
               S01:0000211F:  5B 31 3B 33 30 48 45 44 49 54 4F 52
F00:0092       displaytitle:
F00:0093       	ld hl,_resetscreenmsg
               S01:0000212C:  21 0F 21
F00:0094       	call print
               S01:0000212F:  CD 80 20
F00:0095       	ret
               S01:00002132:  C9
F00:0096       
F00:0097       move1_0: ld hl,_move1_0
               S01:00002133:  21 3A 21
F00:0098       	call print
               S01:00002136:  CD 80 20
F00:0099       	ret
               S01:00002139:  C9
F00:0100       _move1_0: .string 0x1b,"[2;1H"
               S01:0000213A:  1B
               S01:0000213B:  5B 32 3B 31 48
F00:0101       
F00:0102       asciibuffer: .space 10 ;# working buffer to build characters positions. really bad idea but I can't get my head around i
F00:0103       
F00:0104       #=========== useful routines =====
F00:0105       
F00:0106       ;# append byte - ascii characters
F00:0107       ;# a - character to append
F00:0108       ;# hl = base address
F00:0109       ;# looks for null byte, then stores the a register character and appends a null
F00:0110       
F00:0111       appendchar:
F00:0112       	push hl
               S01:0000214B:  E5
F00:0113       	push af
               S01:0000214C:  F5
F00:0114       2$:	ld a,(hl)
               S01:0000214D:  7E
F00:0115       	cp 0
               S01:0000214E:  FE 00
F00:0116       	jp nz,1$ ;# if not null inc hl and repeat
               S01:00002150:  C2 5B 21
F00:0117       	pop af ;# save the character now
               S01:00002153:  F1
F00:0118       	ld (hl),a
               S01:00002154:  77
F00:0119       	inc hl
               S01:00002155:  23
F00:0120       	ld a,0 ;# append the null byte
               S01:00002156:  3E 00
F00:0121       	ld (hl),a
               S01:00002158:  77
F00:0122       	pop hl
               S01:00002159:  E1
F00:0123       	ret
               S01:0000215A:  C9
F00:0124       1$: inc hl ;# incremen address and repeat
               S01:0000215B:  23
F00:0125       	jp 2$
               S01:0000215C:  C3 4D 21
F00:0126       	
F00:0127       
F00:0128       
F00:0129       
F00:0130       	.ifdef BOOT
F00:0131       	# === PRINT === #
F00:0132       	print: ;// expecting a zero terminated string
F00:0133       		push hl
F00:0134       		push af
F00:0135       		;# hl can be null so check for that first
F00:0136       		ld a,h
F00:0137       		cp 0
F00:0138       		jp nz,_$1 ;# hibyte not null, no just print it
F00:0139       		ld a,l
F00:0140       		cp 0
F00:0141       		jp z,_$2 ;# lobyte is null and hibyte is null so just exit
F00:0142       		_$1:
F00:0143       			ld a,(hl)
F00:0144       			cp 0
F00:0145       			jr z,_$2
F00:0146       			out (SERIALPORT),a
F00:0147       			inc hl
F00:0148       			jp _$1
F00:0149       _$2:			
F00:0150       		pop af
F00:0151       		pop hl
F00:0152       		ret
F00:0153       
F00:0154       printhex: ret ;# not in boot code
F00:0155       putc: ret
F00:0156       
F00:0157       .endif
F00:0158       
F00:0159       
F00:0160       # ======================== end subroutines ========== #
F00:0161       	
F00:0162       	nullroutine: 
F00:0163       		ld a,0
               S01:0000215F:  3E 00
F00:0164       		out (SERIALPORT),a
               S01:00002161:  D3 01
F00:0165       		jp serialport
               S01:00002163:  C3 68 21
F00:0166       		reti
               S01:00002166:  ED 4D
F00:0167       
F00:0168       	serialport: ;#/* interrupt 2, echo what was sent*/
F00:0169       	#	di
F00:0170       		#ld a,'*'
F00:0171       		#out (SERIALPORT),a
F00:0172       		push af
               S01:00002168:  F5
F00:0173       
F00:0174       
F00:0175       		in a,(SERIALPORT)
               S01:00002169:  DB 01
F00:0176       		cp 0
               S01:0000216B:  FE 00
F00:0177       		jp nz,_1$
               S01:0000216D:  C2 75 21
F00:0178       		ld a,'`'
               S01:00002170:  3E 60
F00:0179       		jp _2$
               S01:00002172:  C3 83 21
F00:0180       _1$:
F00:0181       		cp 0x1b
               S01:00002175:  FE 1B
F00:0182       		jp nz,_2$
               S01:00002177:  C2 83 21
F00:0183       		ld a,1
               S01:0000217A:  3E 01
F00:0184       		ld (exit),a
               S01:0000217C:  32 05 22
F00:0185       		pop af
               S01:0000217F:  F1
F00:0186       		ei
               S01:00002180:  FB
F00:0187       		reti
               S01:00002181:  ED 4D
F00:0188       _2$:
F00:0189       
F00:0190       		call storeinbuffer
               S01:00002183:  CD 8A 21
F00:0191       		;# not needed to output anymore - out (SERIALPORT),a
F00:0192       		pop af
               S01:00002186:  F1
F00:0193       		ei
               S01:00002187:  FB
F00:0194       		reti
               S01:00002188:  ED 4D
F00:0195       
F00:0196       storeinbuffer:
F00:0197       		push bc
               S01:0000218A:  C5
F00:0198       		push ix
               S01:0000218B:  DD E5
F00:0199       		push af
               S01:0000218D:  F5
F00:0200       		push af ;# save the data to be written
               S01:0000218E:  F5
F00:0201       		ld ix,buffer ;# get the base buffer
               S01:0000218F:  DD 21 3F 22
F00:0202       		ld a,(bufferpos) ;# get the index position
               S01:00002193:  3A BF 22
F00:0203       		ld b,0
               S01:00002196:  06 00
F00:0204       		ld c,a
               S01:00002198:  4F
F00:0205       		add ix,bc ;# adjust IX
               S01:00002199:  DD 09
F00:0206       		pop af ;# restore data to be written
               S01:0000219B:  F1
F00:0207       		ld (ix),a ;# store byte
               S01:0000219C:  DD 77 00
F00:0208       		
F00:0209       		ld a,c ;# copy back the index position
               S01:0000219F:  79
F00:0210       		inc a ;# increment the index position
               S01:000021A0:  3C
F00:0211       		cp BUFFERSIZE+1
               S01:000021A1:  FE 81
F00:0212       		jp nz, _1$
               S01:000021A3:  C2 A8 21
F00:0213       		ld a,0 ;# the buffer overflowed so reset to 0
               S01:000021A6:  3E 00
F00:0214       
F00:0215       _1$:
F00:0216       		ld (bufferpos),a ;# store the new position
               S01:000021A8:  32 BF 22
F00:0217       		pop af
               S01:000021AB:  F1
F00:0218       		pop ix
               S01:000021AC:  DD E1
F00:0219       		pop bc
               S01:000021AE:  C1
F00:0220       		call incbuffer
               S01:000021AF:  CD B3 21
F00:0221       		ret
               S01:000021B2:  C9
F00:0222       
F00:0223       incbuffer:
F00:0224       	push af
               S01:000021B3:  F5
F00:0225       	ld a,(buffersize)
               S01:000021B4:  3A C0 22
F00:0226       	inc a
               S01:000021B7:  3C
F00:0227       	ld (buffersize),a
               S01:000021B8:  32 C0 22
F00:0228       	pop af
               S01:000021BB:  F1
F00:0229       	ret
               S01:000021BC:  C9
F00:0230       
F00:0231       
F00:0232       decbuffer:
F00:0233       	push af
               S01:000021BD:  F5
F00:0234       	ld a,(buffersize)
               S01:000021BE:  3A C0 22
F00:0235       	dec a
               S01:000021C1:  3D
F00:0236       	ld (buffersize),a
               S01:000021C2:  32 C0 22
F00:0237       	pop af
               S01:000021C5:  F1
F00:0238       	ret
               S01:000021C6:  C9
F00:0239       
F00:0240       haskeys:
F00:0241       	ld a,(buffersize)
               S01:000021C7:  3A C0 22
F00:0242       	ret
               S01:000021CA:  C9
F00:0243       
F00:0244       
F00:0245       # ============================================== load shared librarys ============================
F00:0246       loadsharedlibs:
F00:0247       ld hl,screenlibname
               S01:000021CB:  21 F1 21
F00:0248       ld de,0
               S01:000021CE:  11 00 00
F00:0249       call loadfile
               S01:000021D1:  CD 89 20
F00:0250       cp a,0 ;# if A = 0 then the file loaded successfully
               S01:000021D4:  FE 00
F00:0251       jp nz,_4$:
               S01:000021D6:  C2 E9 21
F00:0252       ld (_screenbase),hl
               S01:000021D9:  22 FD 21
F00:0253       ld a,0 ;# initialize the dll
               S01:000021DC:  3E 00
F00:0254       call fnScreenGetAddress
               S01:000021DE:  CD FC 21
F00:0255       ld a,ANSICODE
               S01:000021E1:  3E 03
F00:0256       call fnScreenGetAddress
               S01:000021E3:  CD FC 21
F00:0257       ld (_ansicode),hl
               S01:000021E6:  22 03 22
F00:0258       
F00:0259       # example useage : ld a,CLEARSCREEN
F00:0260       #					call fmANSIcode
F00:0261       
F00:0262       
F00:0263       _4$:
F00:0264       ld a,0
               S01:000021E9:  3E 00
F00:0265       ret
               S01:000021EB:  C9
F00:0266       donemsg: .string "done"
               S01:000021EC:  64 6F 6E 65
F00:0267       screenlibname: .string "screen.lib"	
               S01:000021F1:  73 63 72 65 65 6E 2E 6C 69 62
F00:0268       	.align 2
F00:0269       
F00:0270       	fnScreenGetAddress: .byte 0xc3
               S01:000021FC:  C3
F00:0271       		_screenbase: .2byte 0
               S01:000021FD:  00 00
F00:0272       	fnDiv8: .byte 0xc3
               S01:000021FF:  C3
F00:0273       		_Div8: .2byte 0
               S01:00002200:  00 00
F00:0274       	fnANSIcode: .byte 0xc3
               S01:00002202:  C3
F00:0275       		_ansicode: .2byte 0
               S01:00002203:  00 00
F00:0276       
F00:0277       
F00:0278       
F00:0279       
F00:0280       
F00:0281       		exit: .byte 0 ;#if true time to exit program, escape key sets to true
               S01:00002205:  00
F00:0282       	crlf: .string "\r\n"
               S01:00002206:  0D 0A
F00:0283       	loadedmsg: .string "keyboard test\r\n"
               S01:00002209:  6B 65 79 62 6F 61 72 64 20 74 65 73 74 0D 0A
F00:0284       	readymsg: .string "\r\nReady v0.0\r\n"
               S01:00002219:  0D 0A 52 65 61 64 79 20 76 30 2E 30 0D 0A
F00:0285       	editormsg: .string "EDITOR"
               S01:00002228:  45 44 49 54 4F 52
F00:0286       .ifndef BOOT
F00:0287       		notboot: .string "program space\r\n"
               S01:0000222F:  70 72 6F 67 72 61 6D 20 73 70 61 63 65 0D 0A
F00:0288       .endif
F00:0289       
F00:0290       
F00:0291       buffer: .space BUFFERSIZE ;# data received will be stored in buffer
F00:0292       bufferpos: .byte 0 ;# this is the location where the next received byte will be stored
               S01:000022BF:  00
F00:0293       
F00:0294       # keep a count of the number of characters in the buffer and the number read from the buffer
F00:0295       # its the delta change or difference between saved characters and read characters
F00:0296       buffersize: .byte 0 
               S01:000022C0:  00
F00:0297       
F00:0298       getkeypos: .byte 0;# index into the next byte to read
               S01:000022C1:  00
F00:0299       
F00:0300       
F00:0301       
F00:0302       
F00:0303       	.align 8
F00:0304       	jumptable:
F00:0305       	.2byte nullroutine ;0
               S01:00002300:  5F 21
F00:0306       	.2byte serialport ;2
               S01:00002302:  68 21
F00:0307       	.2byte serialport ;4
               S01:00002304:  68 21
F00:0308       	.2byte serialport ;6
               S01:00002306:  68 21
F00:0309       	.2byte nullroutine ;0
               S01:00002308:  5F 21
F00:0310       	.2byte nullroutine ;0
               S01:0000230A:  5F 21
F00:0311       	.2byte nullroutine ;0
               S01:0000230C:  5F 21
F00:0312       	.2byte nullroutine ;0
               S01:0000230E:  5F 21
F00:0313       	.2byte nullroutine ;0
               S01:00002310:  5F 21
F00:0314       	.2byte nullroutine ;0
               S01:00002312:  5F 21
F00:0315       #/* 10 */
F00:0316       	.2byte nullroutine ;0
               S01:00002314:  5F 21
F00:0317       	.2byte nullroutine ;0
               S01:00002316:  5F 21
F00:0318       	.2byte nullroutine ;0
               S01:00002318:  5F 21
F00:0319       	.2byte nullroutine ;0
               S01:0000231A:  5F 21
F00:0320       	.2byte nullroutine ;0
               S01:0000231C:  5F 21
F00:0321       	.2byte nullroutine ;0
               S01:0000231E:  5F 21
F00:0322       	.2byte nullroutine ;0
               S01:00002320:  5F 21
F00:0323       	.2byte nullroutine ;0
               S01:00002322:  5F 21
F00:0324       	.2byte nullroutine ;0
               S01:00002324:  5F 21
F00:0325       	.2byte nullroutine ;0
               S01:00002326:  5F 21
F00:0326       #/* 20 */
F00:0327       	.2byte nullroutine ;0
               S01:00002328:  5F 21
F00:0328       	.2byte nullroutine ;0
               S01:0000232A:  5F 21
F00:0329       	.2byte nullroutine ;0
               S01:0000232C:  5F 21
F00:0330       	.2byte nullroutine ;0
               S01:0000232E:  5F 21
F00:0331       	.2byte nullroutine ;0
               S01:00002330:  5F 21
F00:0332       	.2byte nullroutine ;0
               S01:00002332:  5F 21
F00:0333       	.2byte nullroutine ;0
               S01:00002334:  5F 21
F00:0334       	.2byte nullroutine ;0
               S01:00002336:  5F 21
F00:0335       	.2byte nullroutine ;0
               S01:00002338:  5F 21
F00:0336       	.2byte nullroutine ;0
               S01:0000233A:  5F 21
F00:0337       #/* 30 */
F00:0338       	.2byte nullroutine ;0
               S01:0000233C:  5F 21
F00:0339       	.2byte nullroutine ;0
               S01:0000233E:  5F 21
F00:0340       	.2byte nullroutine ;0
               S01:00002340:  5F 21
F00:0341       	.2byte nullroutine ;0
               S01:00002342:  5F 21
F00:0342       	.2byte nullroutine ;0
               S01:00002344:  5F 21
F00:0343       	.2byte nullroutine ;0
               S01:00002346:  5F 21
F00:0344       	.2byte nullroutine ;0
               S01:00002348:  5F 21
F00:0345       	.2byte nullroutine ;0
               S01:0000234A:  5F 21
F00:0346       	.2byte nullroutine ;0
               S01:0000234C:  5F 21
F00:0347       	.2byte nullroutine ;0
               S01:0000234E:  5F 21
F00:0348       #/* 40 */
F00:0349       	.2byte nullroutine ;0
               S01:00002350:  5F 21
F00:0350       	.2byte nullroutine ;0
               S01:00002352:  5F 21
F00:0351       	.2byte nullroutine ;0
               S01:00002354:  5F 21
F00:0352       	.2byte nullroutine ;0
               S01:00002356:  5F 21
F00:0353       	.2byte nullroutine ;0
               S01:00002358:  5F 21
F00:0354       	.2byte nullroutine ;0
               S01:0000235A:  5F 21
F00:0355       	.2byte nullroutine ;0
               S01:0000235C:  5F 21
F00:0356       	.2byte nullroutine ;0
               S01:0000235E:  5F 21
F00:0357       	.2byte nullroutine ;0
               S01:00002360:  5F 21
F00:0358       	.2byte nullroutine ;0
               S01:00002362:  5F 21
F00:0359       #/* 50 */
F00:0360       	.2byte nullroutine ;0
               S01:00002364:  5F 21
F00:0361       	.2byte nullroutine ;0
               S01:00002366:  5F 21
F00:0362       	.2byte nullroutine ;0
               S01:00002368:  5F 21
F00:0363       	.2byte nullroutine ;0
               S01:0000236A:  5F 21
F00:0364       	.2byte nullroutine ;0
               S01:0000236C:  5F 21
F00:0365       	.2byte nullroutine ;0
               S01:0000236E:  5F 21
F00:0366       	.2byte nullroutine ;0
               S01:00002370:  5F 21
F00:0367       	.2byte nullroutine ;0
               S01:00002372:  5F 21
F00:0368       	.2byte nullroutine ;0
               S01:00002374:  5F 21
F00:0369       	.2byte nullroutine ;0
               S01:00002376:  5F 21
F00:0370       #/* 60 */
F00:0371       	.2byte nullroutine ;0
               S01:00002378:  5F 21
F00:0372       	.2byte nullroutine ;0
               S01:0000237A:  5F 21
F00:0373       	.2byte nullroutine ;0
               S01:0000237C:  5F 21
F00:0374       	.2byte nullroutine ;0
               S01:0000237E:  5F 21
F00:0375       	.2byte nullroutine ;0
               S01:00002380:  5F 21
F00:0376       	.2byte nullroutine ;0
               S01:00002382:  5F 21
F00:0377       	.2byte nullroutine ;0
               S01:00002384:  5F 21
F00:0378       	.2byte nullroutine ;0
               S01:00002386:  5F 21
F00:0379       	.2byte nullroutine ;0
               S01:00002388:  5F 21
F00:0380       	.2byte nullroutine ;0
               S01:0000238A:  5F 21
F00:0381       #/* 70 */
F00:0382       	.2byte nullroutine ;0
               S01:0000238C:  5F 21
F00:0383       	.2byte nullroutine ;0
               S01:0000238E:  5F 21
F00:0384       	.2byte nullroutine ;0
               S01:00002390:  5F 21
F00:0385       	.2byte nullroutine ;0
               S01:00002392:  5F 21
F00:0386       	.2byte nullroutine ;0
               S01:00002394:  5F 21
F00:0387       	.2byte nullroutine ;0
               S01:00002396:  5F 21
F00:0388       	.2byte nullroutine ;0
               S01:00002398:  5F 21
F00:0389       	.2byte nullroutine ;0
               S01:0000239A:  5F 21
F00:0390       	.2byte nullroutine ;0
               S01:0000239C:  5F 21
F00:0391       	.2byte nullroutine ;0
               S01:0000239E:  5F 21
F00:0392       #/* 80 */
F00:0393       	.2byte nullroutine ;0
               S01:000023A0:  5F 21
F00:0394       	.2byte nullroutine ;0
               S01:000023A2:  5F 21
F00:0395       	.2byte nullroutine ;0
               S01:000023A4:  5F 21
F00:0396       	.2byte nullroutine ;0
               S01:000023A6:  5F 21
F00:0397       	.2byte nullroutine ;0
               S01:000023A8:  5F 21
F00:0398       	.2byte nullroutine ;0
               S01:000023AA:  5F 21
F00:0399       	.2byte nullroutine ;0
               S01:000023AC:  5F 21
F00:0400       	.2byte nullroutine ;0
               S01:000023AE:  5F 21
F00:0401       	.2byte nullroutine ;0
               S01:000023B0:  5F 21
F00:0402       	.2byte nullroutine ;0
               S01:000023B2:  5F 21
F00:0403       #/* 90 */
F00:0404       	.2byte nullroutine ;0
               S01:000023B4:  5F 21
F00:0405       	.2byte nullroutine ;0
               S01:000023B6:  5F 21
F00:0406       	.2byte nullroutine ;0
               S01:000023B8:  5F 21
F00:0407       	.2byte nullroutine ;0
               S01:000023BA:  5F 21
F00:0408       	.2byte nullroutine ;0
               S01:000023BC:  5F 21
F00:0409       	.2byte nullroutine ;0
               S01:000023BE:  5F 21
F00:0410       	.2byte nullroutine ;0
               S01:000023C0:  5F 21
F00:0411       	.2byte nullroutine ;0
               S01:000023C2:  5F 21
F00:0412       	.2byte nullroutine ;0
               S01:000023C4:  5F 21
F00:0413       	.2byte nullroutine ;0
               S01:000023C6:  5F 21
F00:0414       #/* 100 */
F00:0415       	.2byte nullroutine ;0
               S01:000023C8:  5F 21
F00:0416       	.2byte nullroutine ;0
               S01:000023CA:  5F 21
F00:0417       	.2byte nullroutine ;0
               S01:000023CC:  5F 21
F00:0418       	.2byte nullroutine ;0
               S01:000023CE:  5F 21
F00:0419       	.2byte nullroutine ;0
               S01:000023D0:  5F 21
F00:0420       	.2byte nullroutine ;0
               S01:000023D2:  5F 21
F00:0421       	.2byte nullroutine ;0
               S01:000023D4:  5F 21
F00:0422       	.2byte nullroutine ;0
               S01:000023D6:  5F 21
F00:0423       	.2byte nullroutine ;0
               S01:000023D8:  5F 21
F00:0424       	.2byte nullroutine ;0
               S01:000023DA:  5F 21
F00:0425       #/* 110 */
F00:0426       	.2byte nullroutine ;0
               S01:000023DC:  5F 21
F00:0427       	.2byte nullroutine ;0
               S01:000023DE:  5F 21
F00:0428       	.2byte nullroutine ;0
               S01:000023E0:  5F 21
F00:0429       	.2byte nullroutine ;0
               S01:000023E2:  5F 21
F00:0430       	.2byte nullroutine ;0
               S01:000023E4:  5F 21
F00:0431       	.2byte nullroutine ;0
               S01:000023E6:  5F 21
F00:0432       	.2byte nullroutine ;0
               S01:000023E8:  5F 21
F00:0433       	.2byte nullroutine ;0
               S01:000023EA:  5F 21
F00:0434       	.2byte nullroutine ;0
               S01:000023EC:  5F 21
F00:0435       	.2byte nullroutine ;0
               S01:000023EE:  5F 21
F00:0436       #/* 120 */
F00:0437       	.2byte nullroutine ;0
               S01:000023F0:  5F 21
F00:0438       	.2byte nullroutine ;0
               S01:000023F2:  5F 21
F00:0439       	.2byte nullroutine ;0
               S01:000023F4:  5F 21
F00:0440       	.2byte nullroutine ;0
               S01:000023F6:  5F 21
F00:0441       	.2byte nullroutine ;0
               S01:000023F8:  5F 21
F00:0442       	.2byte nullroutine ;0
               S01:000023FA:  5F 21
F00:0443       	.2byte nullroutine ;0
               S01:000023FC:  5F 21
F00:0444       	.2byte nullroutine ;0
               S01:000023FE:  5F 21
F00:0445       
F00:0446       	ENDADDRESS:


Sections:
S01  seg2000


Sources:
F00  keyboardtest.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc
F05  ansicodes.inc
F06  SDCARD.inc
F07  screen.inc


Symbols:
editormsg EXPR(8744=0x2228) UNUSED ABS 
crlf EXPR(8710=0x2206) UNUSED ABS 
fnANSIcode EXPR(8706=0x2202) UNUSED ABS 
_Div8 EXPR(8704=0x2200) UNUSED ABS 
fnDiv8 EXPR(8703=0x21ff) UNUSED ABS 
donemsg EXPR(8684=0x21ec) UNUSED ABS 
_ansicode EXPR(8707=0x2203) ABS 
fnScreenGetAddress EXPR(8700=0x21fc) ABS 
_screenbase EXPR(8701=0x21fd) ABS 
 loadsharedlibs _4$ EXPR(8681=0x21e9) ABS 
screenlibname EXPR(8689=0x21f1) ABS 
loadsharedlibs EXPR(8651=0x21cb) UNUSED ABS 
buffersize EXPR(8896=0x22c0) ABS 
incbuffer EXPR(8627=0x21b3) ABS 
 storeinbuffer _1$ EXPR(8616=0x21a8) ABS 
bufferpos EXPR(8895=0x22bf) ABS 
storeinbuffer EXPR(8586=0x218a) ABS 
 serialport _2$ EXPR(8579=0x2183) ABS 
 serialport _1$ EXPR(8565=0x2175) ABS 
serialport EXPR(8552=0x2168) ABS 
nullroutine EXPR(8543=0x215f) ABS 
 appendchar 1$ EXPR(8539=0x215b) ABS 
 appendchar 2$ EXPR(8525=0x214d) ABS 
appendchar EXPR(8523=0x214b) UNUSED ABS 
asciibuffer EXPR(8513=0x2141) UNUSED ABS 
_move1_0 EXPR(8506=0x213a) ABS 
_resetscreenmsg EXPR(8463=0x210f) ABS 
decbuffer EXPR(8637=0x21bd) ABS 
 getchar _1$ EXPR(8454=0x2106) ABS 
getkeypos EXPR(8897=0x22c1) ABS 
buffer EXPR(8767=0x223f) ABS 
getchar EXPR(8428=0x20ec) ABS 
haskeys EXPR(8647=0x21c7) ABS 
_exit$ EXPR(8422=0x20e6) ABS 
exit EXPR(8709=0x2205) ABS 
loop EXPR(8397=0x20cd) ABS 
move1_0 EXPR(8499=0x2133) ABS 
displaytitle EXPR(8492=0x212c) ABS 
notboot EXPR(8751=0x222f) ABS 
loadedmsg EXPR(8713=0x2209) ABS 
jumptable EXPR(8960=0x2300) ABS 
readymsg EXPR(8729=0x2219) ABS 
BUFFERSIZE EXPR(128=0x80) 
COLORBGWHITE EXPR(27=0x1b) UNUSED 
COLORBGCYAN EXPR(26=0x1a) UNUSED 
COLORBGMAGENTA EXPR(25=0x19) UNUSED 
COLORBGBLUE EXPR(24=0x18) UNUSED 
COLORBGYELLOW EXPR(23=0x17) UNUSED 
COLORBGGREEN EXPR(22=0x16) UNUSED 
COLORBGRED EXPR(21=0x15) UNUSED 
COLORBGBLACK EXPR(20=0x14) UNUSED 
COLORFGWHITE EXPR(19=0x13) UNUSED 
COLORFGCYAN EXPR(18=0x12) UNUSED 
COLORFGMAGENTA EXPR(17=0x11) UNUSED 
COLORFGBLUE EXPR(16=0x10) UNUSED 
COLORFGYELLOW EXPR(15=0xf) UNUSED 
COLORFGGREEN EXPR(14=0xe) UNUSED 
COLORFGRED EXPR(13=0xd) UNUSED 
COLORFGBLACK EXPR(12=0xc) UNUSED 
COLORDIM EXPR(11=0xb) UNUSED 
COLORBOLD EXPR(10=0xa) UNUSED 
COLORRESET EXPR(9=0x9) UNUSED 
CLEARLINE EXPR(8=0x8) UNUSED 
CLEARFROMSTARTOFLINE EXPR(7=0x7) UNUSED 
CLEARTOENDOFLINE EXPR(6=0x6) UNUSED 
CLEARCURRENTLINE EXPR(5=0x5) UNUSED 
CLEARWHOLESCREEN EXPR(4=0x4) UNUSED 
CLEARBEGINOFSCREEN EXPR(3=0x3) UNUSED 
CLEARENDOFSCREEN EXPR(2=0x2) UNUSED 
CLEARSCREEN EXPR(1=0x1) UNUSED 
ANSICODE EXPR(3=0x3) 
TEST EXPR(2=0x2) UNUSED 
DIVIDE8 EXPR(1=0x1) UNUSED 
getmalloctable EXPR(8362=0x20aa) UNUSED ABS 
getcommandparams EXPR(8359=0x20a7) UNUSED ABS 
createProcess EXPR(8356=0x20a4) UNUSED ABS 
getfilename EXPR(8353=0x20a1) UNUSED ABS 
directorynextfile EXPR(8350=0x209e) UNUSED ABS 
directoryopen EXPR(8347=0x209b) UNUSED ABS 
hextobyte EXPR(8344=0x2098) UNUSED ABS 
touppercase EXPR(8341=0x2095) UNUSED ABS 
putc EXPR(8338=0x2092) ABS 
strlen EXPR(8335=0x208f) UNUSED ABS 
memset EXPR(8332=0x208c) UNUSED ABS 
loadfile EXPR(8329=0x2089) ABS 
printhex EXPR(8326=0x2086) ABS 
println EXPR(8323=0x2083) UNUSED ABS 
print EXPR(8320=0x2080) ABS 
functionlookups EXPR(8319=0x207f) UNUSED ABS 
_main EXPR(8365=0x20ad) ABS 
getmalloctableadr EXPR(8363=0x20ab) ABS 
getcommandparamsadr EXPR(8360=0x20a8) ABS 
createProcessadr EXPR(8357=0x20a5) ABS 
getfilenameadr EXPR(8354=0x20a2) ABS 
directorynextfileadr EXPR(8351=0x209f) ABS 
directoryopenadr EXPR(8348=0x209c) ABS 
printlnadr EXPR(8324=0x2084) ABS 
hextobyteadr EXPR(8345=0x2099) ABS 
touppercaseadr EXPR(8342=0x2096) ABS 
putcadr EXPR(8339=0x2093) ABS 
strlenadr EXPR(8336=0x2090) ABS 
memsetadr EXPR(8333=0x208d) ABS 
loadfileadr EXPR(8330=0x208a) ABS 
printhexadr EXPR(8327=0x2087) ABS 
printadr EXPR(8321=0x2081) ABS 
ENDADDRESS EXPR(9216=0x2400) ABS 
 *current pc dummy* EXPR(8194=0x2002) INTERNAL PROT ABS 
NEXTNUMBER EXPR(19=0x13) UNUSED 
GETMALLOCTABLE EXPR(18=0x12) 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) UNUSED 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
