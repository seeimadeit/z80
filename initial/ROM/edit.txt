F00:0001       .include "Routines.inc"
F01:0001       
F01:0002       .macro DEBUG CHARACTER='!'
F01:0009       
F01:0010       
F01:0011       .macro DEBUGHEX CHARACTER='!'
F01:0018       
F01:0019       
F01:0020       
F01:0021       # address where user programs load
F01:0022       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       .equ SERIALPORT2, 0x02
F02:0003       
F01:0023       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0024       .equ commandMemory, 0x1000
F01:0025       .equ userMemory,0x2000
F01:0026       .equ libMemory,0xF000
F01:0027       
F01:0028       .equ TRUE, 1
F01:0029       .equ FALSE, 0
F01:0030       
F01:0031       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0032       # ld a, PRINT
F01:0033       # call GetAddress
F01:0034       # address for print loaded into hl
F01:0035       # the value in hl can change between os versions so do not hard code the values
F01:0036       
F01:0037       .equ GetAddress, 0x0804
F01:0038       .equ PRINT,		1
F01:0039       .equ PRINTLN,	9
F01:0040       .equ PRINTHEX,	2
F01:0041       .equ PRINTHEXL,21
F01:0042       .equ LOADFILE,	3
F01:0043       .equ MEMSET,	4
F01:0044       .equ STRLEN,	5
F01:0045       .equ PUTC,		6
F01:0046       .equ TOUPPERCASE,7
F01:0047       .equ HEXTOBYTE,	8
F01:0048       .equ STRNCPY,10
F01:0049       .equ CREATEPROCESS,16
F01:0050       .equ GETCOMMANDPARAMS,17
F01:0051       # filesystem - primitive functions, probably going to change 
F01:0052       .equ DIRECTORYOPEN,13
F01:0053       .equ DIRECTORYNEXTFILE,14
F01:0054       .equ GETFILENAME,15
F01:0055       .equ GETMALLOCTABLE,18
F01:0056       .equ DIV8,19
F01:0057       .equ SETRESETPAGE,20
F01:0058       
F01:0059       
F01:0060       
F01:0061       .equ NEXTNUMBER,22
F01:0062       
F01:0063       
F00:0002       .include "libs.inc"
F04:0001       
F04:0002       
F04:0003       	.ifdef __LIB__
F04:0004       		.ifdef __ORG__
F04:0005       			.org __ORG__
F04:0006       		.else 
F04:0007       			.org dllMemory
F04:0008       		.endif
F04:0009       		.2byte $ ;# load address
F04:0010       		.byte ((ENDADDRESS-$)/255)+1 ;# memory required to load (in pages)
F04:0011       		.ifdef __STACK__
F04:0012       			.byte __STACK__
F04:0013       		.else 
F04:0014       			.byte 1 ;# stack size (in pages)
F04:0015       		.endif
F04:0016       		jp libaddress
F04:0017       initialize:
F04:0018       	.else
F04:0019       		.ifdef __ORG__
F04:0020       			.org __ORG__
F04:0021       		.else
F04:0022       			.org userMemory
F04:0023       		.endif
F04:0024       		.2byte $ ;# load address
               S01:00002000:  00 20
F04:0025       		.byte ((ENDADDRESS-$)/255)+1 ;# memory required to load (in pages)
               S01:00002002:  04
F04:0026       		.ifdef __STACK__
F04:0027       			.byte __STACK__
F04:0028       		.else 
F04:0029       			.byte 1 ;# stack size (in pages)
               S01:00002003:  01
F04:0030       		.endif
F04:0031       	.endif
F04:0032       
F04:0033       	ld a,PRINT
               S01:00002004:  3E 01
F04:0034       	call GetAddress
               S01:00002006:  CD 04 08
F04:0035       	ld (printadr),hl
               S01:00002009:  22 99 20
F04:0036       	ld a,PRINTHEX
               S01:0000200C:  3E 02
F04:0037       	call GetAddress
               S01:0000200E:  CD 04 08
F04:0038       	ld (printhexadr),hl
               S01:00002011:  22 9F 20
F04:0039       	ld a,LOADFILE
               S01:00002014:  3E 03
F04:0040       	call GetAddress
               S01:00002016:  CD 04 08
F04:0041       	ld (loadfileadr),hl
               S01:00002019:  22 A2 20
F04:0042       	ld a,MEMSET
               S01:0000201C:  3E 04
F04:0043       	call GetAddress
               S01:0000201E:  CD 04 08
F04:0044       	ld (memsetadr),hl
               S01:00002021:  22 A5 20
F04:0045       	ld a,STRLEN
               S01:00002024:  3E 05
F04:0046       	call GetAddress
               S01:00002026:  CD 04 08
F04:0047       	ld (strlenadr),hl
               S01:00002029:  22 A8 20
F04:0048       	ld a,PUTC
               S01:0000202C:  3E 06
F04:0049       	call GetAddress
               S01:0000202E:  CD 04 08
F04:0050       	ld (putcadr),hl
               S01:00002031:  22 AB 20
F04:0051       	ld a,TOUPPERCASE
               S01:00002034:  3E 07
F04:0052       	call GetAddress
               S01:00002036:  CD 04 08
F04:0053       	ld (touppercaseadr),hl
               S01:00002039:  22 AE 20
F04:0054       	ld a,HEXTOBYTE
               S01:0000203C:  3E 08
F04:0055       	call GetAddress
               S01:0000203E:  CD 04 08
F04:0056       	ld (hextobyteadr),hl
               S01:00002041:  22 B1 20
F04:0057       	ld a,PRINTLN
               S01:00002044:  3E 09
F04:0058       	call GetAddress
               S01:00002046:  CD 04 08
F04:0059       	ld (printlnadr),hl
               S01:00002049:  22 9C 20
F04:0060       	ld a,DIRECTORYOPEN
               S01:0000204C:  3E 0D
F04:0061       	call GetAddress
               S01:0000204E:  CD 04 08
F04:0062       	ld (directoryopenadr),hl
               S01:00002051:  22 B4 20
F04:0063       	ld a,NEXTFILE
               S01:00002054:  3E 32
F04:0064       	call GetAddress
               S01:00002056:  CD 04 08
F04:0065       	ld (directorynextfileadr),hl
               S01:00002059:  22 B7 20
F04:0066       	ld a,GETFILENAME
               S01:0000205C:  3E 0F
F04:0067       	call GetAddress
               S01:0000205E:  CD 04 08
F04:0068       	ld (getfilenameadr),hl
               S01:00002061:  22 BA 20
F04:0069       	ld a,CREATEPROCESS
               S01:00002064:  3E 10
F04:0070       	call GetAddress
               S01:00002066:  CD 04 08
F04:0071       	ld (createProcessadr),hl
               S01:00002069:  22 BD 20
F04:0072       	ld a,GETCOMMANDPARAMS
               S01:0000206C:  3E 11
F04:0073       	call GetAddress
               S01:0000206E:  CD 04 08
F04:0074       	ld (getcommandparamsadr),hl
               S01:00002071:  22 C0 20
F04:0075       	ld a,GETMALLOCTABLE
               S01:00002074:  3E 12
F04:0076       	call GetAddress
               S01:00002076:  CD 04 08
F04:0077       	ld (getmalloctableadr),hl
               S01:00002079:  22 C3 20
F04:0078       	ld a,DIV8
               S01:0000207C:  3E 13
F04:0079       	call GetAddress
               S01:0000207E:  CD 04 08
F04:0080       	ld (div8adr),hl
               S01:00002081:  22 C6 20
F04:0081       	ld a,SETRESETPAGE
               S01:00002084:  3E 14
F04:0082       	call GetAddress
               S01:00002086:  CD 04 08
F04:0083       	ld (setresetpageadr),hl
               S01:00002089:  22 C9 20
F04:0084       	ld a,PRINTHEXL
               S01:0000208C:  3E 15
F04:0085       	call GetAddress
               S01:0000208E:  CD 04 08
F04:0086       	ld (printhexLadr),hl
               S01:00002091:  22 CC 20
F04:0087       
F04:0088       
F04:0089       
F04:0090       
F04:0091       	jp _main
               S01:00002094:  C3 CE 20
F04:0092       
F04:0093       	functionlookups:
F04:0094       	.align 2
F04:0095       	print: .byte 0xc3
               S01:00002098:  C3
F04:0096       	printadr: .2byte 0
               S01:00002099:  00 00
F04:0097       	println: .byte 0xc3
               S01:0000209B:  C3
F04:0098       	printlnadr: .2byte 0
               S01:0000209C:  00 00
F04:0099       	printhex: .byte 0xc3
               S01:0000209E:  C3
F04:0100       	printhexadr: .2byte 0
               S01:0000209F:  00 00
F04:0101       	loadfile: .byte 0xc3
               S01:000020A1:  C3
F04:0102       	loadfileadr: .2byte 0
               S01:000020A2:  00 00
F04:0103       	memset: .byte 0xc3
               S01:000020A4:  C3
F04:0104       	memsetadr: .2byte 0
               S01:000020A5:  00 00
F04:0105       	strlen: .byte 0xc3
               S01:000020A7:  C3
F04:0106       	strlenadr: .2byte 0
               S01:000020A8:  00 00
F04:0107       	putc: .byte 0xc3
               S01:000020AA:  C3
F04:0108       	putcadr: .2byte 0
               S01:000020AB:  00 00
F04:0109       	touppercase: .byte 0xc3
               S01:000020AD:  C3
F04:0110       	touppercaseadr: .2byte 0
               S01:000020AE:  00 00
F04:0111       	hextobyte: .byte 0xc3
               S01:000020B0:  C3
F04:0112       	hextobyteadr: .2byte 0
               S01:000020B1:  00 00
F04:0113       	directoryopen: .byte 0xc3
               S01:000020B3:  C3
F04:0114       	directoryopenadr: .2byte 0
               S01:000020B4:  00 00
F04:0115       	directorynextfile: .byte 0xc3
               S01:000020B6:  C3
F04:0116       	directorynextfileadr: .2byte 0
               S01:000020B7:  00 00
F04:0117       	getfilename: .byte 0xc3
               S01:000020B9:  C3
F04:0118       	getfilenameadr: .2byte 0
               S01:000020BA:  00 00
F04:0119       	createProcess: .byte 0xc3
               S01:000020BC:  C3
F04:0120       	createProcessadr: .2byte 0
               S01:000020BD:  00 00
F04:0121       	getcommandparams: .byte 0xc3
               S01:000020BF:  C3
F04:0122       	getcommandparamsadr: .2byte 0
               S01:000020C0:  00 00
F04:0123       	getmalloctable: .byte 0xc3
               S01:000020C2:  C3
F04:0124       	getmalloctableadr: .2byte 0
               S01:000020C3:  00 00
F04:0125       	Div8: .byte 0xc3
               S01:000020C5:  C3
F04:0126       	div8adr: .2byte 0
               S01:000020C6:  00 00
F04:0127       	setresetpage: .byte 0xc3
               S01:000020C8:  C3
F04:0128       	setresetpageadr: .2byte 0
               S01:000020C9:  00 00
F04:0129       	printhexL: .byte 0xc3
               S01:000020CB:  C3
F04:0130       	printhexLadr: .2byte 0
               S01:000020CC:  00 00
F04:0131       
F04:0132       _main:
F04:0133       .ifdef __DLL__
F04:0134       	ret
F04:0135       .endif
F00:0003       
F00:0004       .equ buffersize,9
F00:0005       
F00:0006       	di
               S01:000020CE:  F3
F00:0007       	im 2
               S01:000020CF:  ED 5E
F00:0008       	ld a, interruptvectors/256
               S01:000020D1:  3E 22
F00:0009       	ld i,a
               S01:000020D3:  ED 47
F00:0010       	ei
               S01:000020D5:  FB
F00:0011       
F00:0012       loop:
F00:0013       	call available
               S01:000020D6:  CD F9 20
F00:0014       	cp 0
               S01:000020D9:  FE 00
F00:0015       	jp z, loop
               S01:000020DB:  CA D6 20
F00:0016       
F00:0017       1$:
F00:0018       	call getc
               S01:000020DE:  CD FD 20
F00:0019       	cp 0x1b
               S01:000020E1:  FE 1B
F00:0020       	jp z,exit
               S01:000020E3:  CA F6 20
F00:0021       	call putc
               S01:000020E6:  CD AA 20
F00:0022       	
F00:0023       	cp 0x0d
               S01:000020E9:  FE 0D
F00:0024       	jp nz,loop
               S01:000020EB:  C2 D6 20
F00:0025       	ld a,0x0a
               S01:000020EE:  3E 0A
F00:0026       	call putc
               S01:000020F0:  CD AA 20
F00:0027       	jp loop
               S01:000020F3:  C3 D6 20
F00:0028       
F00:0029       
F00:0030       exit:
F00:0031       	ld a,0
               S01:000020F6:  3E 00
F00:0032       	ret
               S01:000020F8:  C9
F00:0033       
F00:0034       available: ;# return number of characters in the buffer
F00:0035       	ld a,(Counter)
               S01:000020F9:  3A AC 21
F00:0036       	ret
               S01:000020FC:  C9
F00:0037       
F00:0038       getc:
F00:0039       	push bc
               S01:000020FD:  C5
F00:0040       	push ix
               S01:000020FE:  DD E5
F00:0041       
F00:0042       	ld a,(Counter) ;# cannot getc if there are no characters to get
               S01:00002100:  3A AC 21
F00:0043       	cp 0
               S01:00002103:  FE 00
F00:0044       	jp z,1$
               S01:00002105:  CA 31 21
F00:0045       
F00:0046       	ld a,(Rindex)
               S01:00002108:  3A AD 21
F00:0047       	cp buffersize
               S01:0000210B:  FE 09
F00:0048       	jp nz,2$
               S01:0000210D:  C2 15 21
F00:0049       	ld a,0 ;# need to reset the Rindex value
               S01:00002110:  3E 00
F00:0050       	ld (Rindex),a
               S01:00002112:  32 AD 21
F00:0051       
F00:0052       2$: ;# a contains the Rindex value
F00:0053       	ld ix,buffer
               S01:00002115:  DD 21 AF 21
F00:0054       	ld b,0
               S01:00002119:  06 00
F00:0055       	ld c,a
               S01:0000211B:  4F
F00:0056       	add ix,bc ;# ix now contains the location to store the character
               S01:0000211C:  DD 09
F00:0057       	ld a,(ix)
               S01:0000211E:  DD 7E 00
F00:0058       	push af ;# load the character and save onto stack
               S01:00002121:  F5
F00:0059       	ld a,(Rindex)
               S01:00002122:  3A AD 21
F00:0060       	inc a
               S01:00002125:  3C
F00:0061       	ld (Rindex),a ;# update Rindex and save
               S01:00002126:  32 AD 21
F00:0062       	pop af
               S01:00002129:  F1
F00:0063       	call subCounter ;# save the counter variable
               S01:0000212A:  CD 90 21
F00:0064       
F00:0065       	pop ix
               S01:0000212D:  DD E1
F00:0066       	pop bc
               S01:0000212F:  C1
F00:0067       	ret
               S01:00002130:  C9
F00:0068       1$: ;# no characters available
F00:0069       	pop ix
               S01:00002131:  DD E1
F00:0070       	pop bc
               S01:00002133:  C1
F00:0071       	ld a,0
               S01:00002134:  3E 00
F00:0072       	ret
               S01:00002136:  C9
F00:0073       
F00:0074       
F00:0075       
F00:0076       interrupthandler:
F00:0077       	push af
               S01:00002137:  F5
F00:0078       	push ix
               S01:00002138:  DD E5
F00:0079       	in a,(SERIALPORT)
               S01:0000213A:  DB 01
F00:0080       	push af
               S01:0000213C:  F5
F00:0081       
F00:0082       	ld a,(Counter) ;# cannot write character if no space to write into
               S01:0000213D:  3A AC 21
F00:0083       	cp buffersize
               S01:00002140:  FE 09
F00:0084       	jp z,2$
               S01:00002142:  CA 59 21
F00:0085       
F00:0086       
F00:0087       	call getWriteAddress
               S01:00002145:  CD 60 21
F00:0088       	
F00:0089       	pop af ;# get the character
               S01:00002148:  F1
F00:0090       	ld (ix),a
               S01:00002149:  DD 77 00
F00:0091       
F00:0092       	ld a,(Windex) ;# reload index
               S01:0000214C:  3A AE 21
F00:0093       	inc a
               S01:0000214F:  3C
F00:0094       	ld (Windex),a ;# save the updated index
               S01:00002150:  32 AE 21
F00:0095       	call addCounter ;# update the counter variable
               S01:00002153:  CD 77 21
F00:0096       	jp 1$
               S01:00002156:  C3 5A 21
F00:0097       
F00:0098       2$: pop af ;# throw away the character
               S01:00002159:  F1
F00:0099       	
F00:0100       1$:	pop ix
               S01:0000215A:  DD E1
F00:0101       	pop af
               S01:0000215C:  F1
F00:0102       	ei
               S01:0000215D:  FB
F00:0103       	reti
               S01:0000215E:  ED 4D
F00:0104       
F00:0105       getWriteAddress:
F00:0106       	ld a,(Windex)
               S01:00002160:  3A AE 21
F00:0107       	cp buffersize ;# test we have not reached the max buffer size
               S01:00002163:  FE 09
F00:0108       	jp nz, 3$
               S01:00002165:  C2 6D 21
F00:0109       	;# need to cycle the Windex
F00:0110       	ld a,0
               S01:00002168:  3E 00
F00:0111       	ld (Windex),a
               S01:0000216A:  32 AE 21
F00:0112       3$:	;# store the character in buffer, A = Windex value
F00:0113       	ld ix,buffer
               S01:0000216D:  DD 21 AF 21
F00:0114       	ld b,0
               S01:00002171:  06 00
F00:0115       	ld c,a
               S01:00002173:  4F
F00:0116       	add ix,bc ;# ix now contains the location to store the character
               S01:00002174:  DD 09
F00:0117       
F00:0118       	ret
               S01:00002176:  C9
F00:0119       addCounter:
F00:0120       	push af
               S01:00002177:  F5
F00:0121       	push hl
               S01:00002178:  E5
F00:0122       
F00:0123       ;#	ld hl,incmsg
F00:0124       ;#	call println
F00:0125       	ld a,(Counter)
               S01:00002179:  3A AC 21
F00:0126       	inc a
               S01:0000217C:  3C
F00:0127       	ld (Counter),a
               S01:0000217D:  32 AC 21
F00:0128       	cp buffersize-4 ;# test this value
               S01:00002180:  FE 05
F00:0129       	jp nz,1$ ;# flow control
               S01:00002182:  C2 8D 21
F00:0130       	ld a,19 ;# xoff control
               S01:00002185:  3E 13
F00:0131       	out (SERIALPORT),a
               S01:00002187:  D3 01
F00:0132       	ld a,'*'
               S01:00002189:  3E 2A
F00:0133       	out (SERIALPORT),a
               S01:0000218B:  D3 01
F00:0134       1$:	pop hl
               S01:0000218D:  E1
F00:0135       	pop af
               S01:0000218E:  F1
F00:0136       	ret
               S01:0000218F:  C9
F00:0137       subCounter:
F00:0138       ;#	di
F00:0139       	push af
               S01:00002190:  F5
F00:0140       	push hl
               S01:00002191:  E5
F00:0141       ;#	ld hl,decmsg
F00:0142       ;#	call println
F00:0143       	ld a,(Counter)
               S01:00002192:  3A AC 21
F00:0144       	dec a
               S01:00002195:  3D
F00:0145       	ld (Counter),a
               S01:00002196:  32 AC 21
F00:0146       	cp 0
               S01:00002199:  FE 00
F00:0147       	jp nz,1$ ;# flow control
               S01:0000219B:  C2 A6 21
F00:0148       	ld a,17 ;# xon control
               S01:0000219E:  3E 11
F00:0149       	out (SERIALPORT),a
               S01:000021A0:  D3 01
F00:0150       	ld a,'&'
               S01:000021A2:  3E 26
F00:0151       	out (SERIALPORT),a
               S01:000021A4:  D3 01
F00:0152       
F00:0153       1$:	pop hl
               S01:000021A6:  E1
F00:0154       	pop af
               S01:000021A7:  F1
F00:0155       ;#	ei
F00:0156       	ret
               S01:000021A8:  C9
F00:0157       
F00:0158       
F00:0159       nullroutine: ei
               S01:000021A9:  FB
F00:0160       			reti
               S01:000021AA:  ED 4D
F00:0161       
F00:0162       Counter: .byte 0
               S01:000021AC:  00
F00:0163       Rindex: .byte 0 ;# read next character from this index
               S01:000021AD:  00
F00:0164       Windex: .byte 0 ;# write next current at this index
               S01:000021AE:  00
F00:0165       buffer: .space buffersize ;# at most 10 characters
F00:0166       incmsg: .string "increment"
               S01:000021B8:  69 6E 63 72 65 6D 65 6E 74
F00:0167       decmsg: .string "decrement"
               S01:000021C2:  64 65 63 72 65 6D 65 6E 74
F00:0168       
F00:0169       .align 8
F00:0170       interruptvectors:
F00:0171       
F00:0172       	jumptable: ;# for keyboard interrupts
F00:0173       	.2byte nullroutine ;0
               S01:00002200:  A9 21
F00:0174       	.2byte interrupthandler ;0
               S01:00002202:  37 21
F00:0175       
F00:0176       	.2byte nullroutine ;0
               S01:00002204:  A9 21
F00:0177       	.2byte nullroutine ;0
               S01:00002206:  A9 21
F00:0178       	.2byte nullroutine ;0
               S01:00002208:  A9 21
F00:0179       	.2byte nullroutine ;0
               S01:0000220A:  A9 21
F00:0180       	.2byte nullroutine ;0
               S01:0000220C:  A9 21
F00:0181       	.2byte nullroutine ;0
               S01:0000220E:  A9 21
F00:0182       	.2byte nullroutine ;0
               S01:00002210:  A9 21
F00:0183       	.2byte nullroutine ;0
               S01:00002212:  A9 21
F00:0184       #/* 10 */
F00:0185       	.2byte nullroutine ;0
               S01:00002214:  A9 21
F00:0186       	.2byte nullroutine ;0
               S01:00002216:  A9 21
F00:0187       	.2byte nullroutine ;0
               S01:00002218:  A9 21
F00:0188       	.2byte nullroutine ;0
               S01:0000221A:  A9 21
F00:0189       	.2byte nullroutine ;0
               S01:0000221C:  A9 21
F00:0190       	.2byte nullroutine ;0
               S01:0000221E:  A9 21
F00:0191       	.2byte nullroutine ;0
               S01:00002220:  A9 21
F00:0192       	.2byte nullroutine ;0
               S01:00002222:  A9 21
F00:0193       	.2byte nullroutine ;0
               S01:00002224:  A9 21
F00:0194       	.2byte nullroutine ;0
               S01:00002226:  A9 21
F00:0195       #/* 20 */
F00:0196       	.2byte nullroutine ;0
               S01:00002228:  A9 21
F00:0197       	.2byte nullroutine ;0
               S01:0000222A:  A9 21
F00:0198       	.2byte nullroutine ;0
               S01:0000222C:  A9 21
F00:0199       	.2byte nullroutine ;0
               S01:0000222E:  A9 21
F00:0200       	.2byte nullroutine ;0
               S01:00002230:  A9 21
F00:0201       	.2byte nullroutine ;0
               S01:00002232:  A9 21
F00:0202       	.2byte nullroutine ;0
               S01:00002234:  A9 21
F00:0203       	.2byte nullroutine ;0
               S01:00002236:  A9 21
F00:0204       	.2byte nullroutine ;0
               S01:00002238:  A9 21
F00:0205       	.2byte nullroutine ;0
               S01:0000223A:  A9 21
F00:0206       #/* 30 */
F00:0207       	.2byte nullroutine ;0
               S01:0000223C:  A9 21
F00:0208       	.2byte nullroutine ;0
               S01:0000223E:  A9 21
F00:0209       	.2byte nullroutine ;0
               S01:00002240:  A9 21
F00:0210       	.2byte nullroutine ;0
               S01:00002242:  A9 21
F00:0211       	.2byte nullroutine ;0
               S01:00002244:  A9 21
F00:0212       	.2byte nullroutine ;0
               S01:00002246:  A9 21
F00:0213       	.2byte nullroutine ;0
               S01:00002248:  A9 21
F00:0214       	.2byte nullroutine ;0
               S01:0000224A:  A9 21
F00:0215       	.2byte nullroutine ;0
               S01:0000224C:  A9 21
F00:0216       	.2byte nullroutine ;0
               S01:0000224E:  A9 21
F00:0217       #/* 40 */
F00:0218       	.2byte nullroutine ;0
               S01:00002250:  A9 21
F00:0219       	.2byte nullroutine ;0
               S01:00002252:  A9 21
F00:0220       	.2byte nullroutine ;0
               S01:00002254:  A9 21
F00:0221       	.2byte nullroutine ;0
               S01:00002256:  A9 21
F00:0222       	.2byte nullroutine ;0
               S01:00002258:  A9 21
F00:0223       	.2byte nullroutine ;0
               S01:0000225A:  A9 21
F00:0224       	.2byte nullroutine ;0
               S01:0000225C:  A9 21
F00:0225       	.2byte nullroutine ;0
               S01:0000225E:  A9 21
F00:0226       	.2byte nullroutine ;0
               S01:00002260:  A9 21
F00:0227       	.2byte nullroutine ;0
               S01:00002262:  A9 21
F00:0228       #/* 50 */
F00:0229       	.2byte nullroutine ;0
               S01:00002264:  A9 21
F00:0230       	.2byte nullroutine ;0
               S01:00002266:  A9 21
F00:0231       	.2byte nullroutine ;0
               S01:00002268:  A9 21
F00:0232       	.2byte nullroutine ;0
               S01:0000226A:  A9 21
F00:0233       	.2byte nullroutine ;0
               S01:0000226C:  A9 21
F00:0234       	.2byte nullroutine ;0
               S01:0000226E:  A9 21
F00:0235       	.2byte nullroutine ;0
               S01:00002270:  A9 21
F00:0236       	.2byte nullroutine ;0
               S01:00002272:  A9 21
F00:0237       	.2byte nullroutine ;0
               S01:00002274:  A9 21
F00:0238       	.2byte nullroutine ;0
               S01:00002276:  A9 21
F00:0239       #/* 60 */
F00:0240       	.2byte nullroutine ;0
               S01:00002278:  A9 21
F00:0241       	.2byte nullroutine ;0
               S01:0000227A:  A9 21
F00:0242       	.2byte nullroutine ;0
               S01:0000227C:  A9 21
F00:0243       	.2byte nullroutine ;0
               S01:0000227E:  A9 21
F00:0244       	.2byte nullroutine ;0
               S01:00002280:  A9 21
F00:0245       	.2byte nullroutine ;0
               S01:00002282:  A9 21
F00:0246       	.2byte nullroutine ;0
               S01:00002284:  A9 21
F00:0247       	.2byte nullroutine ;0
               S01:00002286:  A9 21
F00:0248       	.2byte nullroutine ;0
               S01:00002288:  A9 21
F00:0249       	.2byte nullroutine ;0
               S01:0000228A:  A9 21
F00:0250       #/* 70 */
F00:0251       	.2byte nullroutine ;0
               S01:0000228C:  A9 21
F00:0252       	.2byte nullroutine ;0
               S01:0000228E:  A9 21
F00:0253       	.2byte nullroutine ;0
               S01:00002290:  A9 21
F00:0254       	.2byte nullroutine ;0
               S01:00002292:  A9 21
F00:0255       	.2byte nullroutine ;0
               S01:00002294:  A9 21
F00:0256       	.2byte nullroutine ;0
               S01:00002296:  A9 21
F00:0257       	.2byte nullroutine ;0
               S01:00002298:  A9 21
F00:0258       	.2byte nullroutine ;0
               S01:0000229A:  A9 21
F00:0259       	.2byte nullroutine ;0
               S01:0000229C:  A9 21
F00:0260       	.2byte nullroutine ;0
               S01:0000229E:  A9 21
F00:0261       #/* 80 */
F00:0262       	.2byte nullroutine ;0
               S01:000022A0:  A9 21
F00:0263       	.2byte nullroutine ;0
               S01:000022A2:  A9 21
F00:0264       	.2byte nullroutine ;0
               S01:000022A4:  A9 21
F00:0265       	.2byte nullroutine ;0
               S01:000022A6:  A9 21
F00:0266       	.2byte nullroutine ;0
               S01:000022A8:  A9 21
F00:0267       	.2byte nullroutine ;0
               S01:000022AA:  A9 21
F00:0268       	.2byte nullroutine ;0
               S01:000022AC:  A9 21
F00:0269       	.2byte nullroutine ;0
               S01:000022AE:  A9 21
F00:0270       	.2byte nullroutine ;0
               S01:000022B0:  A9 21
F00:0271       	.2byte nullroutine ;0
               S01:000022B2:  A9 21
F00:0272       #/* 90 */
F00:0273       	.2byte nullroutine ;0
               S01:000022B4:  A9 21
F00:0274       	.2byte nullroutine ;0
               S01:000022B6:  A9 21
F00:0275       	.2byte nullroutine ;0
               S01:000022B8:  A9 21
F00:0276       	.2byte nullroutine ;0
               S01:000022BA:  A9 21
F00:0277       	.2byte nullroutine ;0
               S01:000022BC:  A9 21
F00:0278       	.2byte nullroutine ;0
               S01:000022BE:  A9 21
F00:0279       	.2byte nullroutine ;0
               S01:000022C0:  A9 21
F00:0280       	.2byte nullroutine ;0
               S01:000022C2:  A9 21
F00:0281       	.2byte nullroutine ;0
               S01:000022C4:  A9 21
F00:0282       	.2byte nullroutine ;0
               S01:000022C6:  A9 21
F00:0283       #/* 100 */
F00:0284       	.2byte nullroutine ;0
               S01:000022C8:  A9 21
F00:0285       	.2byte nullroutine ;0
               S01:000022CA:  A9 21
F00:0286       	.2byte nullroutine ;0
               S01:000022CC:  A9 21
F00:0287       	.2byte nullroutine ;0
               S01:000022CE:  A9 21
F00:0288       	.2byte nullroutine ;0
               S01:000022D0:  A9 21
F00:0289       	.2byte nullroutine ;0
               S01:000022D2:  A9 21
F00:0290       	.2byte nullroutine ;0
               S01:000022D4:  A9 21
F00:0291       	.2byte nullroutine ;0
               S01:000022D6:  A9 21
F00:0292       	.2byte nullroutine ;0
               S01:000022D8:  A9 21
F00:0293       	.2byte nullroutine ;0
               S01:000022DA:  A9 21
F00:0294       #/* 110 */
F00:0295       	.2byte nullroutine ;0
               S01:000022DC:  A9 21
F00:0296       	.2byte nullroutine ;0
               S01:000022DE:  A9 21
F00:0297       	.2byte nullroutine ;0
               S01:000022E0:  A9 21
F00:0298       	.2byte nullroutine ;0
               S01:000022E2:  A9 21
F00:0299       	.2byte nullroutine ;0
               S01:000022E4:  A9 21
F00:0300       	.2byte nullroutine ;0
               S01:000022E6:  A9 21
F00:0301       	.2byte nullroutine ;0
               S01:000022E8:  A9 21
F00:0302       	.2byte nullroutine ;0
               S01:000022EA:  A9 21
F00:0303       	.2byte nullroutine ;0
               S01:000022EC:  A9 21
F00:0304       	.2byte nullroutine ;0
               S01:000022EE:  A9 21
F00:0305       #/* 120 */
F00:0306       	.2byte nullroutine ;0
               S01:000022F0:  A9 21
F00:0307       	.2byte nullroutine ;0
               S01:000022F2:  A9 21
F00:0308       	.2byte nullroutine ;0
               S01:000022F4:  A9 21
F00:0309       	.2byte nullroutine ;0
               S01:000022F6:  A9 21
F00:0310       	.2byte nullroutine ;0
               S01:000022F8:  A9 21
F00:0311       	.2byte nullroutine ;0
               S01:000022FA:  A9 21
F00:0312       	.2byte nullroutine ;0
               S01:000022FC:  A9 21
F00:0313       	.2byte nullroutine ;0
               S01:000022FE:  A9 21
F00:0314       
F00:0315       	ENDADDRESS:


Sections:
S01  seg2000


Sources:
F00  edit.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc


Symbols:
jumptable EXPR(8704=0x2200) UNUSED ABS 
decmsg EXPR(8642=0x21c2) UNUSED ABS 
incmsg EXPR(8632=0x21b8) UNUSED ABS 
nullroutine EXPR(8617=0x21a9) ABS 
 subCounter 1$ EXPR(8614=0x21a6) ABS 
 addCounter 1$ EXPR(8589=0x218d) ABS 
 getWriteAddress 3$ EXPR(8557=0x216d) ABS 
 interrupthandler 1$ EXPR(8538=0x215a) ABS 
addCounter EXPR(8567=0x2177) ABS 
Windex EXPR(8622=0x21ae) ABS 
getWriteAddress EXPR(8544=0x2160) ABS 
 interrupthandler 2$ EXPR(8537=0x2159) ABS 
interrupthandler EXPR(8503=0x2137) ABS 
subCounter EXPR(8592=0x2190) ABS 
buffer EXPR(8623=0x21af) ABS 
 getc 2$ EXPR(8469=0x2115) ABS 
Rindex EXPR(8621=0x21ad) ABS 
 getc 1$ EXPR(8497=0x2131) ABS 
Counter EXPR(8620=0x21ac) ABS 
exit EXPR(8438=0x20f6) ABS 
getc EXPR(8445=0x20fd) ABS 
 loop 1$ EXPR(8414=0x20de) UNUSED ABS 
available EXPR(8441=0x20f9) ABS 
loop EXPR(8406=0x20d6) ABS 
interruptvectors EXPR(8704=0x2200) ABS 
buffersize EXPR(9=0x9) 
printhexL EXPR(8395=0x20cb) UNUSED ABS 
setresetpage EXPR(8392=0x20c8) UNUSED ABS 
Div8 EXPR(8389=0x20c5) UNUSED ABS 
getmalloctable EXPR(8386=0x20c2) UNUSED ABS 
getcommandparams EXPR(8383=0x20bf) UNUSED ABS 
createProcess EXPR(8380=0x20bc) UNUSED ABS 
getfilename EXPR(8377=0x20b9) UNUSED ABS 
directorynextfile EXPR(8374=0x20b6) UNUSED ABS 
directoryopen EXPR(8371=0x20b3) UNUSED ABS 
hextobyte EXPR(8368=0x20b0) UNUSED ABS 
touppercase EXPR(8365=0x20ad) UNUSED ABS 
putc EXPR(8362=0x20aa) ABS 
strlen EXPR(8359=0x20a7) UNUSED ABS 
memset EXPR(8356=0x20a4) UNUSED ABS 
loadfile EXPR(8353=0x20a1) UNUSED ABS 
printhex EXPR(8350=0x209e) UNUSED ABS 
println EXPR(8347=0x209b) UNUSED ABS 
print EXPR(8344=0x2098) UNUSED ABS 
functionlookups EXPR(8343=0x2097) UNUSED ABS 
_main EXPR(8398=0x20ce) ABS 
printhexLadr EXPR(8396=0x20cc) ABS 
setresetpageadr EXPR(8393=0x20c9) ABS 
div8adr EXPR(8390=0x20c6) ABS 
getmalloctableadr EXPR(8387=0x20c3) ABS 
getcommandparamsadr EXPR(8384=0x20c0) ABS 
createProcessadr EXPR(8381=0x20bd) ABS 
getfilenameadr EXPR(8378=0x20ba) ABS 
directorynextfileadr EXPR(8375=0x20b7) ABS 
directoryopenadr EXPR(8372=0x20b4) ABS 
printlnadr EXPR(8348=0x209c) ABS 
hextobyteadr EXPR(8369=0x20b1) ABS 
touppercaseadr EXPR(8366=0x20ae) ABS 
putcadr EXPR(8363=0x20ab) ABS 
strlenadr EXPR(8360=0x20a8) ABS 
memsetadr EXPR(8357=0x20a5) ABS 
loadfileadr EXPR(8354=0x20a2) ABS 
printhexadr EXPR(8351=0x209f) ABS 
printadr EXPR(8345=0x2099) ABS 
ENDADDRESS EXPR(8960=0x2300) ABS 
 *current pc dummy* EXPR(8194=0x2002) INTERNAL PROT ABS 
NEXTNUMBER EXPR(22=0x16) UNUSED 
SETRESETPAGE EXPR(20=0x14) 
DIV8 EXPR(19=0x13) 
GETMALLOCTABLE EXPR(18=0x12) 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEXL EXPR(21=0x15) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) UNUSED 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
