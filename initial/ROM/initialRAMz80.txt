F00:0001       .equ SERIALPORT , 0x01
F00:0002       #define LOWORD(l) ((WORD)(l))
F00:0003       #define HIWORD(l) ((WORD)(((DWORD)(l) >> 16) & 0xFFFF))
F00:0004       #define LOBYTE(w) ((BYTE)(w))
F00:0005       #define HIBYTE(w) ((BYTE)(((WORD)(w) >> 8) & 0xFF))
F00:0006       
F00:0007       .macro HIBYTE www 
F00:0014       
F00:0015       
F00:0016       
F00:0017       	.org 0x800
F00:0018       	start:
F00:0019       	ld sp,0xffff
               S01:00000800:  31 FF FF
F00:0020       
F00:0021       	di
               S01:00000803:  F3
F00:0022       	ld hl,readymsg
               S01:00000804:  21 5C 08
F00:0023       	call print
               S01:00000807:  CD 1B 08
F00:0024       		;ld b, endlabel2-label2
F00:0025       		;ld c,SERIALPORT
F00:0026       		;otir
F00:0027       		
F00:0028       		im 2 ;/* interrupt mode 2*/
               S01:0000080A:  ED 5E
F00:0029       		ld a, jumptable/256 ;// hibyte
               S01:0000080C:  3E 09
F00:0030       		ld i,a
               S01:0000080E:  ED 47
F00:0031       		ei   ;#/* enable interrupts*/
               S01:00000810:  FB
F00:0032       
F00:0033       		ld hl,loadedmsg
               S01:00000811:  21 46 08
F00:0034       		call print
               S01:00000814:  CD 1B 08
F00:0035       
F00:0036       	again:	halt
               S01:00000817:  76
F00:0037       		jp again
               S01:00000818:  C3 17 08
F00:0038       		
F00:0039       		;// subroutines
F00:0040       	print: ;// expecting a zero terminated string
F00:0041       		push hl
               S01:0000081B:  E5
F00:0042       		push af
               S01:0000081C:  F5
F00:0043       		_$1:
F00:0044       			ld a,(hl)
               S01:0000081D:  7E
F00:0045       			cp 0
               S01:0000081E:  FE 00
F00:0046       			jr z,_$2
               S01:00000820:  28 06
F00:0047       			out (SERIALPORT),a
               S01:00000822:  D3 01
F00:0048       			inc hl
               S01:00000824:  23
F00:0049       			jp _$1
               S01:00000825:  C3 1D 08
F00:0050       _$2:			
F00:0051       		pop af
               S01:00000828:  F1
F00:0052       		pop hl
               S01:00000829:  E1
F00:0053       		ret
               S01:0000082A:  C9
F00:0054       
F00:0055       		;Display 8-bit number in hex.
F00:0056       		; 	ld a,0xaa
F00:0057       	;       call printhex
F00:0058       printhex:
F00:0059       
F00:0060       ; Input: a
F00:0061         push af
               S01:0000082B:  F5
F00:0062         ;// remove low nibble
F00:0063          rra
               S01:0000082C:  1F
F00:0064          rra
               S01:0000082D:  1F
F00:0065          rra
               S01:0000082E:  1F
F00:0066          rra
               S01:0000082F:  1F
F00:0067          call  _$
               S01:00000830:  CD 34 08
F00:0068          ;// restore low nibble
F00:0069          pop af
               S01:00000833:  F1
F00:0070          
F00:0071       _$:
F00:0072       	;// remove high nibble
F00:0073          and  0x0F
               S01:00000834:  E6 0F
F00:0074          add  a,0x90
               S01:00000836:  C6 90
F00:0075          ;; bcd adjust
F00:0076          daa
               S01:00000838:  27
F00:0077          adc  a,0x40
               S01:00000839:  CE 40
F00:0078          daa
               S01:0000083B:  27
F00:0079          out (SERIALPORT),a 
               S01:0000083C:  D3 01
F00:0080          ret
               S01:0000083E:  C9
F00:0081       
F00:0082       
F00:0083       		;// end subroutines
F00:0084       
F00:0085       	
F00:0086       		
F00:0087       	serialport: ;#/* interrupt 2, echo what was sent*/
F00:0088       	#	di
F00:0089       		#ld a,'*'
F00:0090       		#out (SERIALPORT),a
F00:0091       
F00:0092       		in a,(SERIALPORT)
               S01:0000083F:  DB 01
F00:0093       		out (SERIALPORT),a
               S01:00000841:  D3 01
F00:0094       		ei
               S01:00000843:  FB
F00:0095       		reti
               S01:00000844:  ED 4D
F00:0096       	loadedmsg: .string "my Z80 Ram loaded.\r\n\0"
               S01:00000846:  6D 79 20 5A 38 30 20 52 61 6D 20 6C 6F 61 64 65
               S01:00000856:  64 2E 0D 0A 00
F00:0097       	readymsg: .string "_ready\r\n\0"
               S01:0000085C:  5F 72 65 61 64 79 0D 0A 00
F00:0098       
F00:0099       	; I could set the org address but I'm going to let that move as needed	.org 0x????
F00:0100       	.org 0x900-start
F00:0101       	.align 2
F00:0102       	jumptable:
F00:0103       	.2byte serialport ;0
               S01:00000900:  3F 08
F00:0104       	.2byte serialport ;1
               S01:00000902:  3F 08
F00:0105       	.2byte serialport ;2
               S01:00000904:  3F 08
F00:0106       	.2byte serialport ;3
               S01:00000906:  3F 08
F00:0107       
F00:0108       	
F00:0109       	


Sections:
S01  seg800


Sources:
F00  initialRAMz80.s


Symbols:
serialport EXPR(2111=0x83f) ABS 
_$ EXPR(2100=0x834) ABS 
printhex EXPR(2091=0x82b) UNUSED ABS 
_$2 EXPR(2088=0x828) ABS 
_$1 EXPR(2077=0x81d) ABS 
again EXPR(2071=0x817) ABS 
loadedmsg EXPR(2118=0x846) ABS 
jumptable EXPR(2304=0x900) ABS 
print EXPR(2075=0x81b) ABS 
readymsg EXPR(2140=0x85c) ABS 
start EXPR(2048=0x800) ABS 
SERIALPORT EXPR(1=0x1) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
