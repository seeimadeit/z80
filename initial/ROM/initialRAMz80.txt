F00:0001       
F00:0002       
F00:0003       
F00:0004       #define LOWORD(l) ((WORD)(l))
F00:0005       #define HIWORD(l) ((WORD)(((DWORD)(l) >> 16) & 0xFFFF))
F00:0006       #define LOBYTE(w) ((BYTE)(w))
F00:0007       #define HIBYTE(w) ((BYTE)(((WORD)(w) >> 8) & 0xFF))
F00:0008       
F00:0009       .include "SDCARD.inc"
F01:0001       .equ SDCARD,0x05
F01:0002       ; ******* SDCARD *********
F01:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F01:0004       .equ FILENAMECLEAR ,1
F01:0005       
F01:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F01:0007       .equ OPEN ,2
F01:0008       
F01:0009       ; z80 out - close: no return value
F01:0010       .equ CLOSE ,3
F01:0011       
F01:0012       ; z80 out + out - filenameappend: no return value
F01:0013       .equ FILENAMEAPPEND ,4
F01:0014       
F01:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F01:0016       .equ READNEXTBYTE ,5
F01:0017       
F01:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F01:0019       .equ AVAILABLE ,6
F01:0020       
F01:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F01:0022       .equ OPENWRITE,7
F01:0023       
F01:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F01:0025       .equ WRITEBYTE,8
F01:0026       
F01:0027       ;#===============================
F01:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F01:0029       .equ GETNAME,0x20
F01:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F01:0031       .equ NAMEAVAILABLE,0x21
F01:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F01:0033       .equ OPENDIRECTORY,0x31
F01:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F01:0035       .equ NEXTFILE,0x32
F00:0010       .include "Routines.inc"
F02:0001       
F02:0002       # address where user programs load
F02:0003       .include "SERIAL.inc"
F03:0001       .equ SERIALPORT , 0x01
F03:0002       .equ SERIALPORT2, 0x02
F03:0003       
F02:0004       .include "SDCARD.inc"
F04:0001       .equ SDCARD,0x05
F04:0002       ; ******* SDCARD *********
F04:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F04:0004       .equ FILENAMECLEAR ,1
F04:0005       
F04:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F04:0007       .equ OPEN ,2
F04:0008       
F04:0009       ; z80 out - close: no return value
F04:0010       .equ CLOSE ,3
F04:0011       
F04:0012       ; z80 out + out - filenameappend: no return value
F04:0013       .equ FILENAMEAPPEND ,4
F04:0014       
F04:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F04:0016       .equ READNEXTBYTE ,5
F04:0017       
F04:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F04:0019       .equ AVAILABLE ,6
F04:0020       
F04:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F04:0022       .equ OPENWRITE,7
F04:0023       
F04:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F04:0025       .equ WRITEBYTE,8
F04:0026       
F04:0027       ;#===============================
F04:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F04:0029       .equ GETNAME,0x20
F04:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F04:0031       .equ NAMEAVAILABLE,0x21
F04:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F04:0033       .equ OPENDIRECTORY,0x31
F04:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F04:0035       .equ NEXTFILE,0x32
F02:0005       .equ commandMemory, 0x1000
F02:0006       .equ userMemory,0x2000
F02:0007       
F02:0008       .equ TRUE, 1
F02:0009       .equ FALSE, 0
F02:0010       
F02:0011       # the only fixed address (i hope), use it to get the address of utilities methods
F02:0012       # ld a, PRINT
F02:0013       # call GetAddress
F02:0014       # address for print loaded into hl
F02:0015       # the value in hl can change between os versions so do not hard code the values
F02:0016       
F02:0017       .equ GetAddress, 0x0804
F02:0018       .equ PRINT,		1
F02:0019       .equ PRINTLN,	9
F02:0020       .equ PRINTHEX,	2
F02:0021       .equ LOADFILE,	3
F02:0022       .equ MEMSET,	4
F02:0023       .equ STRLEN,	5
F02:0024       .equ PUTC,		6
F02:0025       .equ TOUPPERCASE,7
F02:0026       .equ HEXTOBYTE,	8
F02:0027       .equ STRNCPY,10
F02:0028       .equ CREATEPROCESS,16
F02:0029       .equ GETCOMMANDPARAMS,17
F02:0030       # filesystem - primitive functions, probably going to change 
F02:0031       .equ DIRECTORYOPEN,13
F02:0032       .equ DIRECTORYNEXTFILE,14
F02:0033       .equ GETFILENAME,15
F02:0034       
F02:0035       
F02:0036       
F02:0037       .equ NEXTNUMBER,18
F02:0038       
F02:0039       
F00:0011       
F00:0012       
F00:0013       	.org 0x800
F00:0014       	jp boot
               S01:00000800:  C3 07 08
F00:0015       	.align 2
F00:0016       	start:
F00:0017       	jp loadaddress
               S01:00000804:  C3 1F 0A
F00:0018       	
F00:0019       boot:
F00:0020       	ld sp,0xffff
               S01:00000807:  31 FF FF
F00:0021       
F00:0022       	di
               S01:0000080A:  F3
F00:0023       	ld hl,readymsg
               S01:0000080B:  21 D0 0A
F00:0024       	call print
               S01:0000080E:  CD 9B 08
F00:0025       		;ld b, endlabel2-label2
F00:0026       		;ld c,SERIALPORT
F00:0027       		;otir
F00:0028       		
F00:0029       		im 2 ;/* interrupt mode 2*/
               S01:00000811:  ED 5E
F00:0030       		ld a, jumptable/256 ;// hibyte
               S01:00000813:  3E 0C
F00:0031       		ld i,a
               S01:00000815:  ED 47
F00:0032       		ei   ;#/* enable interrupts*/
               S01:00000817:  FB
F00:0033       
F00:0034       		ld hl,loadedmsg
               S01:00000818:  21 C7 0A
F00:0035       		call print
               S01:0000081B:  CD 9B 08
F00:0036       		#== ******* Command processor Loop ******** ==#
F00:0037       	commandprocessloop:	
F00:0038       		ld hl,commandprocessor
               S01:0000081E:  21 DF 0A
F00:0039       		ld de,commandMemory
               S01:00000821:  11 00 10
F00:0040       		call loadFILE
               S01:00000824:  CD D0 08
F00:0041       		cp 0
               S01:00000827:  FE 00
F00:0042       		jp nz,errorloading
               S01:00000829:  C2 38 08
F00:0043       		ld hl,0
               S01:0000082C:  21 00 00
F00:0044       		call println
               S01:0000082F:  CD 8D 08
F00:0045       		call commandMemory # run the file just loaded.
               S01:00000832:  CD 00 10
F00:0046       		jp commandprocessloop
               S01:00000835:  C3 1E 08
F00:0047       
F00:0048       	errorloading:
F00:0049       		call printhex
               S01:00000838:  CD B7 08
F00:0050       		ld hl,errorloadingmsg
               S01:0000083B:  21 E3 0A
F00:0051       		call println
               S01:0000083E:  CD 8D 08
F00:0052       		jp commandprocessloop
               S01:00000841:  C3 1E 08
F00:0053       		#======================suboutines===============================================#
F00:0054       	# === memset === #
F00:0055       		# ld hl, address to start
F00:0056       		# ld a,0 byte to write into address
F00:0057       		# ld b,1 count of bytes to write
F00:0058       	memset:
F00:0059       		push af
               S01:00000844:  F5
F00:0060       		push hl
               S01:00000845:  E5
F00:0061       	_metset$1:
F00:0062       		ld (hl),a
               S01:00000846:  77
F00:0063       		inc hl
               S01:00000847:  23
F00:0064       		djnz _metset$1
               S01:00000848:  10 FC
F00:0065       		pop hl
               S01:0000084A:  E1
F00:0066       		pop af
               S01:0000084B:  F1
F00:0067       		ret
               S01:0000084C:  C9
F00:0068       	#== strlen ==#
F00:0069       		# ld hl, address to start
F00:0070       		# call strlen
F00:0071       		# return len in b
F00:0072       	strlen:
F00:0073       		push hl
               S01:0000084D:  E5
F00:0074       		push af
               S01:0000084E:  F5
F00:0075       	
F00:0076       		ld b,0
               S01:0000084F:  06 00
F00:0077       	_strlen$:
F00:0078       		ld a,(hl)
               S01:00000851:  7E
F00:0079       		cp 0
               S01:00000852:  FE 00
F00:0080       		jp z, strlenexit
               S01:00000854:  CA 5C 08
F00:0081       		inc b
               S01:00000857:  04
F00:0082       		inc hl
               S01:00000858:  23
F00:0083       		jp _strlen$:
               S01:00000859:  C3 51 08
F00:0084       	strlenexit:
F00:0085       	;#	ld a,b
F00:0086       	;#	call printhex
F00:0087       		pop af
               S01:0000085C:  F1
F00:0088       		pop hl
               S01:0000085D:  E1
F00:0089       		ret
               S01:0000085E:  C9
F00:0090       
F00:0091       	#=== strncpy ==#
F00:0092       	;# copy from source into destination size bytes. no validation is done.
F00:0093       	;# ld hl, source
F00:0094       	;# ld de, destination
F00:0095       	;# ld bc, size
F00:0096       
F00:0097       	strncpy:
F00:0098       		ldir
               S01:0000085F:  ED B0
F00:0099       		ret
               S01:00000861:  C9
F00:0100       
F00:0101       	# === strcpy == #
F00:0102       	;# copy from source into destination string is zero terminated, no validation is done
F00:0103       	;# ld hl,source
F00:0104       	;# ld de,destination
F00:0105       	;# call strcpy
F00:0106       	strcpy:
F00:0107       		push af
               S01:00000862:  F5
F00:0108       		push hl
               S01:00000863:  E5
F00:0109       		push de
               S01:00000864:  D5
F00:0110       	_1$:
F00:0111       		ld a,(hl)
               S01:00000865:  7E
F00:0112       		ld (de),a ;# copy the potential zero before we test because we will need it
               S01:00000866:  12
F00:0113       		cp 0
               S01:00000867:  FE 00
F00:0114       		jp z, _strcpyexit$1
               S01:00000869:  CA 71 08
F00:0115       
F00:0116       		inc de
               S01:0000086C:  13
F00:0117       		inc hl
               S01:0000086D:  23
F00:0118       		jp _1$
               S01:0000086E:  C3 65 08
F00:0119       	
F00:0120       	_strcpyexit$1:
F00:0121       		pop de
               S01:00000871:  D1
F00:0122       		pop hl
               S01:00000872:  E1
F00:0123       		pop af
               S01:00000873:  F1
F00:0124       		ret
               S01:00000874:  C9
F00:0125       		# === touppercase ==#
F00:0126       	;#		ld hl,cmd  - zero terminated string
F00:0127       	;#		call touppercase
F00:0128       	;#		ret
F00:0129       	;# the P flag means the comparison was Positive
F00:0130       	;# the M flags means the comparision was Negative
F00:0131       	;# the Z flag means the comparison was equal
F00:0132       	;# the NZ flag means the comparison was not equal.
F00:0133       	;# where:
F00:0134       	;#    A = x  P Positive
F00:0135       	;#			 Z Zero
F00:0136       	;#
F00:0137       	;#    A < x	 M Negative
F00:0138       	;#			 NZ Not zero
F00:0139       	;#
F00:0140       	;#	  A > x  P Positive
F00:0141       	;#			 NZ Not zero
F00:0142       	;#
F00:0143       	;# so a test for JP P,meansSameOrGreater
F00:0144       
F00:0145       
F00:0146       touppercase:
F00:0147       	push af
               S01:00000875:  F5
F00:0148       	push hl
               S01:00000876:  E5
F00:0149       	
F00:0150       goagain:
F00:0151       	ld a,(hl)
               S01:00000877:  7E
F00:0152       	cp 'a'
               S01:00000878:  FE 61
F00:0153       	jp p, converttouppercaseletter ;# is same or greater then 'a'
               S01:0000087A:  F2 80 08
F00:0154       ;# the instructions commented out are implied
F00:0155       	;#cp 'A'
F00:0156       	;#jp p, nextcharacter ;# is same or greater
F00:0157       	;#cp '0'
F00:0158       	;#jp p, nextcharacter
F00:0159       	;# jp nextcharacter replaces the above 4 lines
F00:0160       	jp nextcharacter
               S01:0000087D:  C3 83 08
F00:0161       
F00:0162       converttouppercaseletter:
F00:0163       	sub 32
               S01:00000880:  D6 20
F00:0164       	ld (hl),a
               S01:00000882:  77
F00:0165       nextcharacter:
F00:0166       	inc hl
               S01:00000883:  23
F00:0167       	ld a,(hl)
               S01:00000884:  7E
F00:0168       	cp 0
               S01:00000885:  FE 00
F00:0169       	jp nz,goagain	
               S01:00000887:  C2 77 08
F00:0170       
F00:0171       	pop hl
               S01:0000088A:  E1
F00:0172       	pop af
               S01:0000088B:  F1
F00:0173       
F00:0174       	ret
               S01:0000088C:  C9
F00:0175       	# === PRINTLN == #
F00:0176       	println: ;// same as print but appends CRLF
F00:0177       	call print
               S01:0000088D:  CD 9B 08
F00:0178       	push hl
               S01:00000890:  E5
F00:0179       	push af
               S01:00000891:  F5
F00:0180       	ld hl,crlf
               S01:00000892:  21 C4 0A
F00:0181       	call print
               S01:00000895:  CD 9B 08
F00:0182       	pop af
               S01:00000898:  F1
F00:0183       	pop hl
               S01:00000899:  E1
F00:0184       	ret
               S01:0000089A:  C9
F00:0185       
F00:0186       	# === PRINT === #
F00:0187       	print: ;// expecting a zero terminated string
F00:0188       		push hl
               S01:0000089B:  E5
F00:0189       		push af
               S01:0000089C:  F5
F00:0190       		;# hl can be null so check for that first
F00:0191       		ld a,h
               S01:0000089D:  7C
F00:0192       		cp 0
               S01:0000089E:  FE 00
F00:0193       		jp nz,_$1 ;# hibyte not null, no just print it
               S01:000008A0:  C2 A9 08
F00:0194       		ld a,l
               S01:000008A3:  7D
F00:0195       		cp 0
               S01:000008A4:  FE 00
F00:0196       		jp z,_$2 ;# lobyte is null and hibyte is null so just exit
               S01:000008A6:  CA B4 08
F00:0197       		_$1:
F00:0198       			ld a,(hl)
               S01:000008A9:  7E
F00:0199       			cp 0
               S01:000008AA:  FE 00
F00:0200       			jr z,_$2
               S01:000008AC:  28 06
F00:0201       			out (SERIALPORT),a
               S01:000008AE:  D3 01
F00:0202       			inc hl
               S01:000008B0:  23
F00:0203       			jp _$1
               S01:000008B1:  C3 A9 08
F00:0204       _$2:			
F00:0205       		pop af
               S01:000008B4:  F1
F00:0206       		pop hl
               S01:000008B5:  E1
F00:0207       		ret
               S01:000008B6:  C9
F00:0208       
F00:0209       # === PRINTHEX === #
F00:0210       		;Display 8-bit number in hex.
F00:0211       		; 	ld a,0xaa
F00:0212       	;       call printhex
F00:0213       printhex:
F00:0214       
F00:0215       ; Input: a
F00:0216       
F00:0217         push af
               S01:000008B7:  F5
F00:0218         ;// remove low nibble
F00:0219          rra
               S01:000008B8:  1F
F00:0220          rra
               S01:000008B9:  1F
F00:0221          rra
               S01:000008BA:  1F
F00:0222          rra
               S01:000008BB:  1F
F00:0223          call  _$
               S01:000008BC:  CD C0 08
F00:0224          ;// restore low nibble
F00:0225          pop af
               S01:000008BF:  F1
F00:0226          
F00:0227       _$:
F00:0228       	push af
               S01:000008C0:  F5
F00:0229       	;// remove high nibble
F00:0230          and  0x0F
               S01:000008C1:  E6 0F
F00:0231          add  a,0x90
               S01:000008C3:  C6 90
F00:0232          ;; bcd adjust
F00:0233          daa
               S01:000008C5:  27
F00:0234          adc  a,0x40
               S01:000008C6:  CE 40
F00:0235          daa
               S01:000008C8:  27
F00:0236          out (SERIALPORT),a 
               S01:000008C9:  D3 01
F00:0237          pop af
               S01:000008CB:  F1
F00:0238          ret
               S01:000008CC:  C9
F00:0239       
F00:0240       # === putc ===== #
F00:0241       ;# ld a,'*'
F00:0242       ;# call putc
F00:0243       ;# no return value
F00:0244       putc:
F00:0245       		out (SERIALPORT),a
               S01:000008CD:  D3 01
F00:0246       		ret
               S01:000008CF:  C9
F00:0247       
F00:0248       		;// end subroutines
F00:0249       # === loadFILE === #
F00:0250       ; ld hl, filename (zero terminated)
F00:0251       ; ld de, memory address to load file into
F00:0252       ; call loadFILE
F00:0253       ; returns 
F00:0254       ;	HL
F00:0255       ;		not preserved
F00:0256       ;	A register 
F00:0257       ;			2 = failed to open the file
F00:0258       ;			0 = if file loaded into memory
F00:0259       ;	DE register pair
F00:0260       ;			count of bytes loaded
F00:0261       loadFILE:
F00:0262       	push af
               S01:000008D0:  F5
F00:0263       	push de ; save de for later
               S01:000008D1:  D5
F00:0264       	call sizereset
               S01:000008D2:  CD 3D 09
F00:0265       		; try to open the SD card and read some data
F00:0266       		ld a,FILENAMECLEAR ; // filenameclear
               S01:000008D5:  3E 01
F00:0267       		out (SDCARD),a
               S01:000008D7:  D3 05
F00:0268       
F00:0269       
F00:0270       ;
F00:0271       _$getnextchar:
F00:0272       		ld a,(hl)
               S01:000008D9:  7E
F00:0273       		cp 0
               S01:000008DA:  FE 00
F00:0274       		jp z, _$openfile #; if filename character is null we have finished
               S01:000008DC:  CA EA 08
F00:0275       		ld a,FILENAMEAPPEND
               S01:000008DF:  3E 04
F00:0276       		out (SDCARD),a ; // filenameappend
               S01:000008E1:  D3 05
F00:0277       		ld a,(hl)
               S01:000008E3:  7E
F00:0278       		out (SDCARD),a
               S01:000008E4:  D3 05
F00:0279       		;#out (SERIALPORT),a
F00:0280       		inc hl
               S01:000008E6:  23
F00:0281       		jp _$getnextchar
               S01:000008E7:  C3 D9 08
F00:0282       
F00:0283       _$openfile:
F00:0284       #openfile will return 1 if the file was opened, 0 if it failed to open
F00:0285       		ld a,OPEN	;// Open
               S01:000008EA:  3E 02
F00:0286       		out (SDCARD),a
               S01:000008EC:  D3 05
F00:0287       		in a,(SDCARD)
               S01:000008EE:  DB 05
F00:0288       		pop hl ; get load address - must pop the stack before returning
               S01:000008F0:  E1
F00:0289       		cp 0
               S01:000008F1:  FE 00
F00:0290       		jp nz,available
               S01:000008F3:  C2 FD 08
F00:0291       		pop af ;# a flag not needed now
               S01:000008F6:  F1
F00:0292       		call sizeloaded
               S01:000008F7:  CD 2E 09
F00:0293       		ld a,2 ;we have an error trying to open the file.
               S01:000008FA:  3E 02
F00:0294       		ret
               S01:000008FC:  C9
F00:0295       		
F00:0296       available:
F00:0297       	#available will return 1 if there is data to read, 0 if no data to read
F00:0298       		ld a, AVAILABLE ; // available
               S01:000008FD:  3E 06
F00:0299       		out (SDCARD),a
               S01:000008FF:  D3 05
F00:0300       		in a,(SDCARD) ;// read the value from the device
               S01:00000901:  DB 05
F00:0301       	;	ld b,a ; // going to malipulate the a register so save it as not to destroy the A result
F00:0302       	;	add a,'0' ;// make it printable
F00:0303       	;	out (SERIALPORT),a ;// print response
F00:0304       	;	ld a,b
F00:0305       		cp 0 ;// compare the A reg returned by the device
               S01:00000903:  FE 00
F00:0306       		jp nz,_$nextbyte
               S01:00000905:  C2 1D 09
F00:0307       		pop af ;# restore the af registers because it will tell me if I need to zero terminate the loaded file
               S01:00000908:  F1
F00:0308       		cp 1
               S01:00000909:  FE 01
F00:0309       		jp nz,_1$
               S01:0000090B:  C2 11 09
F00:0310       		;# the hl register pair contains the last address we need to write a zero here because the user wants it
F00:0311       		ld a,0
               S01:0000090E:  3E 00
F00:0312       		ld (hl),a ;# zero terminated
               S01:00000910:  77
F00:0313       
F00:0314       _1$:
F00:0315       		ld hl,0
               S01:00000911:  21 00 00
F00:0316       		call println
               S01:00000914:  CD 8D 08
F00:0317       		call sizeloaded
               S01:00000917:  CD 2E 09
F00:0318       		ld a,0
               S01:0000091A:  3E 00
F00:0319       		ret
               S01:0000091C:  C9
F00:0320       _$nextbyte:
F00:0321       		;// if we get here then there is data to read
F00:0322       		ld a,READNEXTBYTE
               S01:0000091D:  3E 05
F00:0323       		out (SDCARD),a ;// read nextbyte
               S01:0000091F:  D3 05
F00:0324       		in a,(SDCARD)
               S01:00000921:  DB 05
F00:0325       		ld (hl),a ; // store byte in RAM (OSLOAD)
               S01:00000923:  77
F00:0326       		inc hl 
               S01:00000924:  23
F00:0327       		ld a,'#'
               S01:00000925:  3E 23
F00:0328       		out (SERIALPORT),a ;// just echo it back for now
               S01:00000927:  D3 01
F00:0329       		call sizeincrement
               S01:00000929:  CD 50 09
F00:0330       		jr available ;
               S01:0000092C:  18 CF
F00:0331       
F00:0332       sizeloaded:
F00:0333       	push ix
               S01:0000092E:  DD E5
F00:0334       	ld ix,losize
               S01:00000930:  DD 21 68 09
F00:0335       	ld e,(ix)
               S01:00000934:  DD 5E 00
F00:0336       	ld d,(ix+1)
               S01:00000937:  DD 56 01
F00:0337       	pop ix
               S01:0000093A:  DD E1
F00:0338       	ret
               S01:0000093C:  C9
F00:0339       sizereset:
F00:0340       	push ix
               S01:0000093D:  DD E5
F00:0341       	push af
               S01:0000093F:  F5
F00:0342       	ld a,0
               S01:00000940:  3E 00
F00:0343       	ld ix,losize
               S01:00000942:  DD 21 68 09
F00:0344       	ld (ix),a
               S01:00000946:  DD 77 00
F00:0345       	ld (ix+1),a
               S01:00000949:  DD 77 01
F00:0346       	pop af
               S01:0000094C:  F1
F00:0347       	pop ix
               S01:0000094D:  DD E1
F00:0348       	ret
               S01:0000094F:  C9
F00:0349       sizeincrement:
F00:0350       	push ix
               S01:00000950:  DD E5
F00:0351       	push hl
               S01:00000952:  E5
F00:0352       
F00:0353       	ld ix,losize
               S01:00000953:  DD 21 68 09
F00:0354       	ld l,(ix)
               S01:00000957:  DD 6E 00
F00:0355       	ld h,(ix+1)
               S01:0000095A:  DD 66 01
F00:0356       	inc HL
               S01:0000095D:  23
F00:0357       	ld (ix),l
               S01:0000095E:  DD 75 00
F00:0358       	ld (ix+1),h
               S01:00000961:  DD 74 01
F00:0359       
F00:0360       	pop hl
               S01:00000964:  E1
F00:0361       	pop ix
               S01:00000965:  DD E1
F00:0362       	ret
               S01:00000967:  C9
F00:0363       
F00:0364       losize: .byte 0
               S01:00000968:  00
F00:0365       hisize: .byte 0
               S01:00000969:  00
F00:0366       
F00:0367       ;# ====== hextobyte ==========
F00:0368       ;#    load HL registers with the 2 ascii characters of a hexadecimal value
F00:0369       ;# note routine does not validate the inputs.
F00:0370       ;# alphabeta expected in uppercase
F00:0371       ;#	ld h,'c'
F00:0372       ;#	ld l,'3'
F00:0373       ;#	call hextobyte
F00:0374       ;#	value stored in A register
F00:0375       
F00:0376       
F00:0377       hextobyte:
F00:0378       	push hl
               S01:0000096A:  E5
F00:0379       	push bc
               S01:0000096B:  C5
F00:0380       	ld a,l ;# prepare the low nibble
               S01:0000096C:  7D
F00:0381       	call workhextobyte
               S01:0000096D:  CD 7D 09
F00:0382       	ld b,a ;# save it later
               S01:00000970:  47
F00:0383       	ld a,h ;# prepare the high nibble
               S01:00000971:  7C
F00:0384       	call workhextobyte
               S01:00000972:  CD 7D 09
F00:0385       	rla ;# a contains the result from the high nibble
               S01:00000975:  17
F00:0386       	rla ;# so move the nibble to make room for the low nibble
               S01:00000976:  17
F00:0387       	rla
               S01:00000977:  17
F00:0388       	rla
               S01:00000978:  17
F00:0389       	or b ;# add the low nibble
               S01:00000979:  B0
F00:0390       
F00:0391       	pop bc
               S01:0000097A:  C1
F00:0392       	pop hl
               S01:0000097B:  E1
F00:0393       	ret
               S01:0000097C:  C9
F00:0394       workhextobyte:
F00:0395       	cp 'A' ;# alphabeta sub 55
               S01:0000097D:  FE 41
F00:0396       	jp m,hextobytenumber
               S01:0000097F:  FA 85 09
F00:0397       	sub 55
               S01:00000982:  D6 37
F00:0398       	ret
               S01:00000984:  C9
F00:0399       hextobytenumber:
F00:0400       	sub 48 ;# if number sub 48
               S01:00000985:  D6 30
F00:0401       	ret
               S01:00000987:  C9
F00:0402       
F00:0403       	;# === directory open === #
F00:0404       
F00:0405       directoryopen:
F00:0406       	push af
               S01:00000988:  F5
F00:0407       	ld a,OPENDIRECTORY
               S01:00000989:  3E 31
F00:0408       	out (SDCARD),a
               S01:0000098B:  D3 05
F00:0409       	pop af
               S01:0000098D:  F1
F00:0410       	ret
               S01:0000098E:  C9
F00:0411       	;# === nextfile === #
F00:0412       nextfile:
F00:0413       	push af
               S01:0000098F:  F5
F00:0414       	ld a,NEXTFILE
               S01:00000990:  3E 32
F00:0415       	out (SDCARD),a
               S01:00000992:  D3 05
F00:0416       	pop af
               S01:00000994:  F1
F00:0417       	ret
               S01:00000995:  C9
F00:0418       	;# === getfilename or currently open file ===#
F00:0419       	;# ld hl,storagelocation - for the filename
F00:0420       	;# call getfilename
F00:0421       
F00:0422       getfilename:
F00:0423       	push af
               S01:00000996:  F5
F00:0424       	push hl
               S01:00000997:  E5
F00:0425       	ld a,GETNAME
               S01:00000998:  3E 20
F00:0426       	out (SDCARD),a
               S01:0000099A:  D3 05
F00:0427       
F00:0428       _getfilename$1:
F00:0429       	ld a,NAMEAVAILABLE
               S01:0000099C:  3E 21
F00:0430       	out (SDCARD),a
               S01:0000099E:  D3 05
F00:0431       	in a,(SDCARD)
               S01:000009A0:  DB 05
F00:0432       	cp 0
               S01:000009A2:  FE 00
F00:0433       	jp z, _exitgetfilename
               S01:000009A4:  CA AC 09
F00:0434       
F00:0435       	ld (hl),a
               S01:000009A7:  77
F00:0436       	inc hl
               S01:000009A8:  23
F00:0437       	
F00:0438       	jp _getfilename$1
               S01:000009A9:  C3 9C 09
F00:0439       
F00:0440       _exitgetfilename:
F00:0441       	ld a,0
               S01:000009AC:  3E 00
F00:0442       	ld (hl),a
               S01:000009AE:  77
F00:0443       	pop hl
               S01:000009AF:  E1
F00:0444       	pop af
               S01:000009B0:  F1
F00:0445       	ret
               S01:000009B1:  C9
F00:0446       
F00:0447       	# === createProcess == #
F00:0448       	;# stack - note the example below is using the registers as an example, it really don't matter
F00:0449       	;# which register pair put that data on the stack
F00:0450       	;# push hl,program - zero terminated
F00:0451       	;# push de,commandline - zero terminated
F00:0452       	;# call createProcess
F00:0453       	;# that should do for now
F00:0454       	createProcess: ;# this is messy need to have another go at this
F00:0455       		ld a,0
               S01:000009B2:  3E 00
F00:0456       		call printhex
               S01:000009B4:  CD B7 08
F00:0457       
F00:0458       		pop hl ;# get the return address
               S01:000009B7:  E1
F00:0459       		exx ;# exchange with other registers
               S01:000009B8:  D9
F00:0460       
F00:0461       		ld de,userMemory-50 ;# whooa
               S01:000009B9:  11 CE 1F
F00:0462       		;# copy the command params
F00:0463       		pop hl ;# get the command params
               S01:000009BC:  E1
F00:0464       		ld a,1
               S01:000009BD:  3E 01
F00:0465       		call printhex
               S01:000009BF:  CD B7 08
F00:0466       
F00:0467       		call strcpy
               S01:000009C2:  CD 62 08
F00:0468       		ld a,2
               S01:000009C5:  3E 02
F00:0469       		call printhex
               S01:000009C7:  CD B7 08
F00:0470       		push hl
               S01:000009CA:  E5
F00:0471       		ld hl,thecommandlinemsg
               S01:000009CB:  21 0A 0A
F00:0472       		call println
               S01:000009CE:  CD 8D 08
F00:0473       		pop hl
               S01:000009D1:  E1
F00:0474       		call println ;# print command params
               S01:000009D2:  CD 8D 08
F00:0475       
F00:0476       		ld a,3
               S01:000009D5:  3E 03
F00:0477       		call printhex
               S01:000009D7:  CD B7 08
F00:0478       
F00:0479       		pop hl ;# get the program
               S01:000009DA:  E1
F00:0480       		push HL
               S01:000009DB:  E5
F00:0481       		ld hl,theprocessmsg
               S01:000009DC:  21 01 0A
F00:0482       		call println
               S01:000009DF:  CD 8D 08
F00:0483       		pop hl
               S01:000009E2:  E1
F00:0484       		call println ;# print program name
               S01:000009E3:  CD 8D 08
F00:0485       		ld de,userMemory
               S01:000009E6:  11 00 20
F00:0486       		ld a,4
               S01:000009E9:  3E 04
F00:0487       		call printhex
               S01:000009EB:  CD B7 08
F00:0488       
F00:0489       		call loadFILE
               S01:000009EE:  CD D0 08
F00:0490       		cp 0
               S01:000009F1:  FE 00
F00:0491       		jp nz, _createProcesserr$1
               S01:000009F3:  C2 FC 09
F00:0492       		exx ;# restore the other original registers
               S01:000009F6:  D9
F00:0493       		push hl ; # restore the return address
               S01:000009F7:  E5
F00:0494       		call userMemory
               S01:000009F8:  CD 00 20
F00:0495       		ret
               S01:000009FB:  C9
F00:0496       _createProcesserr$1:
F00:0497       		push af
               S01:000009FC:  F5
F00:0498       		exx ;# restore the other original registers
               S01:000009FD:  D9
F00:0499       		pop af
               S01:000009FE:  F1
F00:0500       		push hl ; # restore the return address
               S01:000009FF:  E5
F00:0501       		ret
               S01:00000A00:  C9
F00:0502       
F00:0503       theprocessmsg: .string "process:"
               S01:00000A01:  70 72 6F 63 65 73 73 3A
F00:0504       thecommandlinemsg: .string "params:"
               S01:00000A0A:  70 61 72 61 6D 73 3A
F00:0505       
F00:0506       	# === getcomandline == #
F00:0507       	;# ld hl,buffer - address of where to copy the data
F00:0508       	;# call getcommandline
F00:0509       	;# returns zero termined string at buffer 
F00:0510       getcommandparams:
F00:0511       	push de
               S01:00000A12:  D5
F00:0512       	push hl
               S01:00000A13:  E5
F00:0513       	push hl ;# save hl to move into de
               S01:00000A14:  E5
F00:0514       	pop de ;# load hl into de
               S01:00000A15:  D1
F00:0515       	ld hl,userMemory-50
               S01:00000A16:  21 CE 1F
F00:0516       	call strcpy
               S01:00000A19:  CD 62 08
F00:0517       	pop hl
               S01:00000A1C:  E1
F00:0518       	pop de
               S01:00000A1D:  D1
F00:0519       	ret
               S01:00000A1E:  C9
F00:0520       
F00:0521       ;================================
F00:0522       ; # === loadaddress == #
F00:0523       ; ld a,x - where x = instruction id
F00:0524       ;				id = 1, print
F00:0525       ;					 2, printhex
F00:0526       ;					3,loadFILE
F00:0527       loadaddress:
F00:0528       	cp PRINT
               S01:00000A1F:  FE 01
F00:0529       	jp nz,_loadaddress$2
               S01:00000A21:  C2 28 0A
F00:0530       	ld hl,print
               S01:00000A24:  21 9B 08
F00:0531       	ret
               S01:00000A27:  C9
F00:0532       _loadaddress$2:
F00:0533       	cp PRINTHEX
               S01:00000A28:  FE 02
F00:0534       	jp nz,_loadaddress$3
               S01:00000A2A:  C2 31 0A
F00:0535       	ld hl,printhex
               S01:00000A2D:  21 B7 08
F00:0536       	ret
               S01:00000A30:  C9
F00:0537       _loadaddress$3:
F00:0538       	cp LOADFILE
               S01:00000A31:  FE 03
F00:0539       	jp nz,_loadaddress$4
               S01:00000A33:  C2 3A 0A
F00:0540       	ld hl,loadFILE
               S01:00000A36:  21 D0 08
F00:0541       	ret
               S01:00000A39:  C9
F00:0542       _loadaddress$4:
F00:0543       	cp MEMSET
               S01:00000A3A:  FE 04
F00:0544       	jp nz,_loadaddress$5
               S01:00000A3C:  C2 43 0A
F00:0545       	ld hl,memset
               S01:00000A3F:  21 44 08
F00:0546       	ret
               S01:00000A42:  C9
F00:0547       _loadaddress$5:
F00:0548       	cp STRLEN
               S01:00000A43:  FE 05
F00:0549       	jp nz,_loadaddress$6
               S01:00000A45:  C2 4C 0A
F00:0550       	ld hl,strlen
               S01:00000A48:  21 4D 08
F00:0551       	ret
               S01:00000A4B:  C9
F00:0552       _loadaddress$6:
F00:0553       	cp PUTC
               S01:00000A4C:  FE 06
F00:0554       	jp nz,_loadaddress$7
               S01:00000A4E:  C2 55 0A
F00:0555       	ld hl,putc
               S01:00000A51:  21 CD 08
F00:0556       	ret
               S01:00000A54:  C9
F00:0557       _loadaddress$7:
F00:0558       	cp TOUPPERCASE
               S01:00000A55:  FE 07
F00:0559       	jp nz,_loadaddress$8
               S01:00000A57:  C2 5E 0A
F00:0560       	ld hl,touppercase
               S01:00000A5A:  21 75 08
F00:0561       	ret
               S01:00000A5D:  C9
F00:0562       _loadaddress$8:
F00:0563       	cp HEXTOBYTE
               S01:00000A5E:  FE 08
F00:0564       	jp nz,_loadaddress$9
               S01:00000A60:  C2 67 0A
F00:0565       	ld hl,hextobyte
               S01:00000A63:  21 6A 09
F00:0566       	ret
               S01:00000A66:  C9
F00:0567       _loadaddress$9:
F00:0568       	cp PRINTLN
               S01:00000A67:  FE 09
F00:0569       	jp nz,_loadaddress$10
               S01:00000A69:  C2 70 0A
F00:0570       	ld hl,println
               S01:00000A6C:  21 8D 08
F00:0571       	ret
               S01:00000A6F:  C9
F00:0572       _loadaddress$10:
F00:0573       	cp STRNCPY
               S01:00000A70:  FE 0A
F00:0574       	jp nz,_loadaddress$11
               S01:00000A72:  C2 79 0A
F00:0575       	ld hl,strncpy
               S01:00000A75:  21 5F 08
F00:0576       	ret
               S01:00000A78:  C9
F00:0577       _loadaddress$11:
F00:0578       	cp DIRECTORYOPEN
               S01:00000A79:  FE 0D
F00:0579       	jp nz,_loadaddress$12
               S01:00000A7B:  C2 82 0A
F00:0580       	ld hl,directoryopen
               S01:00000A7E:  21 88 09
F00:0581       	ret
               S01:00000A81:  C9
F00:0582       _loadaddress$12:
F00:0583       	cp GETFILENAME:
               S01:00000A82:  FE 0F
F00:0584       	jp nz,_loadaddress$13
               S01:00000A84:  C2 8B 0A
F00:0585       	ld hl,getfilename
               S01:00000A87:  21 96 09
F00:0586       	ret
               S01:00000A8A:  C9
F00:0587       _loadaddress$13:
F00:0588       	cp NEXTFILE
               S01:00000A8B:  FE 32
F00:0589       	jp nz,_loadaddress$14
               S01:00000A8D:  C2 94 0A
F00:0590       	ld hl,nextfile
               S01:00000A90:  21 8F 09
F00:0591       	ret
               S01:00000A93:  C9
F00:0592       _loadaddress$14:
F00:0593       	cp CREATEPROCESS
               S01:00000A94:  FE 10
F00:0594       	jp nz,_loadaddress$15
               S01:00000A96:  C2 9D 0A
F00:0595       	ld hl,createProcess
               S01:00000A99:  21 B2 09
F00:0596       	ret
               S01:00000A9C:  C9
F00:0597       _loadaddress$15:
F00:0598       	cp GETCOMMANDPARAMS
               S01:00000A9D:  FE 11
F00:0599       	jp nz,_loadaddress$16
               S01:00000A9F:  C2 A6 0A
F00:0600       	ld hl,getcommandparams
               S01:00000AA2:  21 12 0A
F00:0601       	ret
               S01:00000AA5:  C9
F00:0602       _loadaddress$16:
F00:0603       	#----- not defined ---
F00:0604       	ld hl,addressfailedmsg
               S01:00000AA6:  21 FD 0A
F00:0605       	call print 
               S01:00000AA9:  CD 9B 08
F00:0606       	call printhex
               S01:00000AAC:  CD B7 08
F00:0607       
F00:0608       	ld hl,0
               S01:00000AAF:  21 00 00
F00:0609       	ret
               S01:00000AB2:  C9
F00:0610       	# ======================== end subroutines ========== #
F00:0611       	
F00:0612       	nullroutine: 
F00:0613       		ei
               S01:00000AB3:  FB
F00:0614       		reti
               S01:00000AB4:  ED 4D
F00:0615       
F00:0616       	serialport: ;#/* interrupt 2, echo what was sent*/
F00:0617       	#	di
F00:0618       		#ld a,'*'
F00:0619       		#out (SERIALPORT),a
F00:0620       
F00:0621       		in a,(SERIALPORT)
               S01:00000AB6:  DB 01
F00:0622       		cp 0
               S01:00000AB8:  FE 00
F00:0623       		jp nz,_1$
               S01:00000ABA:  C2 BF 0A
F00:0624       		ld a,'`'
               S01:00000ABD:  3E 60
F00:0625       _1$:
F00:0626       		out (SERIALPORT),a
               S01:00000ABF:  D3 01
F00:0627       		ei
               S01:00000AC1:  FB
F00:0628       		reti
               S01:00000AC2:  ED 4D
F00:0629       	crlf: .string "\r\n"
               S01:00000AC4:  0D 0A
F00:0630       	loadedmsg: .string "JOSHUA\r\n"
               S01:00000AC7:  4A 4F 53 48 55 41 0D 0A
F00:0631       	readymsg: .string "\r\nReady v0.0\r\n"
               S01:00000AD0:  0D 0A 52 65 61 64 79 20 76 30 2E 30 0D 0A
F00:0632       	commandprocessor: .string "cmd"
               S01:00000ADF:  63 6D 64
F00:0633       	errorloadingmsg: .string "error loading program.\r\n\"
               S01:00000AE3:  65 72 72 6F 72 20 6C 6F 61 64 69 6E 67 20 70 72
               S01:00000AF3:  6F 67 72 61 6D 2E 0D 0A 22
F00:0634       	addressfailedmsg: .string "GetAddress failed for code:"
               S01:00000AFD:  47 65 74 41 64 64 72 65 73 73 20 66 61 69 6C 65
               S01:00000B0D:  64 20 66 6F 72 20 63 6F 64 65 3A
F00:0635       
F00:0636       
F00:0637       	; I could set the org address but I'm going to let that move as needed	.org 0x????
F00:0638       	;#.org 0x0A00-start
F00:0639       	.align 8
F00:0640       	jumptable:
F00:0641       	.2byte nullroutine ;0
               S01:00000C00:  B3 0A
F00:0642       	.2byte serialport ;2
               S01:00000C02:  B6 0A
F00:0643       	.2byte serialport ;4
               S01:00000C04:  B6 0A
F00:0644       	.2byte serialport ;6
               S01:00000C06:  B6 0A
F00:0645       
F00:0646       	
F00:0647       	


Sections:
S01  seg800


Sources:
F00  initialRAMz80.s
F01  SDCARD.inc
F02  Routines.inc
F03  SERIAL.inc
F04  SDCARD.inc


Symbols:
 serialport _1$ EXPR(2751=0xabf) ABS 
serialport EXPR(2742=0xab6) ABS 
nullroutine EXPR(2739=0xab3) ABS 
addressfailedmsg EXPR(2813=0xafd) ABS 
_loadaddress$16 EXPR(2726=0xaa6) ABS 
_loadaddress$15 EXPR(2717=0xa9d) ABS 
_loadaddress$14 EXPR(2708=0xa94) ABS 
_loadaddress$13 EXPR(2699=0xa8b) ABS 
_loadaddress$12 EXPR(2690=0xa82) ABS 
_loadaddress$11 EXPR(2681=0xa79) ABS 
_loadaddress$10 EXPR(2672=0xa70) ABS 
_loadaddress$9 EXPR(2663=0xa67) ABS 
_loadaddress$8 EXPR(2654=0xa5e) ABS 
_loadaddress$7 EXPR(2645=0xa55) ABS 
_loadaddress$6 EXPR(2636=0xa4c) ABS 
_loadaddress$5 EXPR(2627=0xa43) ABS 
_loadaddress$4 EXPR(2618=0xa3a) ABS 
_loadaddress$3 EXPR(2609=0xa31) ABS 
_loadaddress$2 EXPR(2600=0xa28) ABS 
getcommandparams EXPR(2578=0xa12) ABS 
_createProcesserr$1 EXPR(2556=0x9fc) ABS 
theprocessmsg EXPR(2561=0xa01) ABS 
thecommandlinemsg EXPR(2570=0xa0a) ABS 
createProcess EXPR(2482=0x9b2) ABS 
_exitgetfilename EXPR(2476=0x9ac) ABS 
_getfilename$1 EXPR(2460=0x99c) ABS 
getfilename EXPR(2454=0x996) ABS 
nextfile EXPR(2447=0x98f) ABS 
directoryopen EXPR(2440=0x988) ABS 
hextobytenumber EXPR(2437=0x985) ABS 
workhextobyte EXPR(2429=0x97d) ABS 
hextobyte EXPR(2410=0x96a) ABS 
hisize EXPR(2409=0x969) UNUSED ABS 
losize EXPR(2408=0x968) ABS 
sizeincrement EXPR(2384=0x950) ABS 
 available _1$ EXPR(2321=0x911) ABS 
_$nextbyte EXPR(2333=0x91d) ABS 
sizeloaded EXPR(2350=0x92e) ABS 
available EXPR(2301=0x8fd) ABS 
_$openfile EXPR(2282=0x8ea) ABS 
_$getnextchar EXPR(2265=0x8d9) ABS 
sizereset EXPR(2365=0x93d) ABS 
putc EXPR(2253=0x8cd) ABS 
_$ EXPR(2240=0x8c0) ABS 
_$2 EXPR(2228=0x8b4) ABS 
_$1 EXPR(2217=0x8a9) ABS 
crlf EXPR(2756=0xac4) ABS 
nextcharacter EXPR(2179=0x883) ABS 
converttouppercaseletter EXPR(2176=0x880) ABS 
goagain EXPR(2167=0x877) ABS 
touppercase EXPR(2165=0x875) ABS 
_strcpyexit$1 EXPR(2161=0x871) ABS 
 strcpy _1$ EXPR(2149=0x865) ABS 
strcpy EXPR(2146=0x862) ABS 
strncpy EXPR(2143=0x85f) ABS 
strlenexit EXPR(2140=0x85c) ABS 
_strlen$ EXPR(2129=0x851) ABS 
strlen EXPR(2125=0x84d) ABS 
_metset$1 EXPR(2118=0x846) ABS 
memset EXPR(2116=0x844) ABS 
errorloadingmsg EXPR(2787=0xae3) ABS 
printhex EXPR(2231=0x8b7) ABS 
println EXPR(2189=0x88d) ABS 
errorloading EXPR(2104=0x838) ABS 
loadFILE EXPR(2256=0x8d0) ABS 
commandprocessor EXPR(2783=0xadf) ABS 
commandprocessloop EXPR(2078=0x81e) ABS 
loadedmsg EXPR(2759=0xac7) ABS 
jumptable EXPR(3072=0xc00) ABS 
print EXPR(2203=0x89b) ABS 
readymsg EXPR(2768=0xad0) ABS 
loadaddress EXPR(2591=0xa1f) ABS 
start EXPR(2052=0x804) UNUSED ABS 
boot EXPR(2055=0x807) ABS 
NEXTNUMBER EXPR(18=0x12) UNUSED 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) UNUSED 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) 
NAMEAVAILABLE EXPR(33=0x21) 
GETNAME EXPR(32=0x20) 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) 
READNEXTBYTE EXPR(5=0x5) 
FILENAMEAPPEND EXPR(4=0x4) 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) 
FILENAMECLEAR EXPR(1=0x1) 
SDCARD EXPR(5=0x5) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
