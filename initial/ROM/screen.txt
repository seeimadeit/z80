F00:0001       .set __LIB__,1
F00:0002       .set __ORG__,0x3000
F00:0003       
F00:0004       .include "Routines.inc"
F01:0001       
F01:0002       # address where user programs load
F01:0003       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       .equ SERIALPORT2, 0x02
F02:0003       
F01:0004       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0005       .equ commandMemory, 0x1000
F01:0006       .equ userMemory,0x2000
F01:0007       .equ libMemory,0xF000
F01:0008       
F01:0009       .equ TRUE, 1
F01:0010       .equ FALSE, 0
F01:0011       
F01:0012       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0013       # ld a, PRINT
F01:0014       # call GetAddress
F01:0015       # address for print loaded into hl
F01:0016       # the value in hl can change between os versions so do not hard code the values
F01:0017       
F01:0018       .equ GetAddress, 0x0804
F01:0019       .equ PRINT,		1
F01:0020       .equ PRINTLN,	9
F01:0021       .equ PRINTHEX,	2
F01:0022       .equ LOADFILE,	3
F01:0023       .equ MEMSET,	4
F01:0024       .equ STRLEN,	5
F01:0025       .equ PUTC,		6
F01:0026       .equ TOUPPERCASE,7
F01:0027       .equ HEXTOBYTE,	8
F01:0028       .equ STRNCPY,10
F01:0029       .equ CREATEPROCESS,16
F01:0030       .equ GETCOMMANDPARAMS,17
F01:0031       # filesystem - primitive functions, probably going to change 
F01:0032       .equ DIRECTORYOPEN,13
F01:0033       .equ DIRECTORYNEXTFILE,14
F01:0034       .equ GETFILENAME,15
F01:0035       
F01:0036       
F01:0037       
F01:0038       .equ NEXTNUMBER,18
F01:0039       
F01:0040       
F00:0005       .include "libs.inc"
F04:0001       
F04:0002       .ifndef __CMD__
F04:0003       	.ifdef __LIB__
F04:0004       		.ifdef __ORG__
F04:0005       			.org __ORG__
F04:0006       		.else 
F04:0007       		.org dllMemory
F04:0008       		.endif
F04:0009       		.2byte $
               S01:00003000:  00 30
F04:0010       		jp libaddress
               S01:00003002:  C3 70 32
F04:0011       initialize:
F04:0012       	.else
F04:0013       		.org userMemory
F04:0014       		.2byte $
F04:0015       	.endif
F04:0016       .endif
F04:0017       	ld a,PRINT
               S01:00003005:  3E 01
F04:0018       	call GetAddress
               S01:00003007:  CD 04 08
F04:0019       	ld (printadr),hl
               S01:0000300A:  22 79 30
F04:0020       	ld a,PRINTHEX
               S01:0000300D:  3E 02
F04:0021       	call GetAddress
               S01:0000300F:  CD 04 08
F04:0022       	ld (printhexadr),hl
               S01:00003012:  22 7F 30
F04:0023       	ld a,LOADFILE
               S01:00003015:  3E 03
F04:0024       	call GetAddress
               S01:00003017:  CD 04 08
F04:0025       	ld (loadfileadr),hl
               S01:0000301A:  22 82 30
F04:0026       	ld a,MEMSET
               S01:0000301D:  3E 04
F04:0027       	call GetAddress
               S01:0000301F:  CD 04 08
F04:0028       	ld (memsetadr),hl
               S01:00003022:  22 85 30
F04:0029       	ld a,STRLEN
               S01:00003025:  3E 05
F04:0030       	call GetAddress
               S01:00003027:  CD 04 08
F04:0031       	ld (strlenadr),hl
               S01:0000302A:  22 88 30
F04:0032       	ld a,PUTC
               S01:0000302D:  3E 06
F04:0033       	call GetAddress
               S01:0000302F:  CD 04 08
F04:0034       	ld (putcadr),hl
               S01:00003032:  22 8B 30
F04:0035       	ld a,TOUPPERCASE
               S01:00003035:  3E 07
F04:0036       	call GetAddress
               S01:00003037:  CD 04 08
F04:0037       	ld (touppercaseadr),hl
               S01:0000303A:  22 8E 30
F04:0038       	ld a,HEXTOBYTE
               S01:0000303D:  3E 08
F04:0039       	call GetAddress
               S01:0000303F:  CD 04 08
F04:0040       	ld (hextobyteadr),hl
               S01:00003042:  22 91 30
F04:0041       	ld a,PRINTLN
               S01:00003045:  3E 09
F04:0042       	call GetAddress
               S01:00003047:  CD 04 08
F04:0043       	ld (printlnadr),hl
               S01:0000304A:  22 7C 30
F04:0044       	ld a,DIRECTORYOPEN
               S01:0000304D:  3E 0D
F04:0045       	call GetAddress
               S01:0000304F:  CD 04 08
F04:0046       	ld (directoryopenadr),hl
               S01:00003052:  22 94 30
F04:0047       	ld a,NEXTFILE
               S01:00003055:  3E 32
F04:0048       	call GetAddress
               S01:00003057:  CD 04 08
F04:0049       	ld (directorynextfileadr),hl
               S01:0000305A:  22 97 30
F04:0050       	ld a,GETFILENAME
               S01:0000305D:  3E 0F
F04:0051       	call GetAddress
               S01:0000305F:  CD 04 08
F04:0052       	ld (getfilenameadr),hl
               S01:00003062:  22 9A 30
F04:0053       	ld a,CREATEPROCESS
               S01:00003065:  3E 10
F04:0054       	call GetAddress
               S01:00003067:  CD 04 08
F04:0055       	ld (createProcessadr),hl
               S01:0000306A:  22 9D 30
F04:0056       	ld a,GETCOMMANDPARAMS
               S01:0000306D:  3E 11
F04:0057       	call GetAddress
               S01:0000306F:  CD 04 08
F04:0058       	ld (getcommandparamsadr),hl
               S01:00003072:  22 A0 30
F04:0059       
F04:0060       
F04:0061       	jp _main
               S01:00003075:  C3 A2 30
F04:0062       
F04:0063       	functionlookups:
F04:0064       	.align 2
F04:0065       	print: .byte 0xc3
               S01:00003078:  C3
F04:0066       	printadr: .2byte 0
               S01:00003079:  00 00
F04:0067       	println: .byte 0xc3
               S01:0000307B:  C3
F04:0068       	printlnadr: .2byte 0
               S01:0000307C:  00 00
F04:0069       	printhex: .byte 0xc3
               S01:0000307E:  C3
F04:0070       	printhexadr: .2byte 0
               S01:0000307F:  00 00
F04:0071       	loadfile: .byte 0xc3
               S01:00003081:  C3
F04:0072       	loadfileadr: .2byte 0
               S01:00003082:  00 00
F04:0073       	memset: .byte 0xc3
               S01:00003084:  C3
F04:0074       	memsetadr: .2byte 0
               S01:00003085:  00 00
F04:0075       	strlen: .byte 0xc3
               S01:00003087:  C3
F04:0076       	strlenadr: .2byte 0
               S01:00003088:  00 00
F04:0077       	putc: .byte 0xc3
               S01:0000308A:  C3
F04:0078       	putcadr: .2byte 0
               S01:0000308B:  00 00
F04:0079       	touppercase: .byte 0xc3
               S01:0000308D:  C3
F04:0080       	touppercaseadr: .2byte 0
               S01:0000308E:  00 00
F04:0081       	hextobyte: .byte 0xc3
               S01:00003090:  C3
F04:0082       	hextobyteadr: .2byte 0
               S01:00003091:  00 00
F04:0083       	directoryopen: .byte 0xc3
               S01:00003093:  C3
F04:0084       	directoryopenadr: .2byte 0
               S01:00003094:  00 00
F04:0085       	directorynextfile: .byte 0xc3
               S01:00003096:  C3
F04:0086       	directorynextfileadr: .2byte 0
               S01:00003097:  00 00
F04:0087       	getfilename: .byte 0xc3
               S01:00003099:  C3
F04:0088       	getfilenameadr: .2byte 0
               S01:0000309A:  00 00
F04:0089       	createProcess: .byte 0xc3
               S01:0000309C:  C3
F04:0090       	createProcessadr: .2byte 0
               S01:0000309D:  00 00
F04:0091       	getcommandparams: .byte 0xc3
               S01:0000309F:  C3
F04:0092       	getcommandparamsadr: .2byte 0
               S01:000030A0:  00 00
F04:0093       
F04:0094       _main:
F04:0095       .ifdef __DLL__
F04:0096       	ret
F04:0097       .endif
F00:0006       .include "screen.inc"
F05:0001       
F05:0002       
F05:0003       .equ DIVIDE8,1
F05:0004       .equ TEST,2
F05:0005       .equ ANSICODE,3
F05:0006       
F05:0007       
F05:0008       
F05:0009       
F05:0010       
F05:0011       
F05:0012       
F05:0013       #ansicode - see keyboardtest.s
F05:0014       	# A - code to call
F05:0015       
F05:0016       
F05:0017       .equ CLEARSCREEN,		1
F05:0018       .equ CLEARENDOFSCREEN,	2
F05:0019       .equ CLEARBEGINOFSCREEN,3
F05:0020       .equ CLEARWHOLESCREEN,	4
F05:0021       .equ CLEARCURRENTLINE,	5
F05:0022       .equ CLEARTOENDOFLINE,	6
F05:0023       .equ CLEARFROMSTARTOFLINE,7
F05:0024       .equ CLEARLINE,			8
F05:0025       .equ COLORRESET,		9
F05:0026       .equ COLORBOLD,			10
F05:0027       .equ COLORDIM,			11
F05:0028       .equ COLORFGBLACK,		12
F05:0029       .equ COLORFGRED,		13
F05:0030       .equ COLORFGGREEN,		14
F05:0031       .equ COLORFGYELLOW,		15
F05:0032       .equ COLORFGBLUE,		16
F05:0033       .equ COLORFGMAGENTA,	17
F05:0034       .equ COLORFGCYAN,		18
F05:0035       .equ COLORFGWHITE,		19
F05:0036       .equ COLORBGBLACK,		20
F05:0037       .equ COLORBGRED,		21
F05:0038       .equ COLORBGGREEN,		22
F05:0039       .equ COLORBGYELLOW,		23
F05:0040       .equ COLORBGBLUE,		24
F05:0041       .equ COLORBGMAGENTA,	25
F05:0042       .equ COLORBGCYAN,		26
F05:0043       .equ COLORBGWHITE,		27
F05:0044       
F05:0045       
F00:0007       
F00:0008       
F00:0009       
F00:0010       ;# http://tutorials.eeems.ca/Z80ASM/part4.htm#div8
F00:0011       ;# result stored in HL
F00:0012       ;# ld hl,4
F00:0013       ;# ld d,2
F00:0014       ;# call Div8
F00:0015       Div8:                            ; this routine performs the operation HL=HL/D
F00:0016         xor a                          ; clearing the upper 8 bits of AHL
               S01:000030A2:  AF
F00:0017         ld b,16                        ; the length of the dividend (16 bits)
               S01:000030A3:  06 10
F00:0018       Div8Loop:
F00:0019         add hl,hl                      ; advancing a bit
               S01:000030A5:  29
F00:0020         rla
               S01:000030A6:  17
F00:0021         cp d                           ; checking if the divisor divides the digits chosen (in A)
               S01:000030A7:  BA
F00:0022         jp c,Div8NextBit               ; if not, advancing without subtraction
               S01:000030A8:  DA AD 30
F00:0023         sub d                          ; subtracting the divisor
               S01:000030AB:  92
F00:0024         inc l                          ; and setting the next digit of the quotient
               S01:000030AC:  2C
F00:0025       Div8NextBit:
F00:0026         djnz Div8Loop
               S01:000030AD:  10 F6
F00:0027         ret
               S01:000030AF:  C9
F00:0028       
F00:0029         test:
F00:0030       	ld hl,msg
               S01:000030B0:  21 B7 30
F00:0031       	call print
               S01:000030B3:  CD 78 30
F00:0032       	
F00:0033       	ret
               S01:000030B6:  C9
F00:0034       
F00:0035       	msg: .string "hello I'm in screen.dll"
               S01:000030B7:  68 65 6C 6C 6F 20 49 27 6D 20 69 6E 20 73 63 72
               S01:000030C7:  65 65 6E 2E 64 6C 6C
F00:0036       
F00:0037       #==== print ansi escape codes =======
F00:0038       
F00:0039       ansicode:
F00:0040       	# A - code to call
F00:0041       	push af
               S01:000030CF:  F5
F00:0042       
F00:0043       	ld hl,escapeintro
               S01:000030D0:  21 07 32
F00:0044       	call print
               S01:000030D3:  CD 78 30
F00:0045       
F00:0046       	cp CLEARSCREEN
               S01:000030D6:  FE 01
F00:0047       	jp nz,1$
               S01:000030D8:  C2 E1 30
F00:0048       	ld hl,clearscreen
               S01:000030DB:  21 0A 32
F00:0049       	jp 99$
               S01:000030DE:  C3 02 32
F00:0050       1$:	cp CLEARENDOFSCREEN
               S01:000030E1:  FE 02
F00:0051       	jp nz,2$
               S01:000030E3:  C2 EC 30
F00:0052       	ld hl,clearendofscreen
               S01:000030E6:  21 13 32
F00:0053       	jp 99$
               S01:000030E9:  C3 02 32
F00:0054       2$:	cp CLEARBEGINOFSCREEN
               S01:000030EC:  FE 03
F00:0055       	jp nz,3$
               S01:000030EE:  C2 F7 30
F00:0056       	ld hl,clearbeginofscreen
               S01:000030F1:  21 16 32
F00:0057       	jp 99$
               S01:000030F4:  C3 02 32
F00:0058       3$:	cp CLEARWHOLESCREEN
               S01:000030F7:  FE 04
F00:0059       	jp nz,4$
               S01:000030F9:  C2 02 31
F00:0060       	ld hl,clearwholescreen
               S01:000030FC:  21 19 32
F00:0061       	jp 99$
               S01:000030FF:  C3 02 32
F00:0062       4$:	cp CLEARCURRENTLINE
               S01:00003102:  FE 05
F00:0063       	jp nz,5$
               S01:00003104:  C2 0D 31
F00:0064       	ld hl,clearcurrentline
               S01:00003107:  21 1C 32
F00:0065       	jp 99$
               S01:0000310A:  C3 02 32
F00:0066       5$:	cp CLEARTOENDOFLINE
               S01:0000310D:  FE 06
F00:0067       	jp nz,6$
               S01:0000310F:  C2 18 31
F00:0068       	ld hl,cleartoendofline
               S01:00003112:  21 1E 32
F00:0069       	jp 99$
               S01:00003115:  C3 02 32
F00:0070       6$:	cp CLEARFROMSTARTOFLINE
               S01:00003118:  FE 07
F00:0071       	jp nz,7$
               S01:0000311A:  C2 23 31
F00:0072       	ld hl,clearfromstartofline
               S01:0000311D:  21 21 32
F00:0073       	jp 99$
               S01:00003120:  C3 02 32
F00:0074       7$:	cp CLEARLINE
               S01:00003123:  FE 08
F00:0075       	jp nz,8$
               S01:00003125:  C2 2E 31
F00:0076       	ld hl,clearline
               S01:00003128:  21 24 32
F00:0077       	jp 99$
               S01:0000312B:  C3 02 32
F00:0078       8$:	cp COLORRESET
               S01:0000312E:  FE 09
F00:0079       	jp nz,9$
               S01:00003130:  C2 39 31
F00:0080       	ld hl,colorreset
               S01:00003133:  21 27 32
F00:0081       	jp 99$
               S01:00003136:  C3 02 32
F00:0082       9$:	cp COLORBOLD
               S01:00003139:  FE 0A
F00:0083       	jp nz,10$
               S01:0000313B:  C2 44 31
F00:0084       	ld hl,colorbold
               S01:0000313E:  21 2A 32
F00:0085       	jp 99$
               S01:00003141:  C3 02 32
F00:0086       10$:	cp COLORDIM
               S01:00003144:  FE 0B
F00:0087       	jp nz,11$
               S01:00003146:  C2 4F 31
F00:0088       	ld hl,colordim
               S01:00003149:  21 2D 32
F00:0089       	jp 99$
               S01:0000314C:  C3 02 32
F00:0090       11$:	cp COLORFGBLACK
               S01:0000314F:  FE 0C
F00:0091       	jp nz,12$
               S01:00003151:  C2 5A 31
F00:0092       	ld hl,colorfgblack
               S01:00003154:  21 30 32
F00:0093       	jp 99$
               S01:00003157:  C3 02 32
F00:0094       12$:	cp COLORFGRED
               S01:0000315A:  FE 0D
F00:0095       	jp nz,13$
               S01:0000315C:  C2 65 31
F00:0096       	ld hl,colorfgred
               S01:0000315F:  21 34 32
F00:0097       	jp 99$
               S01:00003162:  C3 02 32
F00:0098       13$:	cp COLORFGGREEN
               S01:00003165:  FE 0E
F00:0099       	jp nz,14$
               S01:00003167:  C2 70 31
F00:0100       	ld hl,colorfggreen
               S01:0000316A:  21 38 32
F00:0101       	jp 99$
               S01:0000316D:  C3 02 32
F00:0102       14$:	cp COLORFGYELLOW
               S01:00003170:  FE 0F
F00:0103       	jp nz,15$
               S01:00003172:  C2 7B 31
F00:0104       	ld hl,colorfgyellow
               S01:00003175:  21 3C 32
F00:0105       	jp 99$
               S01:00003178:  C3 02 32
F00:0106       15$:	cp COLORFGBLUE
               S01:0000317B:  FE 10
F00:0107       	jp nz,16$
               S01:0000317D:  C2 86 31
F00:0108       	ld hl,colorfgblue
               S01:00003180:  21 40 32
F00:0109       	jp 99$
               S01:00003183:  C3 02 32
F00:0110       16$:	cp COLORFGMAGENTA
               S01:00003186:  FE 11
F00:0111       	jp nz,17$
               S01:00003188:  C2 91 31
F00:0112       	ld hl,colorfgmagenta
               S01:0000318B:  21 44 32
F00:0113       	jp 99$
               S01:0000318E:  C3 02 32
F00:0114       17$:	cp COLORFGCYAN
               S01:00003191:  FE 12
F00:0115       	jp nz,18$
               S01:00003193:  C2 9C 31
F00:0116       	ld hl,colorfgmagenta
               S01:00003196:  21 44 32
F00:0117       	jp 99$
               S01:00003199:  C3 02 32
F00:0118       18$:	cp COLORFGWHITE
               S01:0000319C:  FE 13
F00:0119       	jp nz,19$
               S01:0000319E:  C2 A7 31
F00:0120       	ld hl,colorfgwhite
               S01:000031A1:  21 4C 32
F00:0121       	jp 99$
               S01:000031A4:  C3 02 32
F00:0122       19$:	cp COLORBGBLACK
               S01:000031A7:  FE 14
F00:0123       	jp nz,20$
               S01:000031A9:  C2 B2 31
F00:0124       	ld hl,colorbgblack
               S01:000031AC:  21 50 32
F00:0125       	jp 99$
               S01:000031AF:  C3 02 32
F00:0126       20$:	cp COLORBGRED
               S01:000031B2:  FE 15
F00:0127       	jp nz,21$
               S01:000031B4:  C2 BD 31
F00:0128       	ld hl,colorbgred
               S01:000031B7:  21 54 32
F00:0129       	jp 99$
               S01:000031BA:  C3 02 32
F00:0130       21$:	cp COLORBGGREEN
               S01:000031BD:  FE 16
F00:0131       	jp nz,22$
               S01:000031BF:  C2 C8 31
F00:0132       	ld hl,colorbggreen
               S01:000031C2:  21 58 32
F00:0133       	jp 99$
               S01:000031C5:  C3 02 32
F00:0134       22$:	cp COLORBGYELLOW
               S01:000031C8:  FE 17
F00:0135       	jp nz,23$
               S01:000031CA:  C2 D3 31
F00:0136       	ld hl,colorbgyellow
               S01:000031CD:  21 5C 32
F00:0137       	jp 99$
               S01:000031D0:  C3 02 32
F00:0138       23$:	cp COLORBGBLUE
               S01:000031D3:  FE 18
F00:0139       	jp nz,24$
               S01:000031D5:  C2 DE 31
F00:0140       	ld hl,colorbgblue
               S01:000031D8:  21 60 32
F00:0141       	jp 99$
               S01:000031DB:  C3 02 32
F00:0142       24$:	cp COLORBGMAGENTA
               S01:000031DE:  FE 19
F00:0143       	jp nz,25$
               S01:000031E0:  C2 E9 31
F00:0144       	ld hl,colorbgmagenta
               S01:000031E3:  21 64 32
F00:0145       	jp 99$
               S01:000031E6:  C3 02 32
F00:0146       25$:	cp COLORBGCYAN
               S01:000031E9:  FE 1A
F00:0147       	jp nz,26$
               S01:000031EB:  C2 F4 31
F00:0148       	ld hl,colorbgcyan
               S01:000031EE:  21 68 32
F00:0149       	jp 99$
               S01:000031F1:  C3 02 32
F00:0150       26$:	cp COLORBGWHITE
               S01:000031F4:  FE 1B
F00:0151       	jp nz,98$
               S01:000031F6:  C2 FF 31
F00:0152       	ld hl,colorbgwhite
               S01:000031F9:  21 6C 32
F00:0153       	jp 99$
               S01:000031FC:  C3 02 32
F00:0154       98$: ;#default
F00:0155       	ld hl,colorreset
               S01:000031FF:  21 27 32
F00:0156       99$:call print
               S01:00003202:  CD 78 30
F00:0157       	pop af
               S01:00003205:  F1
F00:0158       	ret
               S01:00003206:  C9
F00:0159       
F00:0160       
F00:0161       escapeintro: .string 0x1b,"["
               S01:00003207:  1B
               S01:00003208:  5B
F00:0162       clearscreen: .string "0;0H",0x1b,"[2J"
               S01:0000320A:  30 3B 30 48
               S01:0000320E:  1B
               S01:0000320F:  5B 32 4A
F00:0163       clearendofscreen: .string "0J"
               S01:00003213:  30 4A
F00:0164       clearbeginofscreen: .string "1J"
               S01:00003216:  31 4A
F00:0165       clearwholescreen: .string "2J"
               S01:00003219:  32 4A
F00:0166       clearcurrentline: .string "K"
               S01:0000321C:  4B
F00:0167       cleartoendofline: .string "0K"
               S01:0000321E:  30 4B
F00:0168       clearfromstartofline: .string "1K"
               S01:00003221:  31 4B
F00:0169       clearline: .string "2K"
               S01:00003224:  32 4B
F00:0170       colorreset: .string "0m"
               S01:00003227:  30 6D
F00:0171       colorbold: .string "1m"
               S01:0000322A:  31 6D
F00:0172       colordim: .string "2m"
               S01:0000322D:  32 6D
F00:0173       colorfgblack: .string "30m"
               S01:00003230:  33 30 6D
F00:0174       colorfgred: .string "31m"
               S01:00003234:  33 31 6D
F00:0175       colorfggreen: .string "32m"
               S01:00003238:  33 32 6D
F00:0176       colorfgyellow: .string "33m"
               S01:0000323C:  33 33 6D
F00:0177       colorfgblue: .string "34m"
               S01:00003240:  33 34 6D
F00:0178       colorfgmagenta: .string "35m"
               S01:00003244:  33 35 6D
F00:0179       colorfgcyan: .string "36m"
               S01:00003248:  33 36 6D
F00:0180       colorfgwhite: .string "37m"
               S01:0000324C:  33 37 6D
F00:0181       colorbgblack: .string "40m"
               S01:00003250:  34 30 6D
F00:0182       colorbgred: .string "41m"
               S01:00003254:  34 31 6D
F00:0183       colorbggreen: .string "42m"
               S01:00003258:  34 32 6D
F00:0184       colorbgyellow: .string "43m"
               S01:0000325C:  34 33 6D
F00:0185       colorbgblue: .string "44m"
               S01:00003260:  34 34 6D
F00:0186       colorbgmagenta: .string "45m"
               S01:00003264:  34 35 6D
F00:0187       colorbgcyan: .string "46m"
               S01:00003268:  34 36 6D
F00:0188       colorbgwhite: .string "47m"
               S01:0000326C:  34 37 6D
F00:0189       
F00:0190       
F00:0191       
F00:0192       ;================================
F00:0193       ; # === libaddress == #
F00:0194       ; ld a,x - where x = instruction id
F00:0195       ;				id = 1, print
F00:0196       ;					 2, printhex
F00:0197       ;					3,loadFILE
F00:0198       libaddress:
F00:0199       	cp 0
               S01:00003270:  FE 00
F00:0200       	jp nz,_loadaddress2$:
               S01:00003272:  C2 78 32
F00:0201       	jp initialize
               S01:00003275:  C3 05 30
F00:0202       
F00:0203       _loadaddress2$:
F00:0204       	cp DIVIDE8
               S01:00003278:  FE 01
F00:0205       	jp nz,_loadaddress3$
               S01:0000327A:  C2 81 32
F00:0206       	ld hl,Div8
               S01:0000327D:  21 A2 30
F00:0207       	ret
               S01:00003280:  C9
F00:0208       
F00:0209       
F00:0210       _loadaddress3$:
F00:0211       	cp TEST
               S01:00003281:  FE 02
F00:0212       	jp nz, _loadaddress4$
               S01:00003283:  C2 8A 32
F00:0213       	ld hl,test
               S01:00003286:  21 B0 30
F00:0214       	ret
               S01:00003289:  C9
F00:0215       
F00:0216       _loadaddress4$:
F00:0217       	cp ANSICODE
               S01:0000328A:  FE 03
F00:0218       	jp nz, _loadaddress5$:
               S01:0000328C:  C2 93 32
F00:0219       	ld hl,ansicode
               S01:0000328F:  21 CF 30
F00:0220       	ret
               S01:00003292:  C9
F00:0221       _loadaddress5$:
F00:0222       	#----- not defined ---
F00:0223       
F00:0224       
F00:0225       	ld hl,0
               S01:00003293:  21 00 00
F00:0226       	ret
               S01:00003296:  C9
F00:0227       
F00:0228       


Sections:
S01  seg3000


Sources:
F00  screen.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc
F05  screen.inc


Symbols:
_loadaddress5$ EXPR(12947=0x3293) ABS 
_loadaddress4$ EXPR(12938=0x328a) ABS 
_loadaddress3$ EXPR(12929=0x3281) ABS 
_loadaddress2$ EXPR(12920=0x3278) ABS 
colorfgcyan EXPR(12872=0x3248) UNUSED ABS 
colorbgwhite EXPR(12908=0x326c) ABS 
 ansicode 98$ EXPR(12799=0x31ff) ABS 
colorbgcyan EXPR(12904=0x3268) ABS 
 ansicode 26$ EXPR(12788=0x31f4) ABS 
colorbgmagenta EXPR(12900=0x3264) ABS 
 ansicode 25$ EXPR(12777=0x31e9) ABS 
colorbgblue EXPR(12896=0x3260) ABS 
 ansicode 24$ EXPR(12766=0x31de) ABS 
colorbgyellow EXPR(12892=0x325c) ABS 
 ansicode 23$ EXPR(12755=0x31d3) ABS 
colorbggreen EXPR(12888=0x3258) ABS 
 ansicode 22$ EXPR(12744=0x31c8) ABS 
colorbgred EXPR(12884=0x3254) ABS 
 ansicode 21$ EXPR(12733=0x31bd) ABS 
colorbgblack EXPR(12880=0x3250) ABS 
 ansicode 20$ EXPR(12722=0x31b2) ABS 
colorfgwhite EXPR(12876=0x324c) ABS 
 ansicode 19$ EXPR(12711=0x31a7) ABS 
 ansicode 18$ EXPR(12700=0x319c) ABS 
colorfgmagenta EXPR(12868=0x3244) ABS 
 ansicode 17$ EXPR(12689=0x3191) ABS 
colorfgblue EXPR(12864=0x3240) ABS 
 ansicode 16$ EXPR(12678=0x3186) ABS 
colorfgyellow EXPR(12860=0x323c) ABS 
 ansicode 15$ EXPR(12667=0x317b) ABS 
colorfggreen EXPR(12856=0x3238) ABS 
 ansicode 14$ EXPR(12656=0x3170) ABS 
colorfgred EXPR(12852=0x3234) ABS 
 ansicode 13$ EXPR(12645=0x3165) ABS 
colorfgblack EXPR(12848=0x3230) ABS 
 ansicode 12$ EXPR(12634=0x315a) ABS 
colordim EXPR(12845=0x322d) ABS 
 ansicode 11$ EXPR(12623=0x314f) ABS 
colorbold EXPR(12842=0x322a) ABS 
 ansicode 10$ EXPR(12612=0x3144) ABS 
colorreset EXPR(12839=0x3227) ABS 
 ansicode 9$ EXPR(12601=0x3139) ABS 
clearline EXPR(12836=0x3224) ABS 
 ansicode 8$ EXPR(12590=0x312e) ABS 
clearfromstartofline EXPR(12833=0x3221) ABS 
 ansicode 7$ EXPR(12579=0x3123) ABS 
cleartoendofline EXPR(12830=0x321e) ABS 
 ansicode 6$ EXPR(12568=0x3118) ABS 
clearcurrentline EXPR(12828=0x321c) ABS 
 ansicode 5$ EXPR(12557=0x310d) ABS 
clearwholescreen EXPR(12825=0x3219) ABS 
 ansicode 4$ EXPR(12546=0x3102) ABS 
clearbeginofscreen EXPR(12822=0x3216) ABS 
 ansicode 3$ EXPR(12535=0x30f7) ABS 
clearendofscreen EXPR(12819=0x3213) ABS 
 ansicode 2$ EXPR(12524=0x30ec) ABS 
 ansicode 99$ EXPR(12802=0x3202) ABS 
clearscreen EXPR(12810=0x320a) ABS 
 ansicode 1$ EXPR(12513=0x30e1) ABS 
escapeintro EXPR(12807=0x3207) ABS 
ansicode EXPR(12495=0x30cf) ABS 
msg EXPR(12471=0x30b7) ABS 
test EXPR(12464=0x30b0) ABS 
Div8NextBit EXPR(12461=0x30ad) ABS 
Div8Loop EXPR(12453=0x30a5) ABS 
Div8 EXPR(12450=0x30a2) ABS 
COLORBGWHITE EXPR(27=0x1b) 
COLORBGCYAN EXPR(26=0x1a) 
COLORBGMAGENTA EXPR(25=0x19) 
COLORBGBLUE EXPR(24=0x18) 
COLORBGYELLOW EXPR(23=0x17) 
COLORBGGREEN EXPR(22=0x16) 
COLORBGRED EXPR(21=0x15) 
COLORBGBLACK EXPR(20=0x14) 
COLORFGWHITE EXPR(19=0x13) 
COLORFGCYAN EXPR(18=0x12) 
COLORFGMAGENTA EXPR(17=0x11) 
COLORFGBLUE EXPR(16=0x10) 
COLORFGYELLOW EXPR(15=0xf) 
COLORFGGREEN EXPR(14=0xe) 
COLORFGRED EXPR(13=0xd) 
COLORFGBLACK EXPR(12=0xc) 
COLORDIM EXPR(11=0xb) 
COLORBOLD EXPR(10=0xa) 
COLORRESET EXPR(9=0x9) 
CLEARLINE EXPR(8=0x8) 
CLEARFROMSTARTOFLINE EXPR(7=0x7) 
CLEARTOENDOFLINE EXPR(6=0x6) 
CLEARCURRENTLINE EXPR(5=0x5) 
CLEARWHOLESCREEN EXPR(4=0x4) 
CLEARBEGINOFSCREEN EXPR(3=0x3) 
CLEARENDOFSCREEN EXPR(2=0x2) 
CLEARSCREEN EXPR(1=0x1) 
ANSICODE EXPR(3=0x3) 
TEST EXPR(2=0x2) 
DIVIDE8 EXPR(1=0x1) 
getcommandparams EXPR(12447=0x309f) UNUSED ABS 
createProcess EXPR(12444=0x309c) UNUSED ABS 
getfilename EXPR(12441=0x3099) UNUSED ABS 
directorynextfile EXPR(12438=0x3096) UNUSED ABS 
directoryopen EXPR(12435=0x3093) UNUSED ABS 
hextobyte EXPR(12432=0x3090) UNUSED ABS 
touppercase EXPR(12429=0x308d) UNUSED ABS 
putc EXPR(12426=0x308a) UNUSED ABS 
strlen EXPR(12423=0x3087) UNUSED ABS 
memset EXPR(12420=0x3084) UNUSED ABS 
loadfile EXPR(12417=0x3081) UNUSED ABS 
printhex EXPR(12414=0x307e) UNUSED ABS 
println EXPR(12411=0x307b) UNUSED ABS 
print EXPR(12408=0x3078) ABS 
functionlookups EXPR(12408=0x3078) UNUSED ABS 
_main EXPR(12450=0x30a2) ABS 
getcommandparamsadr EXPR(12448=0x30a0) ABS 
createProcessadr EXPR(12445=0x309d) ABS 
getfilenameadr EXPR(12442=0x309a) ABS 
directorynextfileadr EXPR(12439=0x3097) ABS 
directoryopenadr EXPR(12436=0x3094) ABS 
printlnadr EXPR(12412=0x307c) ABS 
hextobyteadr EXPR(12433=0x3091) ABS 
touppercaseadr EXPR(12430=0x308e) ABS 
putcadr EXPR(12427=0x308b) ABS 
strlenadr EXPR(12424=0x3088) ABS 
memsetadr EXPR(12421=0x3085) ABS 
loadfileadr EXPR(12418=0x3082) ABS 
printhexadr EXPR(12415=0x307f) ABS 
printadr EXPR(12409=0x3079) ABS 
initialize EXPR(12293=0x3005) ABS 
libaddress EXPR(12912=0x3270) ABS 
 *current pc dummy* EXPR(12288=0x3000) INTERNAL PROT ABS 
NEXTNUMBER EXPR(18=0x12) UNUSED 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(8192=0x2000) UNUSED 
commandMemory EXPR(4096=0x1000) UNUSED 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) UNUSED 
__ORG__ EXPR(12288=0x3000) 
__LIB__ EXPR(1=0x1) UNUSED 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
