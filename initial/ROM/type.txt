F00:0001       
F00:0002       .include "Routines.inc"
F01:0001       
F01:0002       .macro DEBUG CHARACTER='!'
F01:0009       
F01:0010       
F01:0011       .macro DEBUGHEX CHARACTER='!'
F01:0018       
F01:0019       
F01:0020       
F01:0021       # address where user programs load
F01:0022       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       .equ SERIALPORT2, 0x02
F02:0003       
F01:0023       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0024       .equ commandMemory, 0x1000
F01:0025       .equ userMemory,0x2000
F01:0026       .equ libMemory,0xF000
F01:0027       
F01:0028       .equ TRUE, 1
F01:0029       .equ FALSE, 0
F01:0030       
F01:0031       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0032       # ld a, PRINT
F01:0033       # call GetAddress
F01:0034       # address for print loaded into hl
F01:0035       # the value in hl can change between os versions so do not hard code the values
F01:0036       
F01:0037       .equ GetAddress, 0x0804
F01:0038       .equ PRINT,		1
F01:0039       .equ PRINTLN,	9
F01:0040       .equ PRINTHEX,	2
F01:0041       .equ PRINTHEXL,21
F01:0042       .equ LOADFILE,	3
F01:0043       .equ MEMSET,	4
F01:0044       .equ STRLEN,	5
F01:0045       .equ PUTC,		6
F01:0046       .equ TOUPPERCASE,7
F01:0047       .equ HEXTOBYTE,	8
F01:0048       .equ STRNCPY,10
F01:0049       .equ CREATEPROCESS,16
F01:0050       .equ GETCOMMANDPARAMS,17
F01:0051       # filesystem - primitive functions, probably going to change 
F01:0052       .equ DIRECTORYOPEN,13
F01:0053       .equ DIRECTORYNEXTFILE,14
F01:0054       .equ GETFILENAME,15
F01:0055       .equ GETMALLOCTABLE,18
F01:0056       .equ DIV8,19
F01:0057       .equ SETRESETPAGE,20
F01:0058       
F01:0059       
F01:0060       
F01:0061       .equ NEXTNUMBER,22
F01:0062       
F01:0063       
F00:0003       .include "libs.inc"
F04:0001       
F04:0002       
F04:0003       	.ifdef __LIB__
F04:0004       		.ifdef __ORG__
F04:0005       			.org __ORG__
F04:0006       		.else 
F04:0007       			.org dllMemory
F04:0008       		.endif
F04:0009       		.2byte $ ;# load address
F04:0010       		.byte ((ENDADDRESS-$)/255)+1 ;# memory required to load (in pages)
F04:0011       		.ifdef __STACK__
F04:0012       			.byte __STACK__
F04:0013       		.else 
F04:0014       			.byte 1 ;# stack size (in pages)
F04:0015       		.endif
F04:0016       		jp libaddress
F04:0017       initialize:
F04:0018       	.else
F04:0019       		.ifdef __ORG__
F04:0020       			.org __ORG__
F04:0021       		.else
F04:0022       			.org userMemory
F04:0023       		.endif
F04:0024       		.2byte $ ;# load address
               S01:00002000:  00 20
F04:0025       		.byte ((ENDADDRESS-$)/255)+1 ;# memory required to load (in pages)
               S01:00002002:  02
F04:0026       		.ifdef __STACK__
F04:0027       			.byte __STACK__
F04:0028       		.else 
F04:0029       			.byte 1 ;# stack size (in pages)
               S01:00002003:  01
F04:0030       		.endif
F04:0031       	.endif
F04:0032       
F04:0033       	ld a,PRINT
               S01:00002004:  3E 01
F04:0034       	call GetAddress
               S01:00002006:  CD 04 08
F04:0035       	ld (printadr),hl
               S01:00002009:  22 99 20
F04:0036       	ld a,PRINTHEX
               S01:0000200C:  3E 02
F04:0037       	call GetAddress
               S01:0000200E:  CD 04 08
F04:0038       	ld (printhexadr),hl
               S01:00002011:  22 9F 20
F04:0039       	ld a,LOADFILE
               S01:00002014:  3E 03
F04:0040       	call GetAddress
               S01:00002016:  CD 04 08
F04:0041       	ld (loadfileadr),hl
               S01:00002019:  22 A2 20
F04:0042       	ld a,MEMSET
               S01:0000201C:  3E 04
F04:0043       	call GetAddress
               S01:0000201E:  CD 04 08
F04:0044       	ld (memsetadr),hl
               S01:00002021:  22 A5 20
F04:0045       	ld a,STRLEN
               S01:00002024:  3E 05
F04:0046       	call GetAddress
               S01:00002026:  CD 04 08
F04:0047       	ld (strlenadr),hl
               S01:00002029:  22 A8 20
F04:0048       	ld a,PUTC
               S01:0000202C:  3E 06
F04:0049       	call GetAddress
               S01:0000202E:  CD 04 08
F04:0050       	ld (putcadr),hl
               S01:00002031:  22 AB 20
F04:0051       	ld a,TOUPPERCASE
               S01:00002034:  3E 07
F04:0052       	call GetAddress
               S01:00002036:  CD 04 08
F04:0053       	ld (touppercaseadr),hl
               S01:00002039:  22 AE 20
F04:0054       	ld a,HEXTOBYTE
               S01:0000203C:  3E 08
F04:0055       	call GetAddress
               S01:0000203E:  CD 04 08
F04:0056       	ld (hextobyteadr),hl
               S01:00002041:  22 B1 20
F04:0057       	ld a,PRINTLN
               S01:00002044:  3E 09
F04:0058       	call GetAddress
               S01:00002046:  CD 04 08
F04:0059       	ld (printlnadr),hl
               S01:00002049:  22 9C 20
F04:0060       	ld a,DIRECTORYOPEN
               S01:0000204C:  3E 0D
F04:0061       	call GetAddress
               S01:0000204E:  CD 04 08
F04:0062       	ld (directoryopenadr),hl
               S01:00002051:  22 B4 20
F04:0063       	ld a,NEXTFILE
               S01:00002054:  3E 32
F04:0064       	call GetAddress
               S01:00002056:  CD 04 08
F04:0065       	ld (directorynextfileadr),hl
               S01:00002059:  22 B7 20
F04:0066       	ld a,GETFILENAME
               S01:0000205C:  3E 0F
F04:0067       	call GetAddress
               S01:0000205E:  CD 04 08
F04:0068       	ld (getfilenameadr),hl
               S01:00002061:  22 BA 20
F04:0069       	ld a,CREATEPROCESS
               S01:00002064:  3E 10
F04:0070       	call GetAddress
               S01:00002066:  CD 04 08
F04:0071       	ld (createProcessadr),hl
               S01:00002069:  22 BD 20
F04:0072       	ld a,GETCOMMANDPARAMS
               S01:0000206C:  3E 11
F04:0073       	call GetAddress
               S01:0000206E:  CD 04 08
F04:0074       	ld (getcommandparamsadr),hl
               S01:00002071:  22 C0 20
F04:0075       	ld a,GETMALLOCTABLE
               S01:00002074:  3E 12
F04:0076       	call GetAddress
               S01:00002076:  CD 04 08
F04:0077       	ld (getmalloctableadr),hl
               S01:00002079:  22 C3 20
F04:0078       	ld a,DIV8
               S01:0000207C:  3E 13
F04:0079       	call GetAddress
               S01:0000207E:  CD 04 08
F04:0080       	ld (div8adr),hl
               S01:00002081:  22 C6 20
F04:0081       	ld a,SETRESETPAGE
               S01:00002084:  3E 14
F04:0082       	call GetAddress
               S01:00002086:  CD 04 08
F04:0083       	ld (setresetpageadr),hl
               S01:00002089:  22 C9 20
F04:0084       	ld a,PRINTHEXL
               S01:0000208C:  3E 15
F04:0085       	call GetAddress
               S01:0000208E:  CD 04 08
F04:0086       	ld (printhexLadr),hl
               S01:00002091:  22 CC 20
F04:0087       
F04:0088       
F04:0089       
F04:0090       
F04:0091       	jp _main
               S01:00002094:  C3 CE 20
F04:0092       
F04:0093       	functionlookups:
F04:0094       	.align 2
F04:0095       	print: .byte 0xc3
               S01:00002098:  C3
F04:0096       	printadr: .2byte 0
               S01:00002099:  00 00
F04:0097       	println: .byte 0xc3
               S01:0000209B:  C3
F04:0098       	printlnadr: .2byte 0
               S01:0000209C:  00 00
F04:0099       	printhex: .byte 0xc3
               S01:0000209E:  C3
F04:0100       	printhexadr: .2byte 0
               S01:0000209F:  00 00
F04:0101       	loadfile: .byte 0xc3
               S01:000020A1:  C3
F04:0102       	loadfileadr: .2byte 0
               S01:000020A2:  00 00
F04:0103       	memset: .byte 0xc3
               S01:000020A4:  C3
F04:0104       	memsetadr: .2byte 0
               S01:000020A5:  00 00
F04:0105       	strlen: .byte 0xc3
               S01:000020A7:  C3
F04:0106       	strlenadr: .2byte 0
               S01:000020A8:  00 00
F04:0107       	putc: .byte 0xc3
               S01:000020AA:  C3
F04:0108       	putcadr: .2byte 0
               S01:000020AB:  00 00
F04:0109       	touppercase: .byte 0xc3
               S01:000020AD:  C3
F04:0110       	touppercaseadr: .2byte 0
               S01:000020AE:  00 00
F04:0111       	hextobyte: .byte 0xc3
               S01:000020B0:  C3
F04:0112       	hextobyteadr: .2byte 0
               S01:000020B1:  00 00
F04:0113       	directoryopen: .byte 0xc3
               S01:000020B3:  C3
F04:0114       	directoryopenadr: .2byte 0
               S01:000020B4:  00 00
F04:0115       	directorynextfile: .byte 0xc3
               S01:000020B6:  C3
F04:0116       	directorynextfileadr: .2byte 0
               S01:000020B7:  00 00
F04:0117       	getfilename: .byte 0xc3
               S01:000020B9:  C3
F04:0118       	getfilenameadr: .2byte 0
               S01:000020BA:  00 00
F04:0119       	createProcess: .byte 0xc3
               S01:000020BC:  C3
F04:0120       	createProcessadr: .2byte 0
               S01:000020BD:  00 00
F04:0121       	getcommandparams: .byte 0xc3
               S01:000020BF:  C3
F04:0122       	getcommandparamsadr: .2byte 0
               S01:000020C0:  00 00
F04:0123       	getmalloctable: .byte 0xc3
               S01:000020C2:  C3
F04:0124       	getmalloctableadr: .2byte 0
               S01:000020C3:  00 00
F04:0125       	Div8: .byte 0xc3
               S01:000020C5:  C3
F04:0126       	div8adr: .2byte 0
               S01:000020C6:  00 00
F04:0127       	setresetpage: .byte 0xc3
               S01:000020C8:  C3
F04:0128       	setresetpageadr: .2byte 0
               S01:000020C9:  00 00
F04:0129       	printhexL: .byte 0xc3
               S01:000020CB:  C3
F04:0130       	printhexLadr: .2byte 0
               S01:000020CC:  00 00
F04:0131       
F04:0132       _main:
F04:0133       .ifdef __DLL__
F04:0134       	ret
F04:0135       .endif
F00:0004       
F00:0005       	ld hl,msg
               S01:000020CE:  21 FF 20
F00:0006       	call println
               S01:000020D1:  CD 9B 20
F00:0007       	ld hl,params
               S01:000020D4:  21 28 21
F00:0008       	call getcommandparams
               S01:000020D7:  CD BF 20
F00:0009       	call println
               S01:000020DA:  CD 9B 20
F00:0010       	ld de,dumparea
               S01:000020DD:  11 5A 21
F00:0011       	ld hl,params
               S01:000020E0:  21 28 21
F00:0012       	ld a,1 ;# ask for zero terminated
               S01:000020E3:  3E 01
F00:0013       	call loadfile
               S01:000020E5:  CD A1 20
F00:0014       	cp 0
               S01:000020E8:  FE 00
F00:0015       	jp nz,error
               S01:000020EA:  C2 0F 21
F00:0016       	ld hl,dumparea
               S01:000020ED:  21 5A 21
F00:0017       	call println
               S01:000020F0:  CD 9B 20
F00:0018       	jp _exit
               S01:000020F3:  C3 FC 20
F00:0019       
F00:0020       _error: 
F00:0021       	ld hl,error
               S01:000020F6:  21 0F 21
F00:0022       	call println
               S01:000020F9:  CD 9B 20
F00:0023       _exit:
F00:0024       	ld a,0
               S01:000020FC:  3E 00
F00:0025       	ret
               S01:000020FE:  C9
F00:0026       
F00:0027       
F00:0028       msg: .string "the params are:"
               S01:000020FF:  74 68 65 20 70 61 72 61 6D 73 20 61 72 65 3A
F00:0029       error: .string "failed to load the file."
               S01:0000210F:  66 61 69 6C 65 64 20 74 6F 20 6C 6F 61 64 20 74
               S01:0000211F:  68 65 20 66 69 6C 65 2E
F00:0030       params: .space 50
F00:0031       
F00:0032       ;# this program does not work correctly with the memory management - this will need to be fixed in the near future
F00:0033       ENDADDRESS:
F00:0034       dumparea: .space 1 ;# this is not correct the loadfile will expand passed this


Sections:
S01  seg2000


Sources:
F00  type.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc


Symbols:
_error EXPR(8438=0x20f6) UNUSED ABS 
_exit EXPR(8444=0x20fc) ABS 
error EXPR(8463=0x210f) ABS 
dumparea EXPR(8538=0x215a) ABS 
params EXPR(8488=0x2128) ABS 
msg EXPR(8447=0x20ff) ABS 
printhexL EXPR(8395=0x20cb) UNUSED ABS 
setresetpage EXPR(8392=0x20c8) UNUSED ABS 
Div8 EXPR(8389=0x20c5) UNUSED ABS 
getmalloctable EXPR(8386=0x20c2) UNUSED ABS 
getcommandparams EXPR(8383=0x20bf) ABS 
createProcess EXPR(8380=0x20bc) UNUSED ABS 
getfilename EXPR(8377=0x20b9) UNUSED ABS 
directorynextfile EXPR(8374=0x20b6) UNUSED ABS 
directoryopen EXPR(8371=0x20b3) UNUSED ABS 
hextobyte EXPR(8368=0x20b0) UNUSED ABS 
touppercase EXPR(8365=0x20ad) UNUSED ABS 
putc EXPR(8362=0x20aa) UNUSED ABS 
strlen EXPR(8359=0x20a7) UNUSED ABS 
memset EXPR(8356=0x20a4) UNUSED ABS 
loadfile EXPR(8353=0x20a1) ABS 
printhex EXPR(8350=0x209e) UNUSED ABS 
println EXPR(8347=0x209b) ABS 
print EXPR(8344=0x2098) UNUSED ABS 
functionlookups EXPR(8343=0x2097) UNUSED ABS 
_main EXPR(8398=0x20ce) ABS 
printhexLadr EXPR(8396=0x20cc) ABS 
setresetpageadr EXPR(8393=0x20c9) ABS 
div8adr EXPR(8390=0x20c6) ABS 
getmalloctableadr EXPR(8387=0x20c3) ABS 
getcommandparamsadr EXPR(8384=0x20c0) ABS 
createProcessadr EXPR(8381=0x20bd) ABS 
getfilenameadr EXPR(8378=0x20ba) ABS 
directorynextfileadr EXPR(8375=0x20b7) ABS 
directoryopenadr EXPR(8372=0x20b4) ABS 
printlnadr EXPR(8348=0x209c) ABS 
hextobyteadr EXPR(8369=0x20b1) ABS 
touppercaseadr EXPR(8366=0x20ae) ABS 
putcadr EXPR(8363=0x20ab) ABS 
strlenadr EXPR(8360=0x20a8) ABS 
memsetadr EXPR(8357=0x20a5) ABS 
loadfileadr EXPR(8354=0x20a2) ABS 
printhexadr EXPR(8351=0x209f) ABS 
printadr EXPR(8345=0x2099) ABS 
ENDADDRESS EXPR(8538=0x215a) ABS 
 *current pc dummy* EXPR(8194=0x2002) INTERNAL PROT ABS 
NEXTNUMBER EXPR(22=0x16) UNUSED 
SETRESETPAGE EXPR(20=0x14) 
DIV8 EXPR(19=0x13) 
GETMALLOCTABLE EXPR(18=0x12) 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEXL EXPR(21=0x15) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) UNUSED 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) UNUSED 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
