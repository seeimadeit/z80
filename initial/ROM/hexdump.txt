F00:0001       .include "Routines.inc"
F01:0001       
F01:0002       # address where user programs load
F01:0003       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       .equ SERIALPORT2, 0x02
F02:0003       
F01:0004       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0005       .equ commandMemory, 0x1000
F01:0006       .equ userMemory,0x2000
F01:0007       .equ libMemory,0xF000
F01:0008       
F01:0009       .equ TRUE, 1
F01:0010       .equ FALSE, 0
F01:0011       
F01:0012       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0013       # ld a, PRINT
F01:0014       # call GetAddress
F01:0015       # address for print loaded into hl
F01:0016       # the value in hl can change between os versions so do not hard code the values
F01:0017       
F01:0018       .equ GetAddress, 0x0804
F01:0019       .equ PRINT,		1
F01:0020       .equ PRINTLN,	9
F01:0021       .equ PRINTHEX,	2
F01:0022       .equ LOADFILE,	3
F01:0023       .equ MEMSET,	4
F01:0024       .equ STRLEN,	5
F01:0025       .equ PUTC,		6
F01:0026       .equ TOUPPERCASE,7
F01:0027       .equ HEXTOBYTE,	8
F01:0028       .equ STRNCPY,10
F01:0029       .equ CREATEPROCESS,16
F01:0030       .equ GETCOMMANDPARAMS,17
F01:0031       # filesystem - primitive functions, probably going to change 
F01:0032       .equ DIRECTORYOPEN,13
F01:0033       .equ DIRECTORYNEXTFILE,14
F01:0034       .equ GETFILENAME,15
F01:0035       .equ GETMALLOCTABLE,18
F01:0036       
F01:0037       
F01:0038       
F01:0039       .equ NEXTNUMBER,19
F01:0040       
F01:0041       
F00:0002       .include "libs.inc"
F04:0001       
F04:0002       
F04:0003       	.ifdef __LIB__
F04:0004       		.ifdef __ORG__
F04:0005       			.org __ORG__
F04:0006       		.else 
F04:0007       			.org dllMemory
F04:0008       		.endif
F04:0009       		.2byte $ ;# load address
F04:0010       		.byte ((ENDADDRESS-$)/255) ;# memory required to load (in pages)
F04:0011       		.ifdef __STACK__
F04:0012       			.byte __STACK__
F04:0013       		.else 
F04:0014       			.byte 1 ;# stack size (in pages)
F04:0015       		.endif
F04:0016       		jp libaddress
F04:0017       initialize:
F04:0018       	.else
F04:0019       		.ifdef __ORG__
F04:0020       			.org __ORG__
F04:0021       		.else
F04:0022       			.org userMemory
F04:0023       		.endif
F04:0024       		.2byte $ ;# load address
               S01:00002000:  00 20
F04:0025       		.byte ((ENDADDRESS-$)/255) ;# memory required to load (in pages)
               S01:00002002:  02
F04:0026       		.ifdef __STACK__
F04:0027       			.byte __STACK__
F04:0028       		.else 
F04:0029       			.byte 1 ;# stack size (in pages)
               S01:00002003:  01
F04:0030       		.endif
F04:0031       	.endif
F04:0032       
F04:0033       	ld a,PRINT
               S01:00002004:  3E 01
F04:0034       	call GetAddress
               S01:00002006:  CD 04 08
F04:0035       	ld (printadr),hl
               S01:00002009:  22 81 20
F04:0036       	ld a,PRINTHEX
               S01:0000200C:  3E 02
F04:0037       	call GetAddress
               S01:0000200E:  CD 04 08
F04:0038       	ld (printhexadr),hl
               S01:00002011:  22 87 20
F04:0039       	ld a,LOADFILE
               S01:00002014:  3E 03
F04:0040       	call GetAddress
               S01:00002016:  CD 04 08
F04:0041       	ld (loadfileadr),hl
               S01:00002019:  22 8A 20
F04:0042       	ld a,MEMSET
               S01:0000201C:  3E 04
F04:0043       	call GetAddress
               S01:0000201E:  CD 04 08
F04:0044       	ld (memsetadr),hl
               S01:00002021:  22 8D 20
F04:0045       	ld a,STRLEN
               S01:00002024:  3E 05
F04:0046       	call GetAddress
               S01:00002026:  CD 04 08
F04:0047       	ld (strlenadr),hl
               S01:00002029:  22 90 20
F04:0048       	ld a,PUTC
               S01:0000202C:  3E 06
F04:0049       	call GetAddress
               S01:0000202E:  CD 04 08
F04:0050       	ld (putcadr),hl
               S01:00002031:  22 93 20
F04:0051       	ld a,TOUPPERCASE
               S01:00002034:  3E 07
F04:0052       	call GetAddress
               S01:00002036:  CD 04 08
F04:0053       	ld (touppercaseadr),hl
               S01:00002039:  22 96 20
F04:0054       	ld a,HEXTOBYTE
               S01:0000203C:  3E 08
F04:0055       	call GetAddress
               S01:0000203E:  CD 04 08
F04:0056       	ld (hextobyteadr),hl
               S01:00002041:  22 99 20
F04:0057       	ld a,PRINTLN
               S01:00002044:  3E 09
F04:0058       	call GetAddress
               S01:00002046:  CD 04 08
F04:0059       	ld (printlnadr),hl
               S01:00002049:  22 84 20
F04:0060       	ld a,DIRECTORYOPEN
               S01:0000204C:  3E 0D
F04:0061       	call GetAddress
               S01:0000204E:  CD 04 08
F04:0062       	ld (directoryopenadr),hl
               S01:00002051:  22 9C 20
F04:0063       	ld a,NEXTFILE
               S01:00002054:  3E 32
F04:0064       	call GetAddress
               S01:00002056:  CD 04 08
F04:0065       	ld (directorynextfileadr),hl
               S01:00002059:  22 9F 20
F04:0066       	ld a,GETFILENAME
               S01:0000205C:  3E 0F
F04:0067       	call GetAddress
               S01:0000205E:  CD 04 08
F04:0068       	ld (getfilenameadr),hl
               S01:00002061:  22 A2 20
F04:0069       	ld a,CREATEPROCESS
               S01:00002064:  3E 10
F04:0070       	call GetAddress
               S01:00002066:  CD 04 08
F04:0071       	ld (createProcessadr),hl
               S01:00002069:  22 A5 20
F04:0072       	ld a,GETCOMMANDPARAMS
               S01:0000206C:  3E 11
F04:0073       	call GetAddress
               S01:0000206E:  CD 04 08
F04:0074       	ld (getcommandparamsadr),hl
               S01:00002071:  22 A8 20
F04:0075       	ld a,GETMALLOCTABLE
               S01:00002074:  3E 12
F04:0076       	call GetAddress
               S01:00002076:  CD 04 08
F04:0077       	ld (getmalloctableadr),hl
               S01:00002079:  22 AB 20
F04:0078       
F04:0079       
F04:0080       	jp _main
               S01:0000207C:  C3 AD 20
F04:0081       
F04:0082       	functionlookups:
F04:0083       	.align 2
F04:0084       	print: .byte 0xc3
               S01:00002080:  C3
F04:0085       	printadr: .2byte 0
               S01:00002081:  00 00
F04:0086       	println: .byte 0xc3
               S01:00002083:  C3
F04:0087       	printlnadr: .2byte 0
               S01:00002084:  00 00
F04:0088       	printhex: .byte 0xc3
               S01:00002086:  C3
F04:0089       	printhexadr: .2byte 0
               S01:00002087:  00 00
F04:0090       	loadfile: .byte 0xc3
               S01:00002089:  C3
F04:0091       	loadfileadr: .2byte 0
               S01:0000208A:  00 00
F04:0092       	memset: .byte 0xc3
               S01:0000208C:  C3
F04:0093       	memsetadr: .2byte 0
               S01:0000208D:  00 00
F04:0094       	strlen: .byte 0xc3
               S01:0000208F:  C3
F04:0095       	strlenadr: .2byte 0
               S01:00002090:  00 00
F04:0096       	putc: .byte 0xc3
               S01:00002092:  C3
F04:0097       	putcadr: .2byte 0
               S01:00002093:  00 00
F04:0098       	touppercase: .byte 0xc3
               S01:00002095:  C3
F04:0099       	touppercaseadr: .2byte 0
               S01:00002096:  00 00
F04:0100       	hextobyte: .byte 0xc3
               S01:00002098:  C3
F04:0101       	hextobyteadr: .2byte 0
               S01:00002099:  00 00
F04:0102       	directoryopen: .byte 0xc3
               S01:0000209B:  C3
F04:0103       	directoryopenadr: .2byte 0
               S01:0000209C:  00 00
F04:0104       	directorynextfile: .byte 0xc3
               S01:0000209E:  C3
F04:0105       	directorynextfileadr: .2byte 0
               S01:0000209F:  00 00
F04:0106       	getfilename: .byte 0xc3
               S01:000020A1:  C3
F04:0107       	getfilenameadr: .2byte 0
               S01:000020A2:  00 00
F04:0108       	createProcess: .byte 0xc3
               S01:000020A4:  C3
F04:0109       	createProcessadr: .2byte 0
               S01:000020A5:  00 00
F04:0110       	getcommandparams: .byte 0xc3
               S01:000020A7:  C3
F04:0111       	getcommandparamsadr: .2byte 0
               S01:000020A8:  00 00
F04:0112       	getmalloctable: .byte 0xc3
               S01:000020AA:  C3
F04:0113       	getmalloctableadr: .2byte 0
               S01:000020AB:  00 00
F04:0114       
F04:0115       _main:
F04:0116       .ifdef __DLL__
F04:0117       	ret
F04:0118       .endif
F00:0003       ;# this is unfinished. in the function getcharacter, it will display the ascii printable characters
F00:0004       ;# but it will also print characters passed the bytes loaded from the file. the hex display will
F00:0005       ;# stop printing at the correct place, but the ascii display does not. I was using the
F00:0006       ;# length variable to determine when to display the characters, I don't think this approad was working.
F00:0007       ;# so look at it again when your not so tired. Peter ps. just had a though, when you stop printing in the
F00:0008       ;# hex area store the number of bytes to still print, then you could use that to ... i don't know - im tired'
F00:0009       
F00:0010       	call lengthreset
               S01:000020AD:  CD F8 21
F00:0011       	ld hl,msg
               S01:000020B0:  21 44 22
F00:0012       	call println
               S01:000020B3:  CD 83 20
F00:0013       	ld hl,params
               S01:000020B6:  21 6D 22
F00:0014       	call getcommandparams
               S01:000020B9:  CD A7 20
F00:0015       	call println
               S01:000020BC:  CD 83 20
F00:0016       	ld de,dumparea
               S01:000020BF:  11 9F 22
F00:0017       	ld hl,params
               S01:000020C2:  21 6D 22
F00:0018       	ld a,1 ;# ask for zero terminated
               S01:000020C5:  3E 01
F00:0019       	call loadfile
               S01:000020C7:  CD 89 20
F00:0020       	cp 0
               S01:000020CA:  FE 00
F00:0021       	jp nz,error
               S01:000020CC:  C2 54 22
F00:0022       	;# save the de register as it has the load size
F00:0023       
F00:0024       
F00:0025       	ld ix,losize
               S01:000020CF:  DD 21 3D 22
F00:0026       	ld (ix),e
               S01:000020D3:  DD 73 00
F00:0027       	ld (ix+1),d
               S01:000020D6:  DD 72 01
F00:0028       
F00:0029       	ld hl,dumparea
               S01:000020D9:  21 9F 22
F00:0030       	call hexdumpprint
               S01:000020DC:  CD EB 20
F00:0031       	jp _exit
               S01:000020DF:  C3 E8 20
F00:0032       
F00:0033       _error: 
F00:0034       	ld hl,error
               S01:000020E2:  21 54 22
F00:0035       	call println
               S01:000020E5:  CD 83 20
F00:0036       _exit:
F00:0037       	ld a,0
               S01:000020E8:  3E 00
F00:0038       	ret
               S01:000020EA:  C9
F00:0039       
F00:0040       
F00:0041       
F00:0042       
F00:0043       hexdumpprint:
F00:0044       
F00:0045       	;# print the heading
F00:0046       
F00:0047       	ld b,7
               S01:000020EB:  06 07
F00:0048       _sp$1:
F00:0049       	ld a,' ' ;# 7 spaces
               S01:000020ED:  3E 20
F00:0050       	call putc
               S01:000020EF:  CD 92 20
F00:0051       	djnz _sp$1
               S01:000020F2:  10 F9
F00:0052       
F00:0053       	ld a,0 ;# for column header
               S01:000020F4:  3E 00
F00:0054       	ld b,16 ;# 16 column headers
               S01:000020F6:  06 10
F00:0055       _col$1:
F00:0056       	call printhex
               S01:000020F8:  CD 86 20
F00:0057       	inc a
               S01:000020FB:  3C
F00:0058       
F00:0059       	push af
               S01:000020FC:  F5
F00:0060       	ld a,' '
               S01:000020FD:  3E 20
F00:0061       	call putc
               S01:000020FF:  CD 92 20
F00:0062       	pop af
               S01:00002102:  F1
F00:0063       
F00:0064       	djnz _col$1
               S01:00002103:  10 F3
F00:0065       
F00:0066       	ld hl,0 ;# newline
               S01:00002105:  21 00 00
F00:0067       	call println
               S01:00002108:  CD 83 20
F00:0068       
F00:0069       	ld hl,dumparea
               S01:0000210B:  21 9F 22
F00:0070       
F00:0071       _reload:
F00:0072       	ld b,16 ;# outer loop
               S01:0000210E:  06 10
F00:0073       _hexdp0:
F00:0074       	call issize0
               S01:00002110:  CD 9E 21
F00:0075       	cp 0
               S01:00002113:  FE 00
F00:0076       	ret z
               S01:00002115:  C8
F00:0077       
F00:0078       	push bc
               S01:00002116:  C5
F00:0079       
F00:0080       	ld b,16 ;# inner loop
               S01:00002117:  06 10
F00:0081       		;# print the address
F00:0082       	push hl
               S01:00002119:  E5
F00:0083       	ld hl,hexdumpprefix
               S01:0000211A:  21 41 22
F00:0084       	call print
               S01:0000211D:  CD 80 20
F00:0085       	;#new code
F00:0086       	ld hl,(lolength)
               S01:00002120:  2A 3F 22
F00:0087       	ld a,h
               S01:00002123:  7C
F00:0088       	call printhex
               S01:00002124:  CD 86 20
F00:0089       	ld a,l
               S01:00002127:  7D
F00:0090       	call printhex
               S01:00002128:  CD 86 20
F00:0091       	;# end new code
F00:0092       	pop hl
               S01:0000212B:  E1
F00:0093       
F00:0094       ;	ld a,h
F00:0095       ;	call printhex
F00:0096       ;	ld a,l
F00:0097       ;	call printhex
F00:0098       	ld a,' '
               S01:0000212C:  3E 20
F00:0099       	call putc
               S01:0000212E:  CD 92 20
F00:0100       _hexdp$1:
F00:0101       
F00:0102       ; moved	call lengthincrement
F00:0103       	call sizedecrement
               S01:00002131:  CD BC 21
F00:0104       	;# print the byte values
F00:0105       	ld a,(hl)
               S01:00002134:  7E
F00:0106       	call printhex
               S01:00002135:  CD 86 20
F00:0107       	ld a,' '
               S01:00002138:  3E 20
F00:0108       	call putc
               S01:0000213A:  CD 92 20
F00:0109       	;# next byte
F00:0110       
F00:0111       	inc hl
               S01:0000213D:  23
F00:0112       	call issize0
               S01:0000213E:  CD 9E 21
F00:0113       	cp 0
               S01:00002141:  FE 00
F00:0114       	jp z,4$
               S01:00002143:  CA 4B 21
F00:0115       	djnz _hexdp$1
               S01:00002146:  10 E9
F00:0116       	jp 3$
               S01:00002148:  C3 59 21
F00:0117       4$:
F00:0118       	
F00:0119       	push hl ;# save hl because we need to keep track of the location
               S01:0000214B:  E5
F00:0120       	pop de
               S01:0000214C:  D1
F00:0121       	dec b
               S01:0000214D:  05
F00:0122       41$:
F00:0123       	ld hl,_3spaces
               S01:0000214E:  21 B8 21
F00:0124       	call print
               S01:00002151:  CD 80 20
F00:0125       	inc de
               S01:00002154:  13
F00:0126       
F00:0127       	djnz 41$
               S01:00002155:  10 F7
F00:0128       	push de
               S01:00002157:  D5
F00:0129       	pop hl
               S01:00002158:  E1
F00:0130       3$:
F00:0131       	;# now repeat the line and display the ascii value
F00:0132       	or a ;# reset carry flag
               S01:00002159:  B7
F00:0133       	ld de,16
               S01:0000215A:  11 10 00
F00:0134       	sbc hl,de ;# subtrack 16bytes
               S01:0000215D:  ED 52
F00:0135       
F00:0136       	ld a,'|' ;# output border character
               S01:0000215F:  3E 7C
F00:0137       	call putc
               S01:00002161:  CD 92 20
F00:0138       	ld b,16
               S01:00002164:  06 10
F00:0139       _dexdpc$1:
F00:0140       	call getcharacter
               S01:00002166:  CD 88 21
F00:0141       	call putc
               S01:00002169:  CD 92 20
F00:0142       	inc hl
               S01:0000216C:  23
F00:0143       	djnz _dexdpc$1
               S01:0000216D:  10 F7
F00:0144       
F00:0145       	ld a,"|" ;# output border character
               S01:0000216F:  3E 7C
F00:0146       	call putc
               S01:00002171:  CD 92 20
F00:0147       
F00:0148       	;# next line
F00:0149       	push hl
               S01:00002174:  E5
F00:0150       	ld hl,0
               S01:00002175:  21 00 00
F00:0151       	call println
               S01:00002178:  CD 83 20
F00:0152       	pop hl
               S01:0000217B:  E1
F00:0153       	pop bc
               S01:0000217C:  C1
F00:0154       	djnz _hexdp0
               S01:0000217D:  10 91
F00:0155       	call issize0
               S01:0000217F:  CD 9E 21
F00:0156       	cp 0
               S01:00002182:  FE 00
F00:0157       	jp nz,_reload
               S01:00002184:  C2 0E 21
F00:0158       
F00:0159       	ret
               S01:00002187:  C9
F00:0160       
F00:0161       getcharacter: ;# need to move some code out of the djnz loop because it was too big
F00:0162       
F00:0163       
F00:0164       	call lengthincrement
               S01:00002188:  CD 0B 22
F00:0165       	ld a,(hl)
               S01:0000218B:  7E
F00:0166       	cp 32 ;# space
               S01:0000218C:  FE 20
F00:0167       	jp p, _nex$2 ;# if character >= 32 jump
               S01:0000218E:  F2 96 21
F00:0168       	ld a,'.'
               S01:00002191:  3E 2E
F00:0169       	jp _prt$
               S01:00002193:  C3 9D 21
F00:0170       _nex$2:
F00:0171       	cp 127 ;# delete
               S01:00002196:  FE 7F
F00:0172       	jp m,_prt$ ;# if character < 127 jump print
               S01:00002198:  FA 9D 21
F00:0173       	ld a,'.' ;# else print a dot
               S01:0000219B:  3E 2E
F00:0174       
F00:0175       _prt$:
F00:0176       
F00:0177       	ret
               S01:0000219D:  C9
F00:0178       
F00:0179       issize0:
F00:0180       	ld ix,losize
               S01:0000219E:  DD 21 3D 22
F00:0181       	ld a,(ix)
               S01:000021A2:  DD 7E 00
F00:0182       	cp 0
               S01:000021A5:  FE 00
F00:0183       	jp nz,_not
               S01:000021A7:  C2 B5 21
F00:0184       
F00:0185       	ld a,(ix+1)
               S01:000021AA:  DD 7E 01
F00:0186       	cp 0
               S01:000021AD:  FE 00
F00:0187       	jp nz,_not
               S01:000021AF:  C2 B5 21
F00:0188       	ld a,0
               S01:000021B2:  3E 00
F00:0189       	ret
               S01:000021B4:  C9
F00:0190       _not:
F00:0191       	ld a,1
               S01:000021B5:  3E 01
F00:0192       	ret
               S01:000021B7:  C9
F00:0193       _3spaces: .string "   "
               S01:000021B8:  20 20 20
F00:0194       ;# this will decrement to zero but will not go below zero
F00:0195       ;# if zero A register = 0
F00:0196       ;# if not zero A register = 1
F00:0197       sizedecrement:
F00:0198       
F00:0199       	push ix
               S01:000021BC:  DD E5
F00:0200       	push hl
               S01:000021BE:  E5
F00:0201       
F00:0202       
F00:0203       	ld ix,losize
               S01:000021BF:  DD 21 3D 22
F00:0204       	ld l,(ix)
               S01:000021C3:  DD 6E 00
F00:0205       	ld h,(ix+1)
               S01:000021C6:  DD 66 01
F00:0206       
F00:0207       	ld a,l
               S01:000021C9:  7D
F00:0208       	
F00:0209       	cp 0
               S01:000021CA:  FE 00
F00:0210       	jp nz,_4$
               S01:000021CC:  C2 DA 21
F00:0211       	ld a,h
               S01:000021CF:  7C
F00:0212       	cp 0
               S01:000021D0:  FE 00
F00:0213       	jp nz,_4$
               S01:000021D2:  C2 DA 21
F00:0214       	ld a,0
               S01:000021D5:  3E 00
F00:0215       	jp _2$
               S01:000021D7:  C3 F4 21
F00:0216       
F00:0217       _4$:
F00:0218       	dec HL
               S01:000021DA:  2B
F00:0219       	ld (ix),l
               S01:000021DB:  DD 75 00
F00:0220       	ld (ix+1),h
               S01:000021DE:  DD 74 01
F00:0221       	ld a,l
               S01:000021E1:  7D
F00:0222       	cp 0
               S01:000021E2:  FE 00
F00:0223       	jp nz, _1$
               S01:000021E4:  C2 F2 21
F00:0224       	ld a,h
               S01:000021E7:  7C
F00:0225       	cp 0
               S01:000021E8:  FE 00
F00:0226       	jp nz,_1$
               S01:000021EA:  C2 F2 21
F00:0227       
F00:0228       
F00:0229       
F00:0230       	ld a,0	;# yes it's zero
               S01:000021ED:  3E 00
F00:0231       	jp _2$
               S01:000021EF:  C3 F4 21
F00:0232       _1$:		;# not zero yet
F00:0233       	ld a,1
               S01:000021F2:  3E 01
F00:0234       	
F00:0235       _2$:
F00:0236       	pop hl
               S01:000021F4:  E1
F00:0237       	pop ix
               S01:000021F5:  DD E1
F00:0238       	ret
               S01:000021F7:  C9
F00:0239       
F00:0240       lengthreset:
F00:0241       	push ix
               S01:000021F8:  DD E5
F00:0242       	push af
               S01:000021FA:  F5
F00:0243       	ld a,0
               S01:000021FB:  3E 00
F00:0244       	ld ix,lolength
               S01:000021FD:  DD 21 3F 22
F00:0245       	ld (ix),a
               S01:00002201:  DD 77 00
F00:0246       	ld (ix+1),a
               S01:00002204:  DD 77 01
F00:0247       	pop af
               S01:00002207:  F1
F00:0248       	pop ix
               S01:00002208:  DD E1
F00:0249       	ret
               S01:0000220A:  C9
F00:0250       
F00:0251       lengthincrement:
F00:0252       	push ix
               S01:0000220B:  DD E5
F00:0253       	push hl
               S01:0000220D:  E5
F00:0254       
F00:0255       	ld ix,lolength
               S01:0000220E:  DD 21 3F 22
F00:0256       	ld l,(ix)
               S01:00002212:  DD 6E 00
F00:0257       	ld h,(ix+1)
               S01:00002215:  DD 66 01
F00:0258       	inc HL
               S01:00002218:  23
F00:0259       	ld (ix),l
               S01:00002219:  DD 75 00
F00:0260       	ld (ix+1),h
               S01:0000221C:  DD 74 01
F00:0261       
F00:0262       	pop hl
               S01:0000221F:  E1
F00:0263       	pop ix
               S01:00002220:  DD E1
F00:0264       	ret
               S01:00002222:  C9
F00:0265       
F00:0266       islength0:
F00:0267       	ld ix,lolength
               S01:00002223:  DD 21 3F 22
F00:0268       	ld a,(ix)
               S01:00002227:  DD 7E 00
F00:0269       	cp 0
               S01:0000222A:  FE 00
F00:0270       	jp nz,_not
               S01:0000222C:  C2 B5 21
F00:0271       
F00:0272       	ld a,(ix+1)
               S01:0000222F:  DD 7E 01
F00:0273       	cp 0
               S01:00002232:  FE 00
F00:0274       	jp nz,_1$
               S01:00002234:  C2 3A 22
F00:0275       	ld a,0
               S01:00002237:  3E 00
F00:0276       	ret
               S01:00002239:  C9
F00:0277       _1$:
F00:0278       	ld a,1
               S01:0000223A:  3E 01
F00:0279       	ret
               S01:0000223C:  C9
F00:0280       
F00:0281       
F00:0282       losize: .byte 0
               S01:0000223D:  00
F00:0283       hisize: .byte 0
               S01:0000223E:  00
F00:0284       
F00:0285       lolength: .byte 0
               S01:0000223F:  00
F00:0286       hilength: .byte 0
               S01:00002240:  00
F00:0287       
F00:0288       hexdumpprefix: .string "0x"
               S01:00002241:  30 78
F00:0289       	
F00:0290       msg: .string "the params are:"
               S01:00002244:  74 68 65 20 70 61 72 61 6D 73 20 61 72 65 3A
F00:0291       error: .string "failed to load the file."
               S01:00002254:  66 61 69 6C 65 64 20 74 6F 20 6C 6F 61 64 20 74
               S01:00002264:  68 65 20 66 69 6C 65 2E
F00:0292       params: .space 50
F00:0293       
F00:0294       ;# this work will not work correctly without the memory management code
F00:0295       ENDADDRESS:
F00:0296       
F00:0297       dumparea: .space 1 ;# this is not correct the loadfile will expand passed this
F00:0298       
F00:0299       


Sections:
S01  seg2000


Sources:
F00  hexdump.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc


Symbols:
hilength EXPR(8768=0x2240) UNUSED ABS 
hisize EXPR(8766=0x223e) UNUSED ABS 
 islength0 _1$ EXPR(8762=0x223a) ABS 
islength0 EXPR(8739=0x2223) UNUSED ABS 
 sizedecrement _1$ EXPR(8690=0x21f2) ABS 
 sizedecrement _2$ EXPR(8692=0x21f4) ABS 
 sizedecrement _4$ EXPR(8666=0x21da) ABS 
_not EXPR(8629=0x21b5) ABS 
_prt$ EXPR(8605=0x219d) ABS 
_nex$2 EXPR(8598=0x2196) ABS 
lengthincrement EXPR(8715=0x220b) ABS 
getcharacter EXPR(8584=0x2188) ABS 
_dexdpc$1 EXPR(8550=0x2166) ABS 
_3spaces EXPR(8632=0x21b8) ABS 
 _hexdp$1 41$ EXPR(8526=0x214e) ABS 
 _hexdp$1 3$ EXPR(8537=0x2159) ABS 
 _hexdp$1 4$ EXPR(8523=0x214b) ABS 
sizedecrement EXPR(8636=0x21bc) ABS 
_hexdp$1 EXPR(8497=0x2131) ABS 
lolength EXPR(8767=0x223f) ABS 
hexdumpprefix EXPR(8769=0x2241) ABS 
issize0 EXPR(8606=0x219e) ABS 
_hexdp0 EXPR(8464=0x2110) ABS 
_reload EXPR(8462=0x210e) ABS 
_col$1 EXPR(8440=0x20f8) ABS 
_sp$1 EXPR(8429=0x20ed) ABS 
_error EXPR(8418=0x20e2) UNUSED ABS 
_exit EXPR(8424=0x20e8) ABS 
hexdumpprint EXPR(8427=0x20eb) ABS 
losize EXPR(8765=0x223d) ABS 
error EXPR(8788=0x2254) ABS 
dumparea EXPR(8863=0x229f) ABS 
params EXPR(8813=0x226d) ABS 
msg EXPR(8772=0x2244) ABS 
lengthreset EXPR(8696=0x21f8) ABS 
getmalloctable EXPR(8362=0x20aa) UNUSED ABS 
getcommandparams EXPR(8359=0x20a7) ABS 
createProcess EXPR(8356=0x20a4) UNUSED ABS 
getfilename EXPR(8353=0x20a1) UNUSED ABS 
directorynextfile EXPR(8350=0x209e) UNUSED ABS 
directoryopen EXPR(8347=0x209b) UNUSED ABS 
hextobyte EXPR(8344=0x2098) UNUSED ABS 
touppercase EXPR(8341=0x2095) UNUSED ABS 
putc EXPR(8338=0x2092) ABS 
strlen EXPR(8335=0x208f) UNUSED ABS 
memset EXPR(8332=0x208c) UNUSED ABS 
loadfile EXPR(8329=0x2089) ABS 
printhex EXPR(8326=0x2086) ABS 
println EXPR(8323=0x2083) ABS 
print EXPR(8320=0x2080) ABS 
functionlookups EXPR(8319=0x207f) UNUSED ABS 
_main EXPR(8365=0x20ad) ABS 
getmalloctableadr EXPR(8363=0x20ab) ABS 
getcommandparamsadr EXPR(8360=0x20a8) ABS 
createProcessadr EXPR(8357=0x20a5) ABS 
getfilenameadr EXPR(8354=0x20a2) ABS 
directorynextfileadr EXPR(8351=0x209f) ABS 
directoryopenadr EXPR(8348=0x209c) ABS 
printlnadr EXPR(8324=0x2084) ABS 
hextobyteadr EXPR(8345=0x2099) ABS 
touppercaseadr EXPR(8342=0x2096) ABS 
putcadr EXPR(8339=0x2093) ABS 
strlenadr EXPR(8336=0x2090) ABS 
memsetadr EXPR(8333=0x208d) ABS 
loadfileadr EXPR(8330=0x208a) ABS 
printhexadr EXPR(8327=0x2087) ABS 
printadr EXPR(8321=0x2081) ABS 
ENDADDRESS EXPR(8863=0x229f) ABS 
 *current pc dummy* EXPR(8194=0x2002) INTERNAL PROT ABS 
NEXTNUMBER EXPR(19=0x13) UNUSED 
GETMALLOCTABLE EXPR(18=0x12) 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) UNUSED 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) UNUSED 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) UNUSED 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
