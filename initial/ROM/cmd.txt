F00:0001       
F00:0002       .set __ORG__,commandMemory
F00:0003       
F00:0004       .include "Routines.inc"
F01:0001       
F01:0002       .macro DEBUG CHARACTER='!'
F01:0009       
F01:0010       
F01:0011       .macro DEBUGHEX CHARACTER='!'
F01:0018       
F01:0019       
F01:0020       .macro PRINTLN
F01:0025       
F01:0026       
F01:0027       .macro DPRINTLN MSG=""
F01:0034       
F01:0035       
F01:0036       
F01:0037       # address where user programs load
F01:0038       .include "SERIAL.inc"
F02:0001       .equ SERIALPORT , 0x01
F02:0002       .equ SERIALPORT2, 0x02
F02:0003       
F01:0039       .include "SDCARD.inc"
F03:0001       .equ SDCARD,0x05
F03:0002       ; ******* SDCARD *********
F03:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F03:0004       .equ FILENAMECLEAR ,1
F03:0005       
F03:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F03:0007       .equ OPEN ,2
F03:0008       
F03:0009       ; z80 out - close: no return value
F03:0010       .equ CLOSE ,3
F03:0011       
F03:0012       ; z80 out + out - filenameappend: no return value
F03:0013       .equ FILENAMEAPPEND ,4
F03:0014       
F03:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F03:0016       .equ READNEXTBYTE ,5
F03:0017       
F03:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F03:0019       .equ AVAILABLE ,6
F03:0020       
F03:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F03:0022       .equ OPENWRITE,7
F03:0023       
F03:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F03:0025       .equ WRITEBYTE,8
F03:0026       
F03:0027       ;#===============================
F03:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F03:0029       .equ GETNAME,0x20
F03:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F03:0031       .equ NAMEAVAILABLE,0x21
F03:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F03:0033       .equ OPENDIRECTORY,0x31
F03:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F03:0035       .equ NEXTFILE,0x32
F01:0040       .equ commandMemory, 0x2000
F01:0041       .equ userMemory,0x3000
F01:0042       .equ libMemory,0xF000
F01:0043       
F01:0044       .equ TRUE, 1
F01:0045       .equ FALSE, 0
F01:0046       
F01:0047       # the only fixed address (i hope), use it to get the address of utilities methods
F01:0048       # ld a, PRINT
F01:0049       # call GetAddress
F01:0050       # address for print loaded into hl
F01:0051       # the value in hl can change between os versions so do not hard code the values
F01:0052       
F01:0053       .equ GetAddress, 0x0804
F01:0054       .equ SETPROCID,28
F01:0055       .equ PRINT,		1
F01:0056       .equ PRINTLN,	9
F01:0057       .equ PRINTHEX,	2
F01:0058       .equ PRINTHEXL,21
F01:0059       .equ LOADFILE,	3
F01:0060       .equ MEMSET,	4
F01:0061       .equ STRLEN,	5
F01:0062       .equ STRCPY,24
F01:0063       .equ STRNCPY,10
F01:0064       .equ PUTC,		6
F01:0065       .equ TOUPPERCASE,7
F01:0066       .equ HEXTOBYTE,	8
F01:0067       .equ CREATEPROCESS,16
F01:0068       .equ GETCOMMANDPARAMS,17
F01:0069       # filesystem - primitive functions, probably going to change 
F01:0070       .equ DIRECTORYOPEN,13
F01:0071       .equ DIRECTORYNEXTFILE,14
F01:0072       .equ GETFILENAME,15
F01:0073       .equ GETMALLOCTABLE,18
F01:0074       .equ DIV8,19
F01:0075       .equ SETRESETPAGE,20
F01:0076       .equ STARTPROCESSINFO,22
F01:0077       .equ NEXTPROCESSINFO,23
F01:0078       .equ GETPROCESSBYID,26
F01:0079       .equ MULTIPLY8,27
F01:0080       .equ EXITPROCESS,29
F01:0081       
F01:0082       
F01:0083       
F01:0084       
F01:0085       .equ NEXTNUMBER,30
F01:0086       
F01:0087       
F00:0005       .include "libs.inc"
F04:0001       
F04:0002       
F04:0003       	.ifdef __LIB__
F04:0004       		.ifdef __ORG__
F04:0005       			.org __ORG__
F04:0006       		.else 
F04:0007       			.org dllMemory
F04:0008       		.endif
F04:0009       		.2byte $ ;# load address
F04:0010       		.byte ((ENDADDRESS-$)/255)+1 ;# memory required to load (in pages)
F04:0011       		.ifdef __STACK__
F04:0012       			.byte __STACK__
F04:0013       		.else 
F04:0014       			.byte 1 ;# stack size (in pages)
F04:0015       		.endif
F04:0016       		jp libaddress
F04:0017       initialize:
F04:0018       	.else
F04:0019       		.ifdef __ORG__
F04:0020       			.org __ORG__
F04:0021       		.else
F04:0022       			.org userMemory
F04:0023       		.endif
F04:0024       		.2byte $ ;# load address
               S01:00002000:  00 20
F04:0025       		.byte ((ENDADDRESS-$)/255)+1 ;# memory required to load (in pages)
               S01:00002002:  0D
F04:0026       		.ifdef __STACK__
F04:0027       			.byte __STACK__
F04:0028       		.else 
F04:0029       			.byte 1 ;# stack size (in pages)
               S01:00002003:  01
F04:0030       		.endif
F04:0031       	.endif
F04:0032       
F04:0033       	ld a,PRINT
               S01:00002004:  3E 01
F04:0034       	call GetAddress
               S01:00002006:  CD 04 08
F04:0035       	ld (printadr),hl
               S01:00002009:  22 0D 21
F04:0036       	ld a,PRINTHEX
               S01:0000200C:  3E 02
F04:0037       	call GetAddress
               S01:0000200E:  CD 04 08
F04:0038       	ld (printhexadr),hl
               S01:00002011:  22 13 21
F04:0039       	ld a,LOADFILE
               S01:00002014:  3E 03
F04:0040       	call GetAddress
               S01:00002016:  CD 04 08
F04:0041       	ld (loadfileadr),hl
               S01:00002019:  22 16 21
F04:0042       	ld a,MEMSET
               S01:0000201C:  3E 04
F04:0043       	call GetAddress
               S01:0000201E:  CD 04 08
F04:0044       	ld (memsetadr),hl
               S01:00002021:  22 19 21
F04:0045       	ld a,STRLEN
               S01:00002024:  3E 05
F04:0046       	call GetAddress
               S01:00002026:  CD 04 08
F04:0047       	ld (strlenadr),hl
               S01:00002029:  22 1C 21
F04:0048       	ld a,PUTC
               S01:0000202C:  3E 06
F04:0049       	call GetAddress
               S01:0000202E:  CD 04 08
F04:0050       	ld (putcadr),hl
               S01:00002031:  22 1F 21
F04:0051       	ld a,TOUPPERCASE
               S01:00002034:  3E 07
F04:0052       	call GetAddress
               S01:00002036:  CD 04 08
F04:0053       	ld (touppercaseadr),hl
               S01:00002039:  22 22 21
F04:0054       	ld a,HEXTOBYTE
               S01:0000203C:  3E 08
F04:0055       	call GetAddress
               S01:0000203E:  CD 04 08
F04:0056       	ld (hextobyteadr),hl
               S01:00002041:  22 25 21
F04:0057       	ld a,PRINTLN
               S01:00002044:  3E 09
F04:0058       	call GetAddress
               S01:00002046:  CD 04 08
F04:0059       	ld (printlnadr),hl
               S01:00002049:  22 10 21
F04:0060       	ld a,DIRECTORYOPEN
               S01:0000204C:  3E 0D
F04:0061       	call GetAddress
               S01:0000204E:  CD 04 08
F04:0062       	ld (directoryopenadr),hl
               S01:00002051:  22 28 21
F04:0063       	ld a,NEXTFILE
               S01:00002054:  3E 32
F04:0064       	call GetAddress
               S01:00002056:  CD 04 08
F04:0065       	ld (directorynextfileadr),hl
               S01:00002059:  22 2B 21
F04:0066       	ld a,GETFILENAME
               S01:0000205C:  3E 0F
F04:0067       	call GetAddress
               S01:0000205E:  CD 04 08
F04:0068       	ld (getfilenameadr),hl
               S01:00002061:  22 2E 21
F04:0069       	ld a,CREATEPROCESS
               S01:00002064:  3E 10
F04:0070       	call GetAddress
               S01:00002066:  CD 04 08
F04:0071       	ld (createProcessadr),hl
               S01:00002069:  22 31 21
F04:0072       	ld a,GETCOMMANDPARAMS
               S01:0000206C:  3E 11
F04:0073       	call GetAddress
               S01:0000206E:  CD 04 08
F04:0074       	ld (getcommandparamsadr),hl
               S01:00002071:  22 34 21
F04:0075       	ld a,GETMALLOCTABLE
               S01:00002074:  3E 12
F04:0076       	call GetAddress
               S01:00002076:  CD 04 08
F04:0077       	ld (getmalloctableadr),hl
               S01:00002079:  22 37 21
F04:0078       	ld a,DIV8
               S01:0000207C:  3E 13
F04:0079       	call GetAddress
               S01:0000207E:  CD 04 08
F04:0080       	ld (div8adr),hl
               S01:00002081:  22 3A 21
F04:0081       	ld a,SETRESETPAGE
               S01:00002084:  3E 14
F04:0082       	call GetAddress
               S01:00002086:  CD 04 08
F04:0083       	ld (setresetpageadr),hl
               S01:00002089:  22 3D 21
F04:0084       	ld a,PRINTHEXL
               S01:0000208C:  3E 15
F04:0085       	call GetAddress
               S01:0000208E:  CD 04 08
F04:0086       	ld (printhexLadr),hl
               S01:00002091:  22 40 21
F04:0087       	ld a,STARTPROCESSINFO
               S01:00002094:  3E 16
F04:0088       	call GetAddress
               S01:00002096:  CD 04 08
F04:0089       	ld (startprocessinfoadr),hl
               S01:00002099:  22 43 21
F04:0090       	ld a,NEXTPROCESSINFO
               S01:0000209C:  3E 17
F04:0091       	call GetAddress
               S01:0000209E:  CD 04 08
F04:0092       	ld (nextprocessinfoadr),hl
               S01:000020A1:  22 46 21
F04:0093       	ld a,STRCPY
               S01:000020A4:  3E 18
F04:0094       	call GetAddress
               S01:000020A6:  CD 04 08
F04:0095       	ld (strcpyadr),hl
               S01:000020A9:  22 49 21
F04:0096       	ld a,STRNCPY
               S01:000020AC:  3E 0A
F04:0097       	call GetAddress
               S01:000020AE:  CD 04 08
F04:0098       	ld (strncpyadr),hl
               S01:000020B1:  22 4C 21
F04:0099       	ld a,GETPROCESSBYID
               S01:000020B4:  3E 1A
F04:0100       	call GetAddress
               S01:000020B6:  CD 04 08
F04:0101       	ld (getprocessbyidadr),hl
               S01:000020B9:  22 4F 21
F04:0102       	ld a,MULTIPLY8
               S01:000020BC:  3E 1B
F04:0103       	call GetAddress
               S01:000020BE:  CD 04 08
F04:0104       	ld (Mul8badr),hl
               S01:000020C1:  22 52 21
F04:0105       	ld a,SETPROCID
               S01:000020C4:  3E 1C
F04:0106       	call GetAddress
               S01:000020C6:  CD 04 08
F04:0107       	ld (getprocidadr),hl
               S01:000020C9:  22 55 21
F04:0108       	call getprocid
               S01:000020CC:  CD 54 21
F04:0109       	ld (processid),a
               S01:000020CF:  32 0B 21
F04:0110       	call printhex
               S01:000020D2:  CD 12 21
F04:0111       	ld hl,(_getprocessid)
               S01:000020D5:  2A 00 21
F04:0112       	ld (getprocidadr),hl
               S01:000020D8:  22 55 21
F04:0113       	call getprocid
               S01:000020DB:  CD 54 21
F04:0114       	call printhex
               S01:000020DE:  CD 12 21
F04:0115       	ld a,EXITPROCESS
               S01:000020E1:  3E 1D
F04:0116       	call GetAddress
               S01:000020E3:  CD 04 08
F04:0117       	ld (exitprocessadr),hl
               S01:000020E6:  22 58 21
F04:0118       
F04:0119       
F04:0120       
F04:0121       
F04:0122       	
F04:0123       	.ifdef __LIB__
F04:0124       		ret
F04:0125       	.endif
F04:0126       
F04:0127       
F04:0128       	#jp _main
F04:0129       	call _main
               S01:000020E9:  CD 5A 21
F04:0130       
F04:0131       	exit:
F04:0132       	DEBUG '^'
F05:0001       # example : DEBUG '!'
F05:0002       #      or : DEBUG h
F05:0003       		push af
               S01:000020EC:  F5
F05:0004       		ld a,94
               S01:000020ED:  3E 5E
F05:0005       		call putc
               S01:000020EF:  CD 1E 21
F05:0006       		pop af
               S01:000020F2:  F1
F04:0133       		push af
               S01:000020F3:  F5
F04:0134       		ld a,(processid)
               S01:000020F4:  3A 0B 21
F04:0135       		ld b,a
               S01:000020F7:  47
F04:0136       		call printhex
               S01:000020F8:  CD 12 21
F04:0137       		pop af
               S01:000020FB:  F1
F04:0138       	
F04:0139       		call exitprocess
               S01:000020FC:  CD 57 21
F04:0140       		ret
               S01:000020FF:  C9
F04:0141       	_getprocessid: 
F04:0142       	DEBUG '$'
F06:0001       # example : DEBUG '!'
F06:0002       #      or : DEBUG h
F06:0003       		push af
               S01:00002100:  F5
F06:0004       		ld a,36
               S01:00002101:  3E 24
F06:0005       		call putc
               S01:00002103:  CD 1E 21
F06:0006       		pop af
               S01:00002106:  F1
F04:0143       	ld a,(processid)
               S01:00002107:  3A 0B 21
F04:0144       		ret
               S01:0000210A:  C9
F04:0145       
F04:0146       	processid: .byte 0
               S01:0000210B:  00
F04:0147       	functionlookups:
F04:0148       	.align 2
F04:0149       	print: .byte 0xc3
               S01:0000210C:  C3
F04:0150       	printadr: .2byte 0
               S01:0000210D:  00 00
F04:0151       	println: .byte 0xc3
               S01:0000210F:  C3
F04:0152       	printlnadr: .2byte 0
               S01:00002110:  00 00
F04:0153       	printhex: .byte 0xc3
               S01:00002112:  C3
F04:0154       	printhexadr: .2byte 0
               S01:00002113:  00 00
F04:0155       	loadfile: .byte 0xc3
               S01:00002115:  C3
F04:0156       	loadfileadr: .2byte 0
               S01:00002116:  00 00
F04:0157       	memset: .byte 0xc3
               S01:00002118:  C3
F04:0158       	memsetadr: .2byte 0
               S01:00002119:  00 00
F04:0159       	strlen: .byte 0xc3
               S01:0000211B:  C3
F04:0160       	strlenadr: .2byte 0
               S01:0000211C:  00 00
F04:0161       	putc: .byte 0xc3
               S01:0000211E:  C3
F04:0162       	putcadr: .2byte 0
               S01:0000211F:  00 00
F04:0163       	touppercase: .byte 0xc3
               S01:00002121:  C3
F04:0164       	touppercaseadr: .2byte 0
               S01:00002122:  00 00
F04:0165       	hextobyte: .byte 0xc3
               S01:00002124:  C3
F04:0166       	hextobyteadr: .2byte 0
               S01:00002125:  00 00
F04:0167       	directoryopen: .byte 0xc3
               S01:00002127:  C3
F04:0168       	directoryopenadr: .2byte 0
               S01:00002128:  00 00
F04:0169       	directorynextfile: .byte 0xc3
               S01:0000212A:  C3
F04:0170       	directorynextfileadr: .2byte 0
               S01:0000212B:  00 00
F04:0171       	getfilename: .byte 0xc3
               S01:0000212D:  C3
F04:0172       	getfilenameadr: .2byte 0
               S01:0000212E:  00 00
F04:0173       	createProcess: .byte 0xc3
               S01:00002130:  C3
F04:0174       	createProcessadr: .2byte 0
               S01:00002131:  00 00
F04:0175       	getcommandparams: .byte 0xc3
               S01:00002133:  C3
F04:0176       	getcommandparamsadr: .2byte 0
               S01:00002134:  00 00
F04:0177       	getmalloctable: .byte 0xc3
               S01:00002136:  C3
F04:0178       	getmalloctableadr: .2byte 0
               S01:00002137:  00 00
F04:0179       	Div8: .byte 0xc3
               S01:00002139:  C3
F04:0180       	div8adr: .2byte 0
               S01:0000213A:  00 00
F04:0181       	setresetpage: .byte 0xc3
               S01:0000213C:  C3
F04:0182       	setresetpageadr: .2byte 0
               S01:0000213D:  00 00
F04:0183       	printhexL: .byte 0xc3
               S01:0000213F:  C3
F04:0184       	printhexLadr: .2byte 0
               S01:00002140:  00 00
F04:0185       	startprocessinfo: .byte 0xc3
               S01:00002142:  C3
F04:0186       	startprocessinfoadr: .2byte 0
               S01:00002143:  00 00
F04:0187       	nextprocessinfo: .byte 0xc3
               S01:00002145:  C3
F04:0188       	nextprocessinfoadr: .2byte 0
               S01:00002146:  00 00
F04:0189       	strcpy: .byte 0xc3
               S01:00002148:  C3
F04:0190       	strcpyadr: .2byte 0
               S01:00002149:  00 00
F04:0191       	strncpy: .byte 0xc3
               S01:0000214B:  C3
F04:0192       	strncpyadr: .2byte 0
               S01:0000214C:  00 00
F04:0193       	getprocessbyid: .byte 0xc3
               S01:0000214E:  C3
F04:0194       	getprocessbyidadr: .2byte 0
               S01:0000214F:  00 00
F04:0195       	Mul8b: .byte 0xc3
               S01:00002151:  C3
F04:0196       	Mul8badr: .2byte 0
               S01:00002152:  00 00
F04:0197       	getprocid: .byte 0xc3
               S01:00002154:  C3
F04:0198       	getprocidadr: .2byte 0
               S01:00002155:  00 00
F04:0199       	exitprocess: .byte 0xc3
               S01:00002157:  C3
F04:0200       	exitprocessadr: .2byte 0
               S01:00002158:  00 00
F04:0201       
F04:0202       _main:
F04:0203       #.ifdef __LIB__
F04:0204       #	ret
F04:0205       #.endif
F00:0006       	
F00:0007       
F00:0008       	ld hl,welcomemsg
               S01:0000215A:  21 0A 26
F00:0009       	call println
               S01:0000215D:  CD 0F 21
F00:0010       	ld a,0
               S01:00002160:  3E 00
F00:0011       	ld (doreload),a
               S01:00002162:  32 B5 21
F00:0012       
F00:0013       newcommand:
F00:0014       	ld a,(doreload)
               S01:00002165:  3A B5 21
F00:0015       	cp 1
               S01:00002168:  FE 01
F00:0016       	jp nz,1$ ;# will force command program reload
               S01:0000216A:  C2 74 21
F00:0017       	ld hl,reloadmsg
               S01:0000216D:  21 0B 28
F00:0018       	call println
               S01:00002170:  CD 0F 21
F00:0019       	ret
               S01:00002173:  C9
F00:0020       
F00:0021       1$:
F00:0022       	; #setup/reset the interrupt vector who knows what could have happen to it
F00:0023       	di
               S01:00002174:  F3
F00:0024       	im 2
               S01:00002175:  ED 5E
F00:0025       	ld a, jumptable/256 ; initialize the new interrupt vector
               S01:00002177:  3E 2B
F00:0026       	ld i,a
               S01:00002179:  ED 47
F00:0027       	ei
               S01:0000217B:  FB
F00:0028       
F00:0029       
F00:0030       	call resetcommandline
               S01:0000217C:  CD FD 21
F00:0031       	ld hl,commandPromptmsg ;# display command prompt
               S01:0000217F:  21 B1 28
F00:0032       	call print
               S01:00002182:  CD 0C 21
F00:0033       loop:
F00:0034       	halt		;# wait for interrupt
               S01:00002185:  76
F00:0035       	ld hl,cmdlineexecute ;# if user pressed enter then cmdlineexecute will contain 1
               S01:00002186:  21 9A 2A
F00:0036       	ld a,(hl)
               S01:00002189:  7E
F00:0037       	cp 1
               S01:0000218A:  FE 01
F00:0038       	jp nz,loop ;# nothing to process so repeat
               S01:0000218C:  C2 85 21
F00:0039       
F00:0040       	ld hl,cmdlinebuffer ;# test if user entered a value
               S01:0000218F:  21 9C 2A
F00:0041       	call strlen
               S01:00002192:  CD 1B 21
F00:0042       	ld a,b
               S01:00002195:  78
F00:0043       	cp 0
               S01:00002196:  FE 00
F00:0044       	jp z, newcommand ;# if no commands display prompt and repeat
               S01:00002198:  CA 65 21
F00:0045       	ld hl,0
               S01:0000219B:  21 00 00
F00:0046       	call println
               S01:0000219E:  CD 0F 21
F00:0047       	ld hl,cmdlinebuffer
               S01:000021A1:  21 9C 2A
F00:0048       	call findbuiltin
               S01:000021A4:  CD 88 22
F00:0049       	cp TRUE ;# true if builtin was found
               S01:000021A7:  FE 01
F00:0050       	call nz,loadandrun ;# must be something to do
               S01:000021A9:  C4 B6 21
F00:0051       	ld hl,0
               S01:000021AC:  21 00 00
F00:0052       	call println
               S01:000021AF:  CD 0F 21
F00:0053       	jp newcommand
               S01:000021B2:  C3 65 21
F00:0054       doreload: .byte 0
               S01:000021B5:  00
F00:0055       
F00:0056       loadandrun:
F00:0057       	
F00:0058       	ld hl,0
               S01:000021B6:  21 00 00
F00:0059       	call println ;# display a new line
               S01:000021B9:  CD 0F 21
F00:0060       
F00:0061       
F00:0062       	ld a,1
               S01:000021BC:  3E 01
F00:0063       	ld (ignorekeyboard),a
               S01:000021BE:  32 D2 21
F00:0064       
F00:0065       	call createprocess
               S01:000021C1:  CD 63 25
F00:0066       	cp 0
               S01:000021C4:  FE 00
F00:0067       	jp nz,loaderr
               S01:000021C6:  C2 D3 21
F00:0068       	call resetcommandline
               S01:000021C9:  CD FD 21
F00:0069       	ld a,0
               S01:000021CC:  3E 00
F00:0070       	ld (ignorekeyboard),a
               S01:000021CE:  32 D2 21
F00:0071       	ret
               S01:000021D1:  C9
F00:0072       
F00:0073       
F00:0074       ignorekeyboard: .byte 0
               S01:000021D2:  00
F00:0075       
F00:0076       loaderr:
F00:0077       	call printhex ;# print return code
               S01:000021D3:  CD 12 21
F00:0078       	ld hl,cmdlinebuffer
               S01:000021D6:  21 9C 2A
F00:0079       	call print ;# print the command
               S01:000021D9:  CD 0C 21
F00:0080       	ld hl,invalidcommandmsg
               S01:000021DC:  21 B5 28
F00:0081       	call println ;# print msg
               S01:000021DF:  CD 0F 21
F00:0082       	call hexdumpcmdline
               S01:000021E2:  CD EB 21
F00:0083       ;#	call resetcommandline
F00:0084       	ld a,0
               S01:000021E5:  3E 00
F00:0085       	ld (ignorekeyboard),a
               S01:000021E7:  32 D2 21
F00:0086       	ret
               S01:000021EA:  C9
F00:0087       
F00:0088       
F00:0089       hexdumpcmdline: 
F00:0090       	;# when an invalid command happens hexdump 16 bytes 
F00:0091       	;# of the commmandline.
F00:0092       	ld hl,cmdlinebuffer
               S01:000021EB:  21 9C 2A
F00:0093       	ld b,16
               S01:000021EE:  06 10
F00:0094       _hexdp$99:
F00:0095       
F00:0096       	;# print the byte values
F00:0097       	ld a,(hl)
               S01:000021F0:  7E
F00:0098       	call printhex
               S01:000021F1:  CD 12 21
F00:0099       	ld a,' '
               S01:000021F4:  3E 20
F00:0100       	call putc
               S01:000021F6:  CD 1E 21
F00:0101       	;# next byte
F00:0102       	inc hl
               S01:000021F9:  23
F00:0103       	djnz _hexdp$99
               S01:000021FA:  10 F4
F00:0104       	ret
               S01:000021FC:  C9
F00:0105       
F00:0106       ;runuserMemory:
F00:0107       	
F00:0108       
F00:0109       ;	call userMemory
F00:0110       ;	call resetcommandline
F00:0111       ;	ret
F00:0112       
F00:0113       
F00:0114       
F00:0115       resetcommandline:
F00:0116       	push af
               S01:000021FD:  F5
F00:0117       	push hl
               S01:000021FE:  E5
F00:0118       # reset the command line variables
F00:0119       	ld hl,cmdlinebufferlen
               S01:000021FF:  21 9B 2A
F00:0120       	ld a,0
               S01:00002202:  3E 00
F00:0121       	ld (hl),a
               S01:00002204:  77
F00:0122       	ld hl, cmdlinebuffer
               S01:00002205:  21 9C 2A
F00:0123       	ld b, cmdlinebuffer$-cmdlinebuffer
               S01:00002208:  06 32
F00:0124       	call memset
               S01:0000220A:  CD 18 21
F00:0125       	pop hl
               S01:0000220D:  E1
F00:0126       	pop af
               S01:0000220E:  F1
F00:0127       	ret
               S01:0000220F:  C9
F00:0128       
F00:0129       	;##############################################################
F00:0130       	cmdline: ;#/* interrupt 2, echo what was sent*/
F00:0131       		in a,(SERIALPORT)
               S01:00002210:  DB 01
F00:0132       		
F00:0133       		push af  ;# if a program is runing the ignorekeyboard flag is set
               S01:00002212:  F5
F00:0134       	
F00:0135       		ld a,(ignorekeyboard) ;# so we look for that flag and ignore any keypresses if set true
               S01:00002213:  3A D2 21
F00:0136       		cp a,1
               S01:00002216:  FE 01
F00:0137       		jp nz,12$
               S01:00002218:  C2 1F 22
F00:0138       		pop af
               S01:0000221B:  F1
F00:0139       		jp executeexit
               S01:0000221C:  C3 85 22
F00:0140       12$:	
F00:0141       		pop af
               S01:0000221F:  F1
F00:0142       		cp 0x0d
               S01:00002220:  FE 0D
F00:0143       		jp z, executecmd
               S01:00002222:  CA 7F 22
F00:0144       		cp 0x0a
               S01:00002225:  FE 0A
F00:0145       		jp z,executeexit
               S01:00002227:  CA 85 22
F00:0146       
F00:0147       	
F00:0148       		ld hl,cmdlinebufferlen # load the length into b
               S01:0000222A:  21 9B 2A
F00:0149       		ld b,0
               S01:0000222D:  06 00
F00:0150       		ld c,(hl)
               S01:0000222F:  4E
F00:0151       
F00:0152       
F00:0153       		ld hl,cmdlinebuffer ;# load buffer address into hl
               S01:00002230:  21 9C 2A
F00:0154       		add hl,bc ;# add the buffer length to get the last character pointer
               S01:00002233:  09
F00:0155       
F00:0156       		;# for delete or backspace
F00:0157       		cp 8
               S01:00002234:  FE 08
F00:0158       		jp nz,1$
               S01:00002236:  C2 4E 22
F00:0159       
F00:0160       		ld a,(cmdlinebufferlen)
               S01:00002239:  3A 9B 2A
F00:0161       		cp 0
               S01:0000223C:  FE 00
F00:0162       		jp z,4$
               S01:0000223E:  CA 76 22
F00:0163       
F00:0164       		dec hl
               S01:00002241:  2B
F00:0165       		ld a,0
               S01:00002242:  3E 00
F00:0166       		ld (hl),a
               S01:00002244:  77
F00:0167       		ld a,8
               S01:00002245:  3E 08
F00:0168       		ld hl,cmdlinebufferlen
               S01:00002247:  21 9B 2A
F00:0169       		dec (hl)
               S01:0000224A:  35
F00:0170       		jp 2$
               S01:0000224B:  C3 74 22
F00:0171       
F00:0172       1$:
F00:0173       		cp 127
               S01:0000224E:  FE 7F
F00:0174       		jp nz,3$
               S01:00002250:  C2 68 22
F00:0175       
F00:0176       		ld a,(cmdlinebufferlen)
               S01:00002253:  3A 9B 2A
F00:0177       		cp 0
               S01:00002256:  FE 00
F00:0178       		jp z,4$
               S01:00002258:  CA 76 22
F00:0179       
F00:0180       		dec hl
               S01:0000225B:  2B
F00:0181       		ld a,0
               S01:0000225C:  3E 00
F00:0182       		ld (hl),a
               S01:0000225E:  77
F00:0183       		ld a,127
               S01:0000225F:  3E 7F
F00:0184       		ld hl,cmdlinebufferlen
               S01:00002261:  21 9B 2A
F00:0185       		dec (hl)
               S01:00002264:  35
F00:0186       		jp 2$
               S01:00002265:  C3 74 22
F00:0187       
F00:0188       3$:		
F00:0189       		cp 0
               S01:00002268:  FE 00
F00:0190       		jp nz,5$
               S01:0000226A:  C2 6F 22
F00:0191       		ld a,'`'
               S01:0000226D:  3E 60
F00:0192       
F00:0193       5$:		ld (hl),a ;# store keyboard character
               S01:0000226F:  77
F00:0194       		
F00:0195       		ld hl,cmdlinebufferlen ;# load buffer length
               S01:00002270:  21 9B 2A
F00:0196       		inc (hl) ;# increment buffer len
               S01:00002273:  34
F00:0197       		
F00:0198       
F00:0199       2$:		out (SERIALPORT),a
               S01:00002274:  D3 01
F00:0200       4$:		ld a,0
               S01:00002276:  3E 00
F00:0201       		ld hl,cmdlineexecute
               S01:00002278:  21 9A 2A
F00:0202       		ld (hl),a
               S01:0000227B:  77
F00:0203       		jp executeexit
               S01:0000227C:  C3 85 22
F00:0204       	executecmd:
F00:0205       		ld a,1
               S01:0000227F:  3E 01
F00:0206       		ld hl,cmdlineexecute
               S01:00002281:  21 9A 2A
F00:0207       		ld (hl),a
               S01:00002284:  77
F00:0208       	executeexit:
F00:0209       		ei
               S01:00002285:  FB
F00:0210       		reti
               S01:00002286:  ED 4D
F00:0211       
F00:0212       		
F00:0213       	;# ======================== find builtin function =======
F00:0214       		;# ld hl, buffer (zero terminated string)
F00:0215       		;# call findbuiltin
F00:0216       		;# returns TRUE if builtin command located
F00:0217       		;#         FALSE if no builtin command located
F00:0218       
F00:0219       findbuiltin:
F00:0220       	
F00:0221       	push hl ;# save hl
               S01:00002288:  E5
F00:0222       	push hl
               S01:00002289:  E5
F00:0223       
F00:0224       
F00:0225       	pop ix;# copy hl into ix, ix contains the user supplied cmd
               S01:0000228A:  DD E1
F00:0226       
F00:0227       	ld iy,builtin ;# load start of list
               S01:0000228C:  FD 21 72 2A
F00:0228       	ld b,0 ;# used to keep count of the number of characters - because a 0 length is bad
               S01:00002290:  06 00
F00:0229       findbuiltinrestart:
F00:0230       	ld l, (iy)	;# load hl with the pointer address
               S01:00002292:  FD 6E 00
F00:0231       	ld h, (iy+1)
               S01:00002295:  FD 66 01
F00:0232       
F00:0233       findbuiltin1:
F00:0234       	ld a,(ix)
               S01:00002298:  DD 7E 00
F00:0235       	cp 0 ;# if we have a null character we have made a match
               S01:0000229B:  FE 00
F00:0236       	jp z,_findbuiltinSuccess
               S01:0000229D:  CA D0 22
F00:0237       
F00:0238       	inc b ;# character count
               S01:000022A0:  04
F00:0239       	ld a,(hl)
               S01:000022A1:  7E
F00:0240       	sub (ix)
               S01:000022A2:  DD 96 00
F00:0241       
F00:0242       	inc ix ;# no flag changes for inc
               S01:000022A5:  DD 23
F00:0243       	inc hl
               S01:000022A7:  23
F00:0244       	jp z,findbuiltin1 ;# if the same characters repeat
               S01:000022A8:  CA 98 22
F00:0245       
F00:0246       	;# if we get here, its because the characters no longer match.
F00:0247       	;# so we need to test the builtin cmd to see if it's a zero,
F00:0248       	;# if it is then we have matched the builtin command
F00:0249       	dec hl ;# need to backup 1 byte because we moved it before the test
               S01:000022AB:  2B
F00:0250       	ld a,(hl)
               S01:000022AC:  7E
F00:0251       	cp 0
               S01:000022AD:  FE 00
F00:0252       	jp z,_findbuiltinSuccess
               S01:000022AF:  CA D0 22
F00:0253       	;# if we reach here then we did not find a match, so
F00:0254       	;# we can load the next builtin cmd and try again.
F00:0255       	pop hl
               S01:000022B2:  E1
F00:0256       	push hl ;# save hl
               S01:000022B3:  E5
F00:0257       	push hl ;# restore the user supplied cmd
               S01:000022B4:  E5
F00:0258       	pop ix ;# now ix contains the user supplied cmd
               S01:000022B5:  DD E1
F00:0259       	;# iy still contains the builtin address pointer.
F00:0260       	;# so if we add 4 bytes to it we will point to the next
F00:0261       	;# table entry for the builtin command.
F00:0262       	ld bc,4
               S01:000022B7:  01 04 00
F00:0263       	add iy,bc
               S01:000022BA:  FD 09
F00:0264       	;# before we try with the current entry we need to check
F00:0265       	;# its not the end of the list
F00:0266       	ld a,(iy)
               S01:000022BC:  FD 7E 00
F00:0267       	cp 0
               S01:000022BF:  FE 00
F00:0268       	jp nz, findbuiltinrestart
               S01:000022C1:  C2 92 22
F00:0269       	ld a,(iy+1)
               S01:000022C4:  FD 7E 01
F00:0270       	cp 0
               S01:000022C7:  FE 00
F00:0271       	jp nz,findbuiltinrestart
               S01:000022C9:  C2 92 22
F00:0272       	
F00:0273       
F00:0274       _findbuildtinFail:
F00:0275       	pop hl ;# remove the save hl
               S01:000022CC:  E1
F00:0276       	ld a,FALSE
               S01:000022CD:  3E 00
F00:0277       	ret
               S01:000022CF:  C9
F00:0278       _findbuiltinSuccess:
F00:0279       	;# check the length - it can't be 0
F00:0280       	ld a,b
               S01:000022D0:  78
F00:0281       	cp 0
               S01:000022D1:  FE 00
F00:0282       	jp z,_findbuildtinFail
               S01:000022D3:  CA CC 22
F00:0283       	;# ok good from here to continue
F00:0284       	pop hl ;# remove the saved hl
               S01:000022D6:  E1
F00:0285       	ld bc,2 ;# we have a success so now we load the address of the subroutine
               S01:000022D7:  01 02 00
F00:0286       	add iy,bc
               S01:000022DA:  FD 09
F00:0287       	
F00:0288       	ld l, (iy)	;# load hl with the pointer address
               S01:000022DC:  FD 6E 00
F00:0289       	ld h, (iy+1) ;# to jump into the address I need to use the iy registers
               S01:000022DF:  FD 66 01
F00:0290       	push hl
               S01:000022E2:  E5
F00:0291       	pop iy
               S01:000022E3:  FD E1
F00:0292       	jp (iy)
               S01:000022E5:  FD E9
F00:0293       	halt ;# we will never get here
               S01:000022E7:  76
F00:0294       
F00:0295       
F00:0296       
F00:0297       		;#======================= builtin functions ====================
F00:0298       #== hexdump memory builtin == #
F00:0299       		hexdumpcmd: .string "h,",0
               S01:000022E8:  68 2C
               S01:000022EA:  00
F00:0300       		
F00:0301       	hexdump:
F00:0302       		ld hl,hexdumpmsg
               S01:000022EC:  21 29 26
F00:0303       		call println
               S01:000022EF:  CD 0F 21
F00:0304       		ld hl,cmdlinebuffer ;# command length must be 8 characters
               S01:000022F2:  21 9C 2A
F00:0305       		call strlen
               S01:000022F5:  CD 1B 21
F00:0306       		ld a,b
               S01:000022F8:  78
F00:0307       		cp 8
               S01:000022F9:  FE 08
F00:0308       		jp nz,hexdumperror
               S01:000022FB:  C2 32 23
F00:0309       		ld hl,cmdlinebuffer ;# the hextobyte is expect uppercase characters
               S01:000022FE:  21 9C 2A
F00:0310       		call touppercase
               S01:00002301:  CD 21 21
F00:0311       		call println
               S01:00002304:  CD 0F 21
F00:0312       		ld ix,cmdlinebuffer ;# get the 4th and 5th characters into the lobyte
               S01:00002307:  DD 21 9C 2A
F00:0313       		ld h,(ix+4)
               S01:0000230B:  DD 66 04
F00:0314       		ld l,(ix+5)
               S01:0000230E:  DD 6E 05
F00:0315       		call hextobyte
               S01:00002311:  CD 24 21
F00:0316       		ld (lodump),a
               S01:00002314:  32 92 25
F00:0317       	
F00:0318       		ld h,(ix+6) ;# get the 6th and 7th characters into the hibyte
               S01:00002317:  DD 66 06
F00:0319       		ld l,(ix+7)
               S01:0000231A:  DD 6E 07
F00:0320       		call hextobyte
               S01:0000231D:  CD 24 21
F00:0321       		ld (hidump),a
               S01:00002320:  32 91 25
F00:0322       		ld hl,0
               S01:00002323:  21 00 00
F00:0323       		call println
               S01:00002326:  CD 0F 21
F00:0324       
F00:0325       	;# hidump has the address to dump so let dump it out
F00:0326       		call hexdumpheader
               S01:00002329:  CD 3B 23
F00:0327       		call _hexdumprint
               S01:0000232C:  CD 83 23
F00:0328       		jp hexdumpexit
               S01:0000232F:  C3 38 23
F00:0329       
F00:0330       hexdumperror:
F00:0331       		ld hl,hexdumpsyntaxmsg
               S01:00002332:  21 3D 26
F00:0332       		call println
               S01:00002335:  CD 0F 21
F00:0333       hexdumpexit:
F00:0334       		ld a,TRUE
               S01:00002338:  3E 01
F00:0335       		ret
               S01:0000233A:  C9
F00:0336       
F00:0337       
F00:0338       hexdumpheader:
F00:0339       	push af
               S01:0000233B:  F5
F00:0340       	push bc
               S01:0000233C:  C5
F00:0341       	push hl
               S01:0000233D:  E5
F00:0342       	;# print the heading
F00:0343       
F00:0344       	ld b,7
               S01:0000233E:  06 07
F00:0345       _sp$1:
F00:0346       	ld a,' ' ;# 7 spaces
               S01:00002340:  3E 20
F00:0347       	call putc
               S01:00002342:  CD 1E 21
F00:0348       	djnz _sp$1
               S01:00002345:  10 F9
F00:0349       
F00:0350       	ld a,0 ;# for column header
               S01:00002347:  3E 00
F00:0351       	ld b,16 ;# 16 column headers
               S01:00002349:  06 10
F00:0352       _col$1:
F00:0353       	call printhex
               S01:0000234B:  CD 12 21
F00:0354       	inc a
               S01:0000234E:  3C
F00:0355       
F00:0356       	push af
               S01:0000234F:  F5
F00:0357       	ld a,' '
               S01:00002350:  3E 20
F00:0358       	call putc
               S01:00002352:  CD 1E 21
F00:0359       	pop af
               S01:00002355:  F1
F00:0360       
F00:0361       	djnz _col$1
               S01:00002356:  10 F3
F00:0362       
F00:0363       	ld hl,0 ;# newline
               S01:00002358:  21 00 00
F00:0364       	call println
               S01:0000235B:  CD 0F 21
F00:0365       	pop hl
               S01:0000235E:  E1
F00:0366       	pop bc
               S01:0000235F:  C1
F00:0367       	pop af
               S01:00002360:  F1
F00:0368       	ret
               S01:00002361:  C9
F00:0369       hexdumplinetitle:
F00:0370       	# hl contain the address to print output format is "0x0000"
F00:0371       	push af
               S01:00002362:  F5
F00:0372       	push hl
               S01:00002363:  E5
F00:0373       	ld hl,hexdumpprefix
               S01:00002364:  21 31 26
F00:0374       	call print
               S01:00002367:  CD 0C 21
F00:0375       	pop hl
               S01:0000236A:  E1
F00:0376       
F00:0377       	ld a,(_highlow)
               S01:0000236B:  3A 82 23
F00:0378       	cp 0
               S01:0000236E:  FE 00
F00:0379       	jp z,_1$
               S01:00002370:  CA 77 23
F00:0380       	ld a,h
               S01:00002373:  7C
F00:0381       	call printhex
               S01:00002374:  CD 12 21
F00:0382       _1$:ld a,l
               S01:00002377:  7D
F00:0383       	call printhex
               S01:00002378:  CD 12 21
F00:0384       	ld a,' '
               S01:0000237B:  3E 20
F00:0385       	call putc
               S01:0000237D:  CD 1E 21
F00:0386       	pop af
               S01:00002380:  F1
F00:0387       	ret
               S01:00002381:  C9
F00:0388       _highlow: .byte 0 ;# allows code reuse
               S01:00002382:  00
F00:0389       
F00:0390       _hexdumprint:
F00:0391       	ld a,1
               S01:00002383:  3E 01
F00:0392       	ld (_highlow),a
               S01:00002385:  32 82 23
F00:0393       
F00:0394       	ld hl,(hidump)
               S01:00002388:  2A 91 25
F00:0395       	ld l,0 ;# alway start at page boundry
               S01:0000238B:  2E 00
F00:0396       	ld b,16 ;# outer loop
               S01:0000238D:  06 10
F00:0397       _hexdp0:
F00:0398       	push bc
               S01:0000238F:  C5
F00:0399       	ld b,16 ;# inner loop
               S01:00002390:  06 10
F00:0400       		;# print the address
F00:0401       	call hexdumplinetitle
               S01:00002392:  CD 62 23
F00:0402       _hexdp$1:
F00:0403       
F00:0404       	;# print the byte values
F00:0405       	push hl
               S01:00002395:  E5
F00:0406       	ld hl,hidump
               S01:00002396:  21 91 25
F00:0407       	ld a,(hl)
               S01:00002399:  7E
F00:0408       	pop hl
               S01:0000239A:  E1
F00:0409       	cp l
               S01:0000239B:  BD
F00:0410       	jp nz,1$
               S01:0000239C:  C2 B6 23
F00:0411       
F00:0412       	push hl
               S01:0000239F:  E5
F00:0413       	ld hl,boldon ;# found the byte of interest turn on bold
               S01:000023A0:  21 34 26
F00:0414       	call print
               S01:000023A3:  CD 0C 21
F00:0415       	pop hl
               S01:000023A6:  E1
F00:0416       
F00:0417       	ld a,(hl)  ;# print the hex value
               S01:000023A7:  7E
F00:0418       	call printhex
               S01:000023A8:  CD 12 21
F00:0419       	
F00:0420       	push hl
               S01:000023AB:  E5
F00:0421       	ld hl,boldoff ;# turn off bold
               S01:000023AC:  21 39 26
F00:0422       	call print
               S01:000023AF:  CD 0C 21
F00:0423       	pop hl
               S01:000023B2:  E1
F00:0424       
F00:0425       	jp 2$ ;# continue
               S01:000023B3:  C3 BA 23
F00:0426       
F00:0427       1$:	ld a,(hl)
               S01:000023B6:  7E
F00:0428       	call printhex
               S01:000023B7:  CD 12 21
F00:0429       2$:	ld a,' '
               S01:000023BA:  3E 20
F00:0430       	call putc
               S01:000023BC:  CD 1E 21
F00:0431       	;# next byte
F00:0432       	inc hl
               S01:000023BF:  23
F00:0433       	djnz _hexdp$1
               S01:000023C0:  10 D3
F00:0434       	;# now repeat the line and display the ascii value
F00:0435       	or a ;# reset carry flag
               S01:000023C2:  B7
F00:0436       	ld de,16
               S01:000023C3:  11 10 00
F00:0437       	sbc hl,de ;# subtrack 16bytes
               S01:000023C6:  ED 52
F00:0438       
F00:0439       	ld a,'|' ;# output border character
               S01:000023C8:  3E 7C
F00:0440       	call putc
               S01:000023CA:  CD 1E 21
F00:0441       	ld b,16
               S01:000023CD:  06 10
F00:0442       _dexdpc$1:
F00:0443       	ld a,(hl)
               S01:000023CF:  7E
F00:0444       	cp 32 ;# space
               S01:000023D0:  FE 20
F00:0445       	jp p, _nex$2 ;# if character >= 32 jump
               S01:000023D2:  F2 DA 23
F00:0446       	ld a,'.'
               S01:000023D5:  3E 2E
F00:0447       	jp _prt$
               S01:000023D7:  C3 E1 23
F00:0448       _nex$2:
F00:0449       	cp 127 ;# delete
               S01:000023DA:  FE 7F
F00:0450       	jp m,_prt$ ;# if character < 127 jump print
               S01:000023DC:  FA E1 23
F00:0451       	ld a,'.' ;# else print a dot
               S01:000023DF:  3E 2E
F00:0452       
F00:0453       _prt$:
F00:0454       	call putc
               S01:000023E1:  CD 1E 21
F00:0455       	inc hl
               S01:000023E4:  23
F00:0456       	djnz _dexdpc$1
               S01:000023E5:  10 E8
F00:0457       
F00:0458       	ld a,"|" ;# output border character
               S01:000023E7:  3E 7C
F00:0459       	call putc
               S01:000023E9:  CD 1E 21
F00:0460       
F00:0461       	;# next line
F00:0462       	push hl
               S01:000023EC:  E5
F00:0463       	ld hl,0
               S01:000023ED:  21 00 00
F00:0464       	call println
               S01:000023F0:  CD 0F 21
F00:0465       	pop hl
               S01:000023F3:  E1
F00:0466       	pop bc
               S01:000023F4:  C1
F00:0467       	djnz _hexdp0
               S01:000023F5:  10 98
F00:0468       	ret
               S01:000023F7:  C9
F00:0469       
F00:0470       	;# ====== LOAD builtin ==== #
F00:0471       	loadcmd: .string "l,",0
               S01:000023F8:  6C 2C
               S01:000023FA:  00
F00:0472       	load:
F00:0473       		ld hl,loadmsg
               S01:000023FC:  21 7B 26
F00:0474       		call println
               S01:000023FF:  CD 0F 21
F00:0475       		ld hl,cmdlinebuffer ;# command length must be >= 10 characters
               S01:00002402:  21 9C 2A
F00:0476       		call strlen
               S01:00002405:  CD 1B 21
F00:0477       		ld a,b
               S01:00002408:  78
F00:0478       		cp 10
               S01:00002409:  FE 0A
F00:0479       		jp p, _loadc$1
               S01:0000240B:  F2 17 24
F00:0480       		ld hl,loadsyntaxmsg ;# load failure message
               S01:0000240E:  21 80 26
F00:0481       		call println
               S01:00002411:  CD 0F 21
F00:0482       		ld a,TRUE
               S01:00002414:  3E 01
F00:0483       		ret
               S01:00002416:  C9
F00:0484       _loadc$1:
F00:0485       		ld hl,cmdlinebuffer+4
               S01:00002417:  21 A0 2A
F00:0486       		ld de,_ladr
               S01:0000241A:  11 65 24
F00:0487       		ld bc,4
               S01:0000241D:  01 04 00
F00:0488       		ldir
               S01:00002420:  ED B0
F00:0489       		ld a,0
               S01:00002422:  3E 00
F00:0490       		ld (de),a ;# zero terminated
               S01:00002424:  12
F00:0491       		ld hl,_ladr ;# hex address stored in _adr
               S01:00002425:  21 65 24
F00:0492       		call touppercase
               S01:00002428:  CD 21 21
F00:0493       		call println
               S01:0000242B:  CD 0F 21
F00:0494       
F00:0495       		ld ix,_ladr ;# covert text to binary address and store in hidump,lodump
               S01:0000242E:  DD 21 65 24
F00:0496       		ld h,(ix)
               S01:00002432:  DD 66 00
F00:0497       		ld l,(ix+1)
               S01:00002435:  DD 6E 01
F00:0498       		call hextobyte
               S01:00002438:  CD 24 21
F00:0499       		ld (lodump),a
               S01:0000243B:  32 92 25
F00:0500       		ld h,(ix+2)
               S01:0000243E:  DD 66 02
F00:0501       		ld l,(ix+3)
               S01:00002441:  DD 6E 03
F00:0502       		call hextobyte
               S01:00002444:  CD 24 21
F00:0503       		ld (hidump),a
               S01:00002447:  32 91 25
F00:0504       
F00:0505       		
F00:0506       		ld hl,cmdlinebuffer+9
               S01:0000244A:  21 A5 2A
F00:0507       		ld de,(hidump)
               S01:0000244D:  ED 5B 91 25
F00:0508       		call loadfile
               S01:00002451:  CD 15 21
F00:0509       		cp 0
               S01:00002454:  FE 00
F00:0510       		jp z, _doneload$1
               S01:00002456:  CA 62 24
F00:0511       		call printhex ;# print return code
               S01:00002459:  CD 12 21
F00:0512       		ld hl,loaderrormsg
               S01:0000245C:  21 BE 26
F00:0513       		call println
               S01:0000245F:  CD 0F 21
F00:0514       
F00:0515       
F00:0516       
F00:0517       		
F00:0518       _doneload$1:
F00:0519       		ld a,TRUE
               S01:00002462:  3E 01
F00:0520       		ret
               S01:00002464:  C9
F00:0521       _ladr: .space 5 ;# store character address
F00:0522       
F00:0523       ;# === run builtin ==========
F00:0524       
F00:0525       runcmd: .string "r,",0
               S01:0000246A:  72 2C
               S01:0000246C:  00
F00:0526       run:
F00:0527       	ld hl,runmsg
               S01:0000246E:  21 CC 26
F00:0528       	call println
               S01:00002471:  CD 0F 21
F00:0529       
F00:0530       	ld hl,cmdlinebuffer ;# command length must be 8 characters
               S01:00002474:  21 9C 2A
F00:0531       	call strlen
               S01:00002477:  CD 1B 21
F00:0532       	ld a,b
               S01:0000247A:  78
F00:0533       	cp 8
               S01:0000247B:  FE 08
F00:0534       	jp nz, runerror
               S01:0000247D:  C2 B1 24
F00:0535       	ld hl,cmdlinebuffer
               S01:00002480:  21 9C 2A
F00:0536       	call touppercase
               S01:00002483:  CD 21 21
F00:0537       	call println
               S01:00002486:  CD 0F 21
F00:0538       	ld ix, cmdlinebuffer
               S01:00002489:  DD 21 9C 2A
F00:0539       	ld h,(ix+4)
               S01:0000248D:  DD 66 04
F00:0540       	ld l,(ix+5)
               S01:00002490:  DD 6E 05
F00:0541       	call hextobyte
               S01:00002493:  CD 24 21
F00:0542       	ld (lodump),a
               S01:00002496:  32 92 25
F00:0543       
F00:0544       	ld h,(ix+6)
               S01:00002499:  DD 66 06
F00:0545       	ld l,(ix+7)
               S01:0000249C:  DD 6E 07
F00:0546       	call hextobyte
               S01:0000249F:  CD 24 21
F00:0547       	ld (hidump),a
               S01:000024A2:  32 91 25
F00:0548       	ld hl,0
               S01:000024A5:  21 00 00
F00:0549       	call println
               S01:000024A8:  CD 0F 21
F00:0550       
F00:0551       	call runfrom
               S01:000024AB:  CD 90 25
F00:0552       	jp runexit
               S01:000024AE:  C3 B7 24
F00:0553       runerror:
F00:0554       	ld hl,runsyntaxmsg
               S01:000024B1:  21 D0 26
F00:0555       	call println
               S01:000024B4:  CD 0F 21
F00:0556       runexit:
F00:0557       	ld a,TRUE
               S01:000024B7:  3E 01
F00:0558       	ret
               S01:000024B9:  C9
F00:0559       
F00:0560       # === help builtin === #
F00:0561       helpcmd: .string "?"
               S01:000024BA:  3F
F00:0562       
F00:0563       help:
F00:0564       	ld hl,helpmsg
               S01:000024BC:  21 DD 28
F00:0565       	call println
               S01:000024BF:  CD 0F 21
F00:0566       
F00:0567       	ld a,TRUE
               S01:000024C2:  3E 01
F00:0568       	ret
               S01:000024C4:  C9
F00:0569       
F00:0570       	# === in builtin == #
F00:0571       incmd: .string "in,"
               S01:000024C5:  69 6E 2C
F00:0572       din:
F00:0573       	ld hl,inmsg
               S01:000024C9:  21 01 27
F00:0574       	call println
               S01:000024CC:  CD 0F 21
F00:0575       
F00:0576       	ld hl,cmdlinebuffer
               S01:000024CF:  21 9C 2A
F00:0577       	call strlen
               S01:000024D2:  CD 1B 21
F00:0578       	ld a,b
               S01:000024D5:  78
F00:0579       	cp 7
               S01:000024D6:  FE 07
F00:0580       	jp nz, _inerror
               S01:000024D8:  C2 FD 24
F00:0581       	ld hl,cmdlinebuffer
               S01:000024DB:  21 9C 2A
F00:0582       	call touppercase
               S01:000024DE:  CD 21 21
F00:0583       	call println
               S01:000024E1:  CD 0F 21
F00:0584       	ld ix,cmdlinebuffer
               S01:000024E4:  DD 21 9C 2A
F00:0585       	ld h,(ix+5)
               S01:000024E8:  DD 66 05
F00:0586       	ld l,(ix+6)
               S01:000024EB:  DD 6E 06
F00:0587       	call hextobyte
               S01:000024EE:  CD 24 21
F00:0588       	ld (lodump),a ;# address to read in lodump
               S01:000024F1:  32 92 25
F00:0589       	ld c,a
               S01:000024F4:  4F
F00:0590       	in a,(c)
               S01:000024F5:  ED 78
F00:0591       	call printhex
               S01:000024F7:  CD 12 21
F00:0592       	jp _inexit
               S01:000024FA:  C3 03 25
F00:0593       _inerror:
F00:0594       	ld hl,insyntaxmsg
               S01:000024FD:  21 04 27
F00:0595       	call println
               S01:00002500:  CD 0F 21
F00:0596       _inexit:
F00:0597       
F00:0598       	ld a,TRUE
               S01:00002503:  3E 01
F00:0599       	ret
               S01:00002505:  C9
F00:0600       
F00:0601       	# === out builtin == #
F00:0602       outcmd: .string "out,"
               S01:00002506:  6F 75 74 2C
F00:0603       dout:
F00:0604       	ld hl,outmsg
               S01:0000250B:  21 71 27
F00:0605       	call println
               S01:0000250E:  CD 0F 21
F00:0606       
F00:0607       	ld hl,cmdlinebuffer
               S01:00002511:  21 9C 2A
F00:0608       	call strlen
               S01:00002514:  CD 1B 21
F00:0609       	ld a,b
               S01:00002517:  78
F00:0610       	cp 13
               S01:00002518:  FE 0D
F00:0611       	jp nz, outerror
               S01:0000251A:  C2 4B 25
F00:0612       	ld hl,cmdlinebuffer
               S01:0000251D:  21 9C 2A
F00:0613       	call touppercase
               S01:00002520:  CD 21 21
F00:0614       	call println
               S01:00002523:  CD 0F 21
F00:0615       	ld ix,cmdlinebuffer
               S01:00002526:  DD 21 9C 2A
F00:0616       	ld h,(ix+6)
               S01:0000252A:  DD 66 06
F00:0617       	ld l,(ix+7)
               S01:0000252D:  DD 6E 07
F00:0618       	call hextobyte
               S01:00002530:  CD 24 21
F00:0619       	ld (lodump),a ;# byte to send in lodump
               S01:00002533:  32 92 25
F00:0620       
F00:0621       	ld h,(ix+11)
               S01:00002536:  DD 66 0B
F00:0622       	ld l,(ix+12)
               S01:00002539:  DD 6E 0C
F00:0623       	call hextobyte
               S01:0000253C:  CD 24 21
F00:0624       	ld (hidump),a ;# address in hidump
               S01:0000253F:  32 91 25
F00:0625       	ld c,a
               S01:00002542:  4F
F00:0626       	ld a,(lodump)
               S01:00002543:  3A 92 25
F00:0627       	out (C),A
               S01:00002546:  ED 79
F00:0628       
F00:0629       
F00:0630       	jp outexit
               S01:00002548:  C3 51 25
F00:0631       
F00:0632       outerror:
F00:0633       	ld hl,outsyntaxmsg
               S01:0000254B:  21 75 27
F00:0634       	call println
               S01:0000254E:  CD 0F 21
F00:0635       outexit:
F00:0636       	ld a,TRUE
               S01:00002551:  3E 01
F00:0637       	ret
               S01:00002553:  C9
F00:0638       
F00:0639       
F00:0640       	# === createprocess builtin === #
F00:0641       createprocesscmd: .string "createprocess,"
               S01:00002554:  63 72 65 61 74 65 70 72 6F 63 65 73 73 2C
F00:0642       createprocess:
F00:0643       	ld hl,createprocessmsg
               S01:00002563:  21 03 28
F00:0644       	call println
               S01:00002566:  CD 0F 21
F00:0645       	ld hl,cmdlinebuffer
               S01:00002569:  21 9C 2A
F00:0646       	push hl ;# save program name
               S01:0000256C:  E5
F00:0647       	dec hl ;# this is stupid but it works
               S01:0000256D:  2B
F00:0648       _1$:
F00:0649       	inc hl
               S01:0000256E:  23
F00:0650       	ld a,(hl)
               S01:0000256F:  7E
F00:0651       	
F00:0652       	cp 0 ;# null terminated
               S01:00002570:  FE 00
F00:0653       	jp z,_2$
               S01:00002572:  CA 7D 25
F00:0654       
F00:0655       	cp ' ' ;# look for 1st space
               S01:00002575:  FE 20
F00:0656       	jp nz,_1$
               S01:00002577:  C2 6E 25
F00:0657       	ld a,0
               S01:0000257A:  3E 00
F00:0658       	ld (hl),a ;# zero terminate prgram name
               S01:0000257C:  77
F00:0659       _2$:
F00:0660       	inc hl
               S01:0000257D:  23
F00:0661       	push hl ;# save the command parameters
               S01:0000257E:  E5
F00:0662       	call createProcess
               S01:0000257F:  CD 30 21
F00:0663       	ret
               S01:00002582:  C9
F00:0664       
F00:0665       #=== reload builtin ==#
F00:0666       reloadcmd: .string "exit"
               S01:00002583:  65 78 69 74
F00:0667       reload:
F00:0668       	ld a,1
               S01:00002588:  3E 01
F00:0669       	ld (doreload),a
               S01:0000258A:  32 B5 21
F00:0670       	ld a,TRUE
               S01:0000258D:  3E 01
F00:0671       	ret
               S01:0000258F:  C9
F00:0672       
F00:0673       ;# shared variables for builtin functions
F00:0674       runfrom: .byte 0xc3 ;# jump instruction - must be next to hidump
               S01:00002590:  C3
F00:0675       hidump: .byte 0 ;# used but hexdump and load
               S01:00002591:  00
F00:0676       lodump: .byte 0 ;# used by hexdump and load
               S01:00002592:  00
F00:0677       
F00:0678       #=== malloc table builtin ==#
F00:0679       
F00:0680       malloctablecmd: .string "m*"
               S01:00002593:  6D 2A
F00:0681       malloctable:
F00:0682       	ld hl, malloctablemsg
               S01:00002596:  21 99 28
F00:0683       	call println
               S01:00002599:  CD 0F 21
F00:0684       
F00:0685       	call hexdumpheader
               S01:0000259C:  CD 3B 23
F00:0686       
F00:0687       	ld a,0 ;# function hexdumplinetitle uses this varible to determine if both h and l should be output
               S01:0000259F:  3E 00
F00:0688       	ld (_highlow),a ;# 0 = output low, 1 = output high and low
               S01:000025A1:  32 82 23
F00:0689       
F00:0690       	ld a,0
               S01:000025A4:  3E 00
F00:0691       	ld h,0
               S01:000025A6:  26 00
F00:0692       	ld l,0
               S01:000025A8:  2E 00
F00:0693       	ld (pagecount),hl
               S01:000025AA:  22 09 26
F00:0694       	call getmalloctable
               S01:000025AD:  CD 36 21
F00:0695       
F00:0696       	ld b,16 ;# level 3
               S01:000025B0:  06 10
F00:0697       
F00:0698       _6$:push bc
               S01:000025B2:  C5
F00:0699       push hl
               S01:000025B3:  E5
F00:0700       push bc
               S01:000025B4:  C5
F00:0701       	ld hl,(pagecount)
               S01:000025B5:  2A 09 26
F00:0702       	call hexdumplinetitle
               S01:000025B8:  CD 62 23
F00:0703       	ld c,0x10
               S01:000025BB:  0E 10
F00:0704       	ld b,0
               S01:000025BD:  06 00
F00:0705       	add hl,bc
               S01:000025BF:  09
F00:0706       	ld (pagecount),hl
               S01:000025C0:  22 09 26
F00:0707       pop bc
               S01:000025C3:  C1
F00:0708       pop hl
               S01:000025C4:  E1
F00:0709       	ld a,' '
               S01:000025C5:  3E 20
F00:0710       	call putc
               S01:000025C7:  CD 1E 21
F00:0711       	call putc	
               S01:000025CA:  CD 1E 21
F00:0712       	call putc
               S01:000025CD:  CD 1E 21
F00:0713       
F00:0714       	ld b,2 ;# level 2
               S01:000025D0:  06 02
F00:0715       	
F00:0716       _5$:push bc
               S01:000025D2:  C5
F00:0717       	ld a,(hl) ;# memory map
               S01:000025D3:  7E
F00:0718       	ld b,8 ;# level 1
               S01:000025D4:  06 08
F00:0719       _1$:	 
F00:0720       	rl a
               S01:000025D6:  CB 17
F00:0721       	push af
               S01:000025D8:  F5
F00:0722       	jp nc,_2$:
               S01:000025D9:  D2 E1 25
F00:0723       	ld a,'1'
               S01:000025DC:  3E 31
F00:0724       	jp _3$:
               S01:000025DE:  C3 E3 25
F00:0725       _2$:
F00:0726       	ld a,'0'
               S01:000025E1:  3E 30
F00:0727       _3$:
F00:0728       	call putc
               S01:000025E3:  CD 1E 21
F00:0729       	ld a,' '
               S01:000025E6:  3E 20
F00:0730       	call putc
               S01:000025E8:  CD 1E 21
F00:0731       	call putc
               S01:000025EB:  CD 1E 21
F00:0732       	pop af
               S01:000025EE:  F1
F00:0733       	djnz _1$
               S01:000025EF:  10 E5
F00:0734       
F00:0735       	pop bc ;# level 2
               S01:000025F1:  C1
F00:0736       	inc hl ;# advance memory map point
               S01:000025F2:  23
F00:0737       	djnz _5$
               S01:000025F3:  10 DD
F00:0738       
F00:0739       	push hl
               S01:000025F5:  E5
F00:0740       
F00:0741       	ld hl,0
               S01:000025F6:  21 00 00
F00:0742       	call println
               S01:000025F9:  CD 0F 21
F00:0743       	pop hl
               S01:000025FC:  E1
F00:0744       #	inc hl ;# advance memory map point
F00:0745       	pop bc
               S01:000025FD:  C1
F00:0746       	djnz _6$
               S01:000025FE:  10 B2
F00:0747       
F00:0748       	ld hl,malloctableusemsg
               S01:00002600:  21 16 28
F00:0749       	call println
               S01:00002603:  CD 0F 21
F00:0750       	ld a,TRUE
               S01:00002606:  3E 01
F00:0751       	ret
               S01:00002608:  C9
F00:0752       
F00:0753       pagecount: .byte 0
               S01:00002609:  00
F00:0754       
F00:0755       		;#======================= builtin functions end ================
F00:0756       		;# --- dev note : builtin function must return TRUE in a register
F00:0757       messages:
F00:0758       ;	dbug1: .string "debug1"
F00:0759       ;	dbug2: .string "debug2"
F00:0760       	welcomemsg: .string "Would you like to play a game?"
               S01:0000260A:  57 6F 75 6C 64 20 79 6F 75 20 6C 69 6B 65 20 74
               S01:0000261A:  6F 20 70 6C 61 79 20 61 20 67 61 6D 65 3F
F00:0761       	hexdumpmsg: .string "HEXDUMP"
               S01:00002629:  48 45 58 44 55 4D 50
F00:0762       	hexdumpprefix: .string "0x"
               S01:00002631:  30 78
F00:0763       	boldon: .string "\033[1m"
               S01:00002634:  1B 5B 31 6D
F00:0764       	boldoff: .string "\033[m"
               S01:00002639:  1B 5B 6D
F00:0765       	hexdumpsyntaxmsg: .string "  hexdump syntax: h,0xXXXX - address specified in hexidecimal"
               S01:0000263D:  20 20 68 65 78 64 75 6D 70 20 73 79 6E 74 61 78
               S01:0000264D:  3A 20 68 2C 30 78 58 58 58 58 20 2D 20 61 64 64
F00:0766       	loadmsg: .string "LOAD"
               S01:0000267B:  4C 4F 41 44
F00:0767       	loadsyntaxmsg: .string "  load syntax: l,0xXXXX,filename - load file @ 0xXXXX address"
               S01:00002680:  20 20 6C 6F 61 64 20 73 79 6E 74 61 78 3A 20 6C
               S01:00002690:  2C 30 78 58 58 58 58 2C 66 69 6C 65 6E 61 6D 65
F00:0768       	loaderrormsg: .string "  load error."
               S01:000026BE:  20 20 6C 6F 61 64 20 65 72 72 6F 72 2E
F00:0769       	runmsg: .string "RUN"
               S01:000026CC:  52 55 4E
F00:0770       	runsyntaxmsg: .string "  run syntax: r,0xXXXX - run from 0xXXXX address"
               S01:000026D0:  20 20 72 75 6E 20 73 79 6E 74 61 78 3A 20 72 2C
               S01:000026E0:  30 78 58 58 58 58 20 2D 20 72 75 6E 20 66 72 6F
F00:0771       	inmsg: .string "IN"
               S01:00002701:  49 4E
F00:0772       	insyntaxmsg: .string "  peripheral in syntax: in,0xYY - execute IN A,(0xYY) - register A is displayed in hex on return"
               S01:00002704:  20 20 70 65 72 69 70 68 65 72 61 6C 20 69 6E 20
               S01:00002714:  73 79 6E 74 61 78 3A 20 69 6E 2C 30 78 59 59 20
F00:0773       	inerrormsg: .string "  in error."
               S01:00002765:  20 20 69 6E 20 65 72 72 6F 72 2E
F00:0774       	outmsg: .string "OUT"
               S01:00002771:  4F 55 54
F00:0775       	outsyntaxmsg: .string "  peripheral out syntax: out,0xXX,0xYY - executes\r\nLD A,0xXX\r\nOUT (0xYY), A\r\nwhere 0xYY is
               S01:00002775:  20 20 70 65 72 69 70 68 65 72 61 6C 20 6F 75 74
               S01:00002785:  20 73 79 6E 74 61 78 3A 20 6F 75 74 2C 30 78 58
F00:0776       	outerrormsg: .string " out error."
               S01:000027F7:  20 6F 75 74 20 65 72 72 6F 72 2E
F00:0777       	createprocessmsg: .string "hell no"
               S01:00002803:  68 65 6C 6C 20 6E 6F
F00:0778       	reloadmsg: .string "reloading."
               S01:0000280B:  72 65 6C 6F 61 64 69 6E 67 2E
F00:0779       	malloctableusemsg: .string "table is showing memory pages\r\n take the left value and the heading value to create the p
               S01:00002816:  74 61 62 6C 65 20 69 73 20 73 68 6F 77 69 6E 67
               S01:00002826:  20 6D 65 6D 6F 72 79 20 70 61 67 65 73 0D 0A 20
F00:0780       	malloctablemsg: .string "Memory Allocation Table"
               S01:00002899:  4D 65 6D 6F 72 79 20 41 6C 6C 6F 63 61 74 69 6F
               S01:000028A9:  6E 20 54 61 62 6C 65
F00:0781       
F00:0782       
F00:0783       
F00:0784       	commandPromptmsg: .string "\r\n>";
               S01:000028B1:  0D 0A 3E
F00:0785       	invalidcommandmsg: .string ": Invalid command.Shall we play a game?"
               S01:000028B5:  3A 20 49 6E 76 61 6C 69 64 20 63 6F 6D 6D 61 6E
               S01:000028C5:  64 2E 53 68 61 6C 6C 20 77 65 20 70 6C 61 79 20
F00:0786       	helpmsg: .byte "Joshua MCP builtin commands:\r\n"
               S01:000028DD:  4A 6F 73 68 75 61 20 4D 43 50 20 62 75 69 6C 74
               S01:000028ED:  69 6E 20 63 6F 6D 6D 61 6E 64 73 3A 0D 0A
F00:0787       			 .byte "? - help, you are reading help right now\r\n"
               S01:000028FB:  3F 20 2D 20 68 65 6C 70 2C 20 79 6F 75 20 61 72
               S01:0000290B:  65 20 72 65 61 64 69 6E 67 20 68 65 6C 70 20 72
F00:0788       			 .byte "h,0xXXXX - hexdump from address 0xXXXX for 255 bytes\r\n"
               S01:00002925:  68 2C 30 78 58 58 58 58 20 2D 20 68 65 78 64 75
               S01:00002935:  6D 70 20 66 72 6F 6D 20 61 64 64 72 65 73 73 20
F00:0789       			 .byte "l,0xXXXX,filename - load into memory at 0xXXXX the file filename\r\n"
               S01:0000295B:  6C 2C 30 78 58 58 58 58 2C 66 69 6C 65 6E 61 6D
               S01:0000296B:  65 20 2D 20 6C 6F 61 64 20 69 6E 74 6F 20 6D 65
F00:0790       			 .byte "r,0xXXXX - run from address 0xXXXX\r\n"
               S01:0000299D:  72 2C 30 78 58 58 58 58 20 2D 20 72 75 6E 20 66
               S01:000029AD:  72 6F 6D 20 61 64 64 72 65 73 73 20 30 78 58 58
F00:0791       			 .byte "in,0xYY - receive from peripheral at address 0xYY\r\n"
               S01:000029C1:  69 6E 2C 30 78 59 59 20 2D 20 72 65 63 65 69 76
               S01:000029D1:  65 20 66 72 6F 6D 20 70 65 72 69 70 68 65 72 61
F00:0792       			 .byte "out,0xXX,0xYY - send to peripheral at address 0xYY then value 0xXX\r\n"
               S01:000029F4:  6F 75 74 2C 30 78 58 58 2C 30 78 59 59 20 2D 20
               S01:00002A04:  73 65 6E 64 20 74 6F 20 70 65 72 69 70 68 65 72
F00:0793       			 .byte "m* - show malloc table\r\n"
               S01:00002A38:  6D 2A 20 2D 20 73 68 6F 77 20 6D 61 6C 6C 6F 63
               S01:00002A48:  20 74 61 62 6C 65 0D 0A
F00:0794       			 .byte "exit - exit and reload the MCP\r\n"
               S01:00002A50:  65 78 69 74 20 2D 20 65 78 69 74 20 61 6E 64 20
               S01:00002A60:  72 65 6C 6F 61 64 20 74 68 65 20 4D 43 50 0D 0A
F00:0795       			 .string 0
               S01:00002A70:  00
F00:0796       builtin:
F00:0797       	;# 2bytes pointer to command - zero terminated, 2bytes pointer to handler Routines
F00:0798       	;# last item will have 0x000 to indicate end of list
F00:0799       	;#hexdump
F00:0800       		.2byte hexdumpcmd,hexdump
               S01:00002A72:  E8 22
               S01:00002A74:  EC 22
F00:0801       		.2byte loadcmd,load
               S01:00002A76:  F8 23
               S01:00002A78:  FC 23
F00:0802       		.2byte runcmd,run
               S01:00002A7A:  6A 24
               S01:00002A7C:  6E 24
F00:0803       		.2byte helpcmd,help
               S01:00002A7E:  BA 24
               S01:00002A80:  BC 24
F00:0804       		.2byte outcmd,dout
               S01:00002A82:  06 25
               S01:00002A84:  0B 25
F00:0805       		.2byte incmd,din
               S01:00002A86:  C5 24
               S01:00002A88:  C9 24
F00:0806       		.2byte createprocesscmd,createprocess
               S01:00002A8A:  54 25
               S01:00002A8C:  63 25
F00:0807       		.2byte reloadcmd,reload
               S01:00002A8E:  83 25
               S01:00002A90:  88 25
F00:0808       		.2byte malloctablecmd,malloctable
               S01:00002A92:  93 25
               S01:00002A94:  96 25
F00:0809       
F00:0810       	endoflist: .2byte 0,0
               S01:00002A96:  00 00
               S01:00002A98:  00 00
F00:0811       
F00:0812       data:
F00:0813       	cmdlineexecute: .byte 0
               S01:00002A9A:  00
F00:0814       	cmdlinebufferlen: .byte 0
               S01:00002A9B:  00
F00:0815       	cmdlinebuffer: .space 50
F00:0816       	cmdlinebuffer$:
F00:0817       
F00:0818       	nullroutine:
F00:0819       		ei
               S01:00002ACE:  FB
F00:0820       		reti
               S01:00002ACF:  ED 4D
F00:0821       
F00:0822       	
F00:0823       
F00:0824       
F00:0825       	;#.org 0x700
F00:0826       	.align 8
F00:0827       	jumptable: ;# for keyboard interrupts
F00:0828       	.2byte nullroutine ;0
               S01:00002B00:  CE 2A
F00:0829       	.2byte cmdline ;2
               S01:00002B02:  10 22
F00:0830       	.2byte nullroutine ;4
               S01:00002B04:  CE 2A
F00:0831       	.2byte nullroutine ;6
               S01:00002B06:  CE 2A
F00:0832       	.2byte nullroutine ;0
               S01:00002B08:  CE 2A
F00:0833       	.2byte nullroutine ;0
               S01:00002B0A:  CE 2A
F00:0834       	.2byte nullroutine ;0
               S01:00002B0C:  CE 2A
F00:0835       	.2byte nullroutine ;0
               S01:00002B0E:  CE 2A
F00:0836       	.2byte nullroutine ;0
               S01:00002B10:  CE 2A
F00:0837       	.2byte nullroutine ;0
               S01:00002B12:  CE 2A
F00:0838       #/* 10 */
F00:0839       	.2byte nullroutine ;0
               S01:00002B14:  CE 2A
F00:0840       	.2byte nullroutine ;0
               S01:00002B16:  CE 2A
F00:0841       	.2byte nullroutine ;0
               S01:00002B18:  CE 2A
F00:0842       	.2byte nullroutine ;0
               S01:00002B1A:  CE 2A
F00:0843       	.2byte nullroutine ;0
               S01:00002B1C:  CE 2A
F00:0844       	.2byte nullroutine ;0
               S01:00002B1E:  CE 2A
F00:0845       	.2byte nullroutine ;0
               S01:00002B20:  CE 2A
F00:0846       	.2byte nullroutine ;0
               S01:00002B22:  CE 2A
F00:0847       	.2byte nullroutine ;0
               S01:00002B24:  CE 2A
F00:0848       	.2byte nullroutine ;0
               S01:00002B26:  CE 2A
F00:0849       #/* 20 */
F00:0850       	.2byte nullroutine ;0
               S01:00002B28:  CE 2A
F00:0851       	.2byte nullroutine ;0
               S01:00002B2A:  CE 2A
F00:0852       	.2byte nullroutine ;0
               S01:00002B2C:  CE 2A
F00:0853       	.2byte nullroutine ;0
               S01:00002B2E:  CE 2A
F00:0854       	.2byte nullroutine ;0
               S01:00002B30:  CE 2A
F00:0855       	.2byte nullroutine ;0
               S01:00002B32:  CE 2A
F00:0856       	.2byte nullroutine ;0
               S01:00002B34:  CE 2A
F00:0857       	.2byte nullroutine ;0
               S01:00002B36:  CE 2A
F00:0858       	.2byte nullroutine ;0
               S01:00002B38:  CE 2A
F00:0859       	.2byte nullroutine ;0
               S01:00002B3A:  CE 2A
F00:0860       #/* 30 */
F00:0861       	.2byte nullroutine ;0
               S01:00002B3C:  CE 2A
F00:0862       	.2byte nullroutine ;0
               S01:00002B3E:  CE 2A
F00:0863       	.2byte nullroutine ;0
               S01:00002B40:  CE 2A
F00:0864       	.2byte nullroutine ;0
               S01:00002B42:  CE 2A
F00:0865       	.2byte nullroutine ;0
               S01:00002B44:  CE 2A
F00:0866       	.2byte nullroutine ;0
               S01:00002B46:  CE 2A
F00:0867       	.2byte nullroutine ;0
               S01:00002B48:  CE 2A
F00:0868       	.2byte nullroutine ;0
               S01:00002B4A:  CE 2A
F00:0869       	.2byte nullroutine ;0
               S01:00002B4C:  CE 2A
F00:0870       	.2byte nullroutine ;0
               S01:00002B4E:  CE 2A
F00:0871       #/* 40 */
F00:0872       	.2byte nullroutine ;0
               S01:00002B50:  CE 2A
F00:0873       	.2byte nullroutine ;0
               S01:00002B52:  CE 2A
F00:0874       	.2byte nullroutine ;0
               S01:00002B54:  CE 2A
F00:0875       	.2byte nullroutine ;0
               S01:00002B56:  CE 2A
F00:0876       	.2byte nullroutine ;0
               S01:00002B58:  CE 2A
F00:0877       	.2byte nullroutine ;0
               S01:00002B5A:  CE 2A
F00:0878       	.2byte nullroutine ;0
               S01:00002B5C:  CE 2A
F00:0879       	.2byte nullroutine ;0
               S01:00002B5E:  CE 2A
F00:0880       	.2byte nullroutine ;0
               S01:00002B60:  CE 2A
F00:0881       	.2byte nullroutine ;0
               S01:00002B62:  CE 2A
F00:0882       #/* 50 */
F00:0883       	.2byte nullroutine ;0
               S01:00002B64:  CE 2A
F00:0884       	.2byte nullroutine ;0
               S01:00002B66:  CE 2A
F00:0885       	.2byte nullroutine ;0
               S01:00002B68:  CE 2A
F00:0886       	.2byte nullroutine ;0
               S01:00002B6A:  CE 2A
F00:0887       	.2byte nullroutine ;0
               S01:00002B6C:  CE 2A
F00:0888       	.2byte nullroutine ;0
               S01:00002B6E:  CE 2A
F00:0889       	.2byte nullroutine ;0
               S01:00002B70:  CE 2A
F00:0890       	.2byte nullroutine ;0
               S01:00002B72:  CE 2A
F00:0891       	.2byte nullroutine ;0
               S01:00002B74:  CE 2A
F00:0892       	.2byte nullroutine ;0
               S01:00002B76:  CE 2A
F00:0893       #/* 60 */
F00:0894       	.2byte nullroutine ;0
               S01:00002B78:  CE 2A
F00:0895       	.2byte nullroutine ;0
               S01:00002B7A:  CE 2A
F00:0896       	.2byte nullroutine ;0
               S01:00002B7C:  CE 2A
F00:0897       	.2byte nullroutine ;0
               S01:00002B7E:  CE 2A
F00:0898       	.2byte nullroutine ;0
               S01:00002B80:  CE 2A
F00:0899       	.2byte nullroutine ;0
               S01:00002B82:  CE 2A
F00:0900       	.2byte nullroutine ;0
               S01:00002B84:  CE 2A
F00:0901       	.2byte nullroutine ;0
               S01:00002B86:  CE 2A
F00:0902       	.2byte nullroutine ;0
               S01:00002B88:  CE 2A
F00:0903       	.2byte nullroutine ;0
               S01:00002B8A:  CE 2A
F00:0904       #/* 70 */
F00:0905       	.2byte nullroutine ;0
               S01:00002B8C:  CE 2A
F00:0906       	.2byte nullroutine ;0
               S01:00002B8E:  CE 2A
F00:0907       	.2byte nullroutine ;0
               S01:00002B90:  CE 2A
F00:0908       	.2byte nullroutine ;0
               S01:00002B92:  CE 2A
F00:0909       	.2byte nullroutine ;0
               S01:00002B94:  CE 2A
F00:0910       	.2byte nullroutine ;0
               S01:00002B96:  CE 2A
F00:0911       	.2byte nullroutine ;0
               S01:00002B98:  CE 2A
F00:0912       	.2byte nullroutine ;0
               S01:00002B9A:  CE 2A
F00:0913       	.2byte nullroutine ;0
               S01:00002B9C:  CE 2A
F00:0914       	.2byte nullroutine ;0
               S01:00002B9E:  CE 2A
F00:0915       #/* 80 */
F00:0916       	.2byte nullroutine ;0
               S01:00002BA0:  CE 2A
F00:0917       	.2byte nullroutine ;0
               S01:00002BA2:  CE 2A
F00:0918       	.2byte nullroutine ;0
               S01:00002BA4:  CE 2A
F00:0919       	.2byte nullroutine ;0
               S01:00002BA6:  CE 2A
F00:0920       	.2byte nullroutine ;0
               S01:00002BA8:  CE 2A
F00:0921       	.2byte nullroutine ;0
               S01:00002BAA:  CE 2A
F00:0922       	.2byte nullroutine ;0
               S01:00002BAC:  CE 2A
F00:0923       	.2byte nullroutine ;0
               S01:00002BAE:  CE 2A
F00:0924       	.2byte nullroutine ;0
               S01:00002BB0:  CE 2A
F00:0925       	.2byte nullroutine ;0
               S01:00002BB2:  CE 2A
F00:0926       #/* 90 */
F00:0927       	.2byte nullroutine ;0
               S01:00002BB4:  CE 2A
F00:0928       	.2byte nullroutine ;0
               S01:00002BB6:  CE 2A
F00:0929       	.2byte nullroutine ;0
               S01:00002BB8:  CE 2A
F00:0930       	.2byte nullroutine ;0
               S01:00002BBA:  CE 2A
F00:0931       	.2byte nullroutine ;0
               S01:00002BBC:  CE 2A
F00:0932       	.2byte nullroutine ;0
               S01:00002BBE:  CE 2A
F00:0933       	.2byte nullroutine ;0
               S01:00002BC0:  CE 2A
F00:0934       	.2byte nullroutine ;0
               S01:00002BC2:  CE 2A
F00:0935       	.2byte nullroutine ;0
               S01:00002BC4:  CE 2A
F00:0936       	.2byte nullroutine ;0
               S01:00002BC6:  CE 2A
F00:0937       #/* 100 */
F00:0938       	.2byte nullroutine ;0
               S01:00002BC8:  CE 2A
F00:0939       	.2byte nullroutine ;0
               S01:00002BCA:  CE 2A
F00:0940       	.2byte nullroutine ;0
               S01:00002BCC:  CE 2A
F00:0941       	.2byte nullroutine ;0
               S01:00002BCE:  CE 2A
F00:0942       	.2byte nullroutine ;0
               S01:00002BD0:  CE 2A
F00:0943       	.2byte nullroutine ;0
               S01:00002BD2:  CE 2A
F00:0944       	.2byte nullroutine ;0
               S01:00002BD4:  CE 2A
F00:0945       	.2byte nullroutine ;0
               S01:00002BD6:  CE 2A
F00:0946       	.2byte nullroutine ;0
               S01:00002BD8:  CE 2A
F00:0947       	.2byte nullroutine ;0
               S01:00002BDA:  CE 2A
F00:0948       #/* 110 */
F00:0949       	.2byte nullroutine ;0
               S01:00002BDC:  CE 2A
F00:0950       	.2byte nullroutine ;0
               S01:00002BDE:  CE 2A
F00:0951       	.2byte nullroutine ;0
               S01:00002BE0:  CE 2A
F00:0952       	.2byte nullroutine ;0
               S01:00002BE2:  CE 2A
F00:0953       	.2byte nullroutine ;0
               S01:00002BE4:  CE 2A
F00:0954       	.2byte nullroutine ;0
               S01:00002BE6:  CE 2A
F00:0955       	.2byte nullroutine ;0
               S01:00002BE8:  CE 2A
F00:0956       	.2byte nullroutine ;0
               S01:00002BEA:  CE 2A
F00:0957       	.2byte nullroutine ;0
               S01:00002BEC:  CE 2A
F00:0958       	.2byte nullroutine ;0
               S01:00002BEE:  CE 2A
F00:0959       #/* 120 */
F00:0960       	.2byte nullroutine ;0
               S01:00002BF0:  CE 2A
F00:0961       	.2byte nullroutine ;0
               S01:00002BF2:  CE 2A
F00:0962       	.2byte nullroutine ;0
               S01:00002BF4:  CE 2A
F00:0963       	.2byte nullroutine ;0
               S01:00002BF6:  CE 2A
F00:0964       	.2byte nullroutine ;0
               S01:00002BF8:  CE 2A
F00:0965       	.2byte nullroutine ;0
               S01:00002BFA:  CE 2A
F00:0966       	.2byte nullroutine ;0
               S01:00002BFC:  CE 2A
F00:0967       	.2byte nullroutine ;0
               S01:00002BFE:  CE 2A
F00:0968       
F00:0969       
F00:0970       	ENDADDRESS:


Sections:
S01  seg2000


Sources:
F00  cmd.s
F01  Routines.inc
F02  SERIAL.inc
F03  SDCARD.inc
F04  libs.inc
F05  debug
F06  debug


Symbols:
nullroutine EXPR(10958=0x2ace) ABS 
data EXPR(10906=0x2a9a) UNUSED ABS 
endoflist EXPR(10902=0x2a96) UNUSED ABS 
outerrormsg EXPR(10231=0x27f7) UNUSED ABS 
inerrormsg EXPR(10085=0x2765) UNUSED ABS 
messages EXPR(9738=0x260a) UNUSED ABS 
malloctableusemsg EXPR(10262=0x2816) ABS 
 malloctable _3$ EXPR(9699=0x25e3) ABS 
 malloctable _2$ EXPR(9697=0x25e1) ABS 
 malloctable _1$ EXPR(9686=0x25d6) ABS 
 malloctable _5$ EXPR(9682=0x25d2) ABS 
 malloctable _6$ EXPR(9650=0x25b2) ABS 
pagecount EXPR(9737=0x2609) ABS 
malloctablemsg EXPR(10393=0x2899) ABS 
malloctable EXPR(9622=0x2596) ABS 
malloctablecmd EXPR(9619=0x2593) ABS 
reload EXPR(9608=0x2588) ABS 
reloadcmd EXPR(9603=0x2583) ABS 
 createprocess _2$ EXPR(9597=0x257d) ABS 
 createprocess _1$ EXPR(9582=0x256e) ABS 
createprocessmsg EXPR(10243=0x2803) ABS 
createprocesscmd EXPR(9556=0x2554) ABS 
outsyntaxmsg EXPR(10101=0x2775) ABS 
outexit EXPR(9553=0x2551) ABS 
outerror EXPR(9547=0x254b) ABS 
outmsg EXPR(10097=0x2771) ABS 
dout EXPR(9483=0x250b) ABS 
outcmd EXPR(9478=0x2506) ABS 
insyntaxmsg EXPR(9988=0x2704) ABS 
_inexit EXPR(9475=0x2503) ABS 
_inerror EXPR(9469=0x24fd) ABS 
inmsg EXPR(9985=0x2701) ABS 
din EXPR(9417=0x24c9) ABS 
incmd EXPR(9413=0x24c5) ABS 
helpmsg EXPR(10461=0x28dd) ABS 
help EXPR(9404=0x24bc) ABS 
helpcmd EXPR(9402=0x24ba) ABS 
runsyntaxmsg EXPR(9936=0x26d0) ABS 
runexit EXPR(9399=0x24b7) ABS 
runfrom EXPR(9616=0x2590) ABS 
runerror EXPR(9393=0x24b1) ABS 
runmsg EXPR(9932=0x26cc) ABS 
run EXPR(9326=0x246e) ABS 
runcmd EXPR(9322=0x246a) ABS 
loaderrormsg EXPR(9918=0x26be) ABS 
_doneload$1 EXPR(9314=0x2462) ABS 
_ladr EXPR(9317=0x2465) ABS 
loadsyntaxmsg EXPR(9856=0x2680) ABS 
_loadc$1 EXPR(9239=0x2417) ABS 
loadmsg EXPR(9851=0x267b) ABS 
load EXPR(9212=0x23fc) ABS 
loadcmd EXPR(9208=0x23f8) ABS 
_prt$ EXPR(9185=0x23e1) ABS 
_nex$2 EXPR(9178=0x23da) ABS 
_dexdpc$1 EXPR(9167=0x23cf) ABS 
 _hexdp$1 2$ EXPR(9146=0x23ba) ABS 
boldoff EXPR(9785=0x2639) ABS 
boldon EXPR(9780=0x2634) ABS 
 _hexdp$1 1$ EXPR(9142=0x23b6) ABS 
_hexdp$1 EXPR(9109=0x2395) ABS 
_hexdp0 EXPR(9103=0x238f) ABS 
 hexdumplinetitle _1$ EXPR(9079=0x2377) ABS 
_highlow EXPR(9090=0x2382) ABS 
hexdumpprefix EXPR(9777=0x2631) ABS 
hexdumplinetitle EXPR(9058=0x2362) ABS 
_col$1 EXPR(9035=0x234b) ABS 
_sp$1 EXPR(9024=0x2340) ABS 
hexdumpsyntaxmsg EXPR(9789=0x263d) ABS 
hexdumpexit EXPR(9016=0x2338) ABS 
_hexdumprint EXPR(9091=0x2383) ABS 
hexdumpheader EXPR(9019=0x233b) ABS 
hidump EXPR(9617=0x2591) ABS 
lodump EXPR(9618=0x2592) ABS 
hexdumperror EXPR(9010=0x2332) ABS 
hexdumpmsg EXPR(9769=0x2629) ABS 
hexdump EXPR(8940=0x22ec) ABS 
hexdumpcmd EXPR(8936=0x22e8) ABS 
_findbuildtinFail EXPR(8908=0x22cc) ABS 
_findbuiltinSuccess EXPR(8912=0x22d0) ABS 
findbuiltin1 EXPR(8856=0x2298) ABS 
findbuiltinrestart EXPR(8850=0x2292) ABS 
builtin EXPR(10866=0x2a72) ABS 
 cmdline 5$ EXPR(8815=0x226f) ABS 
 cmdline 3$ EXPR(8808=0x2268) ABS 
 cmdline 2$ EXPR(8820=0x2274) ABS 
 cmdline 4$ EXPR(8822=0x2276) ABS 
 cmdline 1$ EXPR(8782=0x224e) ABS 
executecmd EXPR(8831=0x227f) ABS 
executeexit EXPR(8837=0x2285) ABS 
 cmdline 12$ EXPR(8735=0x221f) ABS 
cmdline EXPR(8720=0x2210) ABS 
cmdlinebuffer$ EXPR(10958=0x2ace) ABS 
cmdlinebufferlen EXPR(10907=0x2a9b) ABS 
_hexdp$99 EXPR(8688=0x21f0) ABS 
hexdumpcmdline EXPR(8683=0x21eb) ABS 
invalidcommandmsg EXPR(10421=0x28b5) ABS 
loaderr EXPR(8659=0x21d3) ABS 
createprocess EXPR(9571=0x2563) ABS 
ignorekeyboard EXPR(8658=0x21d2) ABS 
loadandrun EXPR(8630=0x21b6) ABS 
findbuiltin EXPR(8840=0x2288) ABS 
cmdlinebuffer EXPR(10908=0x2a9c) ABS 
cmdlineexecute EXPR(10906=0x2a9a) ABS 
loop EXPR(8581=0x2185) ABS 
commandPromptmsg EXPR(10417=0x28b1) ABS 
resetcommandline EXPR(8701=0x21fd) ABS 
jumptable EXPR(11008=0x2b00) ABS 
reloadmsg EXPR(10251=0x280b) ABS 
 newcommand 1$ EXPR(8564=0x2174) ABS 
newcommand EXPR(8549=0x2165) ABS 
doreload EXPR(8629=0x21b5) ABS 
welcomemsg EXPR(9738=0x260a) ABS 
Mul8b EXPR(8529=0x2151) UNUSED ABS 
getprocessbyid EXPR(8526=0x214e) UNUSED ABS 
strncpy EXPR(8523=0x214b) UNUSED ABS 
strcpy EXPR(8520=0x2148) UNUSED ABS 
nextprocessinfo EXPR(8517=0x2145) UNUSED ABS 
startprocessinfo EXPR(8514=0x2142) UNUSED ABS 
printhexL EXPR(8511=0x213f) UNUSED ABS 
setresetpage EXPR(8508=0x213c) UNUSED ABS 
Div8 EXPR(8505=0x2139) UNUSED ABS 
getmalloctable EXPR(8502=0x2136) ABS 
getcommandparams EXPR(8499=0x2133) UNUSED ABS 
createProcess EXPR(8496=0x2130) ABS 
getfilename EXPR(8493=0x212d) UNUSED ABS 
directorynextfile EXPR(8490=0x212a) UNUSED ABS 
directoryopen EXPR(8487=0x2127) UNUSED ABS 
hextobyte EXPR(8484=0x2124) ABS 
touppercase EXPR(8481=0x2121) ABS 
strlen EXPR(8475=0x211b) ABS 
memset EXPR(8472=0x2118) ABS 
loadfile EXPR(8469=0x2115) ABS 
println EXPR(8463=0x210f) ABS 
print EXPR(8460=0x210c) ABS 
functionlookups EXPR(8460=0x210c) UNUSED ABS 
exitprocess EXPR(8535=0x2157) ABS 
putc EXPR(8478=0x211e) ABS 
exit EXPR(8428=0x20ec) UNUSED ABS 
_main EXPR(8538=0x215a) ABS 
exitprocessadr EXPR(8536=0x2158) ABS 
_getprocessid EXPR(8448=0x2100) ABS 
printhex EXPR(8466=0x2112) ABS 
processid EXPR(8459=0x210b) ABS 
getprocid EXPR(8532=0x2154) ABS 
getprocidadr EXPR(8533=0x2155) ABS 
Mul8badr EXPR(8530=0x2152) ABS 
getprocessbyidadr EXPR(8527=0x214f) ABS 
strncpyadr EXPR(8524=0x214c) ABS 
strcpyadr EXPR(8521=0x2149) ABS 
nextprocessinfoadr EXPR(8518=0x2146) ABS 
startprocessinfoadr EXPR(8515=0x2143) ABS 
printhexLadr EXPR(8512=0x2140) ABS 
setresetpageadr EXPR(8509=0x213d) ABS 
div8adr EXPR(8506=0x213a) ABS 
getmalloctableadr EXPR(8503=0x2137) ABS 
getcommandparamsadr EXPR(8500=0x2134) ABS 
createProcessadr EXPR(8497=0x2131) ABS 
getfilenameadr EXPR(8494=0x212e) ABS 
directorynextfileadr EXPR(8491=0x212b) ABS 
directoryopenadr EXPR(8488=0x2128) ABS 
printlnadr EXPR(8464=0x2110) ABS 
hextobyteadr EXPR(8485=0x2125) ABS 
touppercaseadr EXPR(8482=0x2122) ABS 
putcadr EXPR(8479=0x211f) ABS 
strlenadr EXPR(8476=0x211c) ABS 
memsetadr EXPR(8473=0x2119) ABS 
loadfileadr EXPR(8470=0x2116) ABS 
printhexadr EXPR(8467=0x2113) ABS 
printadr EXPR(8461=0x210d) ABS 
ENDADDRESS EXPR(11264=0x2c00) ABS 
 *current pc dummy* EXPR(8194=0x2002) INTERNAL PROT ABS 
NEXTNUMBER EXPR(30=0x1e) UNUSED 
EXITPROCESS EXPR(29=0x1d) 
MULTIPLY8 EXPR(27=0x1b) 
GETPROCESSBYID EXPR(26=0x1a) 
NEXTPROCESSINFO EXPR(23=0x17) 
STARTPROCESSINFO EXPR(22=0x16) 
SETRESETPAGE EXPR(20=0x14) 
DIV8 EXPR(19=0x13) 
GETMALLOCTABLE EXPR(18=0x12) 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRNCPY EXPR(10=0xa) 
STRCPY EXPR(24=0x18) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEXL EXPR(21=0x15) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
SETPROCID EXPR(28=0x1c) 
GetAddress EXPR(2052=0x804) 
FALSE EXPR(0=0x0) 
TRUE EXPR(1=0x1) 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(12288=0x3000) UNUSED 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) UNUSED 
NAMEAVAILABLE EXPR(33=0x21) UNUSED 
GETNAME EXPR(32=0x20) UNUSED 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) UNUSED 
READNEXTBYTE EXPR(5=0x5) UNUSED 
FILENAMEAPPEND EXPR(4=0x4) UNUSED 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) UNUSED 
FILENAMECLEAR EXPR(1=0x1) UNUSED 
SDCARD EXPR(5=0x5) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) 
__ORG__ EXPR(8192=0x2000) 
commandMemory EXPR(8192=0x2000) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
