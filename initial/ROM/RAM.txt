F00:0001       
F00:0002       
F00:0003       
F00:0004       #define LOWORD(l) ((WORD)(l))
F00:0005       #define HIWORD(l) ((WORD)(((DWORD)(l) >> 16) & 0xFFFF))
F00:0006       #define LOBYTE(w) ((BYTE)(w))
F00:0007       #define HIBYTE(w) ((BYTE)(((WORD)(w) >> 8) & 0xFF))
F00:0008       
F00:0009       .include "SDCARD.inc"
F01:0001       .equ SDCARD,0x05
F01:0002       ; ******* SDCARD *********
F01:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F01:0004       .equ FILENAMECLEAR ,1
F01:0005       
F01:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F01:0007       .equ OPEN ,2
F01:0008       
F01:0009       ; z80 out - close: no return value
F01:0010       .equ CLOSE ,3
F01:0011       
F01:0012       ; z80 out + out - filenameappend: no return value
F01:0013       .equ FILENAMEAPPEND ,4
F01:0014       
F01:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F01:0016       .equ READNEXTBYTE ,5
F01:0017       
F01:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F01:0019       .equ AVAILABLE ,6
F01:0020       
F01:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F01:0022       .equ OPENWRITE,7
F01:0023       
F01:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F01:0025       .equ WRITEBYTE,8
F01:0026       
F01:0027       ;#===============================
F01:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F01:0029       .equ GETNAME,0x20
F01:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F01:0031       .equ NAMEAVAILABLE,0x21
F01:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F01:0033       .equ OPENDIRECTORY,0x31
F01:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F01:0035       .equ NEXTFILE,0x32
F00:0010       .include "Routines.inc"
F02:0001       
F02:0002       # address where user programs load
F02:0003       .include "SERIAL.inc"
F03:0001       .equ SERIALPORT , 0x01
F03:0002       .equ SERIALPORT2, 0x02
F03:0003       
F02:0004       .include "SDCARD.inc"
F04:0001       .equ SDCARD,0x05
F04:0002       ; ******* SDCARD *********
F04:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F04:0004       .equ FILENAMECLEAR ,1
F04:0005       
F04:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F04:0007       .equ OPEN ,2
F04:0008       
F04:0009       ; z80 out - close: no return value
F04:0010       .equ CLOSE ,3
F04:0011       
F04:0012       ; z80 out + out - filenameappend: no return value
F04:0013       .equ FILENAMEAPPEND ,4
F04:0014       
F04:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F04:0016       .equ READNEXTBYTE ,5
F04:0017       
F04:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F04:0019       .equ AVAILABLE ,6
F04:0020       
F04:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F04:0022       .equ OPENWRITE,7
F04:0023       
F04:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F04:0025       .equ WRITEBYTE,8
F04:0026       
F04:0027       ;#===============================
F04:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F04:0029       .equ GETNAME,0x20
F04:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F04:0031       .equ NAMEAVAILABLE,0x21
F04:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F04:0033       .equ OPENDIRECTORY,0x31
F04:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F04:0035       .equ NEXTFILE,0x32
F02:0005       .equ commandMemory, 0x1000
F02:0006       .equ userMemory,0x2000
F02:0007       .equ libMemory,0xF000
F02:0008       
F02:0009       .equ TRUE, 1
F02:0010       .equ FALSE, 0
F02:0011       
F02:0012       # the only fixed address (i hope), use it to get the address of utilities methods
F02:0013       # ld a, PRINT
F02:0014       # call GetAddress
F02:0015       # address for print loaded into hl
F02:0016       # the value in hl can change between os versions so do not hard code the values
F02:0017       
F02:0018       .equ GetAddress, 0x0804
F02:0019       .equ PRINT,		1
F02:0020       .equ PRINTLN,	9
F02:0021       .equ PRINTHEX,	2
F02:0022       .equ LOADFILE,	3
F02:0023       .equ MEMSET,	4
F02:0024       .equ STRLEN,	5
F02:0025       .equ PUTC,		6
F02:0026       .equ TOUPPERCASE,7
F02:0027       .equ HEXTOBYTE,	8
F02:0028       .equ STRNCPY,10
F02:0029       .equ CREATEPROCESS,16
F02:0030       .equ GETCOMMANDPARAMS,17
F02:0031       # filesystem - primitive functions, probably going to change 
F02:0032       .equ DIRECTORYOPEN,13
F02:0033       .equ DIRECTORYNEXTFILE,14
F02:0034       .equ GETFILENAME,15
F02:0035       
F02:0036       
F02:0037       
F02:0038       .equ NEXTNUMBER,18
F02:0039       
F02:0040       
F00:0011       
F00:0012       
F00:0013       	.org 0x800
F00:0014       	jp boot
               S01:00000800:  C3 07 08
F00:0015       	.align 2
F00:0016       	start:
F00:0017       	jp loadaddress
               S01:00000804:  C3 B3 0A
F00:0018       	
F00:0019       boot:
F00:0020       	ld sp,0xffff
               S01:00000807:  31 FF FF
F00:0021       
F00:0022       	di
               S01:0000080A:  F3
F00:0023       	ld hl,readymsg
               S01:0000080B:  21 64 0B
F00:0024       	call print
               S01:0000080E:  CD A1 08
F00:0025       		;ld b, endlabel2-label2
F00:0026       		;ld c,SERIALPORT
F00:0027       		;otir
F00:0028       		
F00:0029       		im 2 ;/* interrupt mode 2*/
               S01:00000811:  ED 5E
F00:0030       		ld a, jumptable/256 ;// hibyte
               S01:00000813:  3E 0C
F00:0031       		ld i,a
               S01:00000815:  ED 47
F00:0032       		ei   ;#/* enable interrupts*/
               S01:00000817:  FB
F00:0033       
F00:0034       		ld hl,loadedmsg
               S01:00000818:  21 5B 0B
F00:0035       		call print
               S01:0000081B:  CD A1 08
F00:0036       		#== ******* Command processor Loop ******** ==#
F00:0037       	commandprocessloop:	
F00:0038       		ld hl,commandprocessor
               S01:0000081E:  21 73 0B
F00:0039       #		ld de,commandMemory
F00:0040       		ld de,0
               S01:00000821:  11 00 00
F00:0041       		call loadFILE
               S01:00000824:  CD E1 08
F00:0042       		cp 0
               S01:00000827:  FE 00
F00:0043       		jp nz,errorloading
               S01:00000829:  C2 3B 08
F00:0044       		ld (_cmdlne),hl ;# save the load address
               S01:0000082C:  22 48 08
F00:0045       		ld hl,0
               S01:0000082F:  21 00 00
F00:0046       		call println
               S01:00000832:  CD 93 08
F00:0047       #		call commandMemory # run the file just loaded.
F00:0048       		call commandline
               S01:00000835:  CD 47 08
F00:0049       		jp commandprocessloop
               S01:00000838:  C3 1E 08
F00:0050       
F00:0051       	errorloading:
F00:0052       		call printhex
               S01:0000083B:  CD C8 08
F00:0053       		ld hl,errorloadingmsg
               S01:0000083E:  21 77 0B
F00:0054       		call println
               S01:00000841:  CD 93 08
F00:0055       		jp commandprocessloop
               S01:00000844:  C3 1E 08
F00:0056       
F00:0057       commandline: .byte 0xc3
               S01:00000847:  C3
F00:0058       	_cmdlne: .2byte 0
               S01:00000848:  00 00
F00:0059       
F00:0060       		#======================suboutines===============================================#
F00:0061       	# === memset === #
F00:0062       		# ld hl, address to start
F00:0063       		# ld a,0 byte to write into address
F00:0064       		# ld b,1 count of bytes to write
F00:0065       	memset:
F00:0066       		push af
               S01:0000084A:  F5
F00:0067       		push hl
               S01:0000084B:  E5
F00:0068       	_metset$1:
F00:0069       		ld (hl),a
               S01:0000084C:  77
F00:0070       		inc hl
               S01:0000084D:  23
F00:0071       		djnz _metset$1
               S01:0000084E:  10 FC
F00:0072       		pop hl
               S01:00000850:  E1
F00:0073       		pop af
               S01:00000851:  F1
F00:0074       		ret
               S01:00000852:  C9
F00:0075       	#== strlen ==#
F00:0076       		# ld hl, address to start
F00:0077       		# call strlen
F00:0078       		# return len in b
F00:0079       	strlen:
F00:0080       		push hl
               S01:00000853:  E5
F00:0081       		push af
               S01:00000854:  F5
F00:0082       	
F00:0083       		ld b,0
               S01:00000855:  06 00
F00:0084       	_strlen$:
F00:0085       		ld a,(hl)
               S01:00000857:  7E
F00:0086       		cp 0
               S01:00000858:  FE 00
F00:0087       		jp z, strlenexit
               S01:0000085A:  CA 62 08
F00:0088       		inc b
               S01:0000085D:  04
F00:0089       		inc hl
               S01:0000085E:  23
F00:0090       		jp _strlen$:
               S01:0000085F:  C3 57 08
F00:0091       	strlenexit:
F00:0092       	;#	ld a,b
F00:0093       	;#	call printhex
F00:0094       		pop af
               S01:00000862:  F1
F00:0095       		pop hl
               S01:00000863:  E1
F00:0096       		ret
               S01:00000864:  C9
F00:0097       
F00:0098       	#=== strncpy ==#
F00:0099       	;# copy from source into destination size bytes. no validation is done.
F00:0100       	;# ld hl, source
F00:0101       	;# ld de, destination
F00:0102       	;# ld bc, size
F00:0103       
F00:0104       	strncpy:
F00:0105       		ldir
               S01:00000865:  ED B0
F00:0106       		ret
               S01:00000867:  C9
F00:0107       
F00:0108       	# === strcpy == #
F00:0109       	;# copy from source into destination string is zero terminated, no validation is done
F00:0110       	;# ld hl,source
F00:0111       	;# ld de,destination
F00:0112       	;# call strcpy
F00:0113       	strcpy:
F00:0114       		push af
               S01:00000868:  F5
F00:0115       		push hl
               S01:00000869:  E5
F00:0116       		push de
               S01:0000086A:  D5
F00:0117       	_1$:
F00:0118       		ld a,(hl)
               S01:0000086B:  7E
F00:0119       		ld (de),a ;# copy the potential zero before we test because we will need it
               S01:0000086C:  12
F00:0120       		cp 0
               S01:0000086D:  FE 00
F00:0121       		jp z, _strcpyexit$1
               S01:0000086F:  CA 77 08
F00:0122       
F00:0123       		inc de
               S01:00000872:  13
F00:0124       		inc hl
               S01:00000873:  23
F00:0125       		jp _1$
               S01:00000874:  C3 6B 08
F00:0126       	
F00:0127       	_strcpyexit$1:
F00:0128       		pop de
               S01:00000877:  D1
F00:0129       		pop hl
               S01:00000878:  E1
F00:0130       		pop af
               S01:00000879:  F1
F00:0131       		ret
               S01:0000087A:  C9
F00:0132       		# === touppercase ==#
F00:0133       	;#		ld hl,cmd  - zero terminated string
F00:0134       	;#		call touppercase
F00:0135       	;#		ret
F00:0136       	;# the P flag means the comparison was Positive
F00:0137       	;# the M flags means the comparision was Negative
F00:0138       	;# the Z flag means the comparison was equal
F00:0139       	;# the NZ flag means the comparison was not equal.
F00:0140       	;# where:
F00:0141       	;#    A = x  P Positive
F00:0142       	;#			 Z Zero
F00:0143       	;#
F00:0144       	;#    A < x	 M Negative
F00:0145       	;#			 NZ Not zero
F00:0146       	;#
F00:0147       	;#	  A > x  P Positive
F00:0148       	;#			 NZ Not zero
F00:0149       	;#
F00:0150       	;# so a test for JP P,meansSameOrGreater
F00:0151       
F00:0152       
F00:0153       touppercase:
F00:0154       	push af
               S01:0000087B:  F5
F00:0155       	push hl
               S01:0000087C:  E5
F00:0156       	
F00:0157       goagain:
F00:0158       	ld a,(hl)
               S01:0000087D:  7E
F00:0159       	cp 'a'
               S01:0000087E:  FE 61
F00:0160       	jp p, converttouppercaseletter ;# is same or greater then 'a'
               S01:00000880:  F2 86 08
F00:0161       ;# the instructions commented out are implied
F00:0162       	;#cp 'A'
F00:0163       	;#jp p, nextcharacter ;# is same or greater
F00:0164       	;#cp '0'
F00:0165       	;#jp p, nextcharacter
F00:0166       	;# jp nextcharacter replaces the above 4 lines
F00:0167       	jp nextcharacter
               S01:00000883:  C3 89 08
F00:0168       
F00:0169       converttouppercaseletter:
F00:0170       	sub 32
               S01:00000886:  D6 20
F00:0171       	ld (hl),a
               S01:00000888:  77
F00:0172       nextcharacter:
F00:0173       	inc hl
               S01:00000889:  23
F00:0174       	ld a,(hl)
               S01:0000088A:  7E
F00:0175       	cp 0
               S01:0000088B:  FE 00
F00:0176       	jp nz,goagain	
               S01:0000088D:  C2 7D 08
F00:0177       
F00:0178       	pop hl
               S01:00000890:  E1
F00:0179       	pop af
               S01:00000891:  F1
F00:0180       
F00:0181       	ret
               S01:00000892:  C9
F00:0182       	# === PRINTLN == #
F00:0183       	println: ;// same as print but appends CRLF
F00:0184       	call print
               S01:00000893:  CD A1 08
F00:0185       	push hl
               S01:00000896:  E5
F00:0186       	push af
               S01:00000897:  F5
F00:0187       	ld hl,crlf
               S01:00000898:  21 58 0B
F00:0188       	call print
               S01:0000089B:  CD A1 08
F00:0189       	pop af
               S01:0000089E:  F1
F00:0190       	pop hl
               S01:0000089F:  E1
F00:0191       	ret
               S01:000008A0:  C9
F00:0192       
F00:0193       	# === PRINT === #
F00:0194       	print: ;// expecting a zero terminated string
F00:0195       		push hl
               S01:000008A1:  E5
F00:0196       		push af
               S01:000008A2:  F5
F00:0197       		;# hl can be null so check for that first
F00:0198       		ld a,h
               S01:000008A3:  7C
F00:0199       		cp 0
               S01:000008A4:  FE 00
F00:0200       		jp nz,_$1 ;# hibyte not null, no just print it
               S01:000008A6:  C2 AF 08
F00:0201       		ld a,l
               S01:000008A9:  7D
F00:0202       		cp 0
               S01:000008AA:  FE 00
F00:0203       		jp z,_$2 ;# lobyte is null and hibyte is null so just exit
               S01:000008AC:  CA BA 08
F00:0204       		_$1:
F00:0205       			ld a,(hl)
               S01:000008AF:  7E
F00:0206       			cp 0
               S01:000008B0:  FE 00
F00:0207       			jr z,_$2
               S01:000008B2:  28 06
F00:0208       			out (SERIALPORT),a
               S01:000008B4:  D3 01
F00:0209       			inc hl
               S01:000008B6:  23
F00:0210       			jp _$1
               S01:000008B7:  C3 AF 08
F00:0211       _$2:			
F00:0212       		pop af
               S01:000008BA:  F1
F00:0213       		pop hl
               S01:000008BB:  E1
F00:0214       		ret
               S01:000008BC:  C9
F00:0215       
F00:0216       printhexL:
F00:0217       	push af
               S01:000008BD:  F5
F00:0218       	ld a,h
               S01:000008BE:  7C
F00:0219       	call printhex
               S01:000008BF:  CD C8 08
F00:0220       	ld a,l
               S01:000008C2:  7D
F00:0221       	call printhex
               S01:000008C3:  CD C8 08
F00:0222       	pop af
               S01:000008C6:  F1
F00:0223       	ret
               S01:000008C7:  C9
F00:0224       # === PRINTHEX === #
F00:0225       		;Display 8-bit number in hex.
F00:0226       		; 	ld a,0xaa
F00:0227       	;       call printhex
F00:0228       printhex:
F00:0229       
F00:0230       ; Input: a
F00:0231       
F00:0232         push af
               S01:000008C8:  F5
F00:0233         ;// remove low nibble
F00:0234          rra
               S01:000008C9:  1F
F00:0235          rra
               S01:000008CA:  1F
F00:0236          rra
               S01:000008CB:  1F
F00:0237          rra
               S01:000008CC:  1F
F00:0238          call  _$
               S01:000008CD:  CD D1 08
F00:0239          ;// restore low nibble
F00:0240          pop af
               S01:000008D0:  F1
F00:0241          
F00:0242       _$:
F00:0243       	push af
               S01:000008D1:  F5
F00:0244       	;// remove high nibble
F00:0245          and  0x0F
               S01:000008D2:  E6 0F
F00:0246          add  a,0x90
               S01:000008D4:  C6 90
F00:0247          ;; bcd adjust
F00:0248          daa
               S01:000008D6:  27
F00:0249          adc  a,0x40
               S01:000008D7:  CE 40
F00:0250          daa
               S01:000008D9:  27
F00:0251          out (SERIALPORT),a 
               S01:000008DA:  D3 01
F00:0252          pop af
               S01:000008DC:  F1
F00:0253          ret
               S01:000008DD:  C9
F00:0254       
F00:0255       # === putc ===== #
F00:0256       ;# ld a,'*'
F00:0257       ;# call putc
F00:0258       ;# no return value
F00:0259       putc:
F00:0260       		out (SERIALPORT),a
               S01:000008DE:  D3 01
F00:0261       		ret
               S01:000008E0:  C9
F00:0262       
F00:0263       		;// end subroutines
F00:0264       # === loadFILE === #
F00:0265       ; ld hl, filename (zero terminated)
F00:0266       ; ld de, memory address to load file into
F00:0267       ; call loadFILE
F00:0268       ; returns 
F00:0269       ;	HL
F00:0270       ;		baseaddress of the dll
F00:0271       ;	A register 
F00:0272       ;			2 = failed to open the file
F00:0273       ;			0 = if file loaded into memory
F00:0274       ;	DE register pair
F00:0275       ;			count of bytes loaded
F00:0276       loadFILE:
F00:0277       	push af
               S01:000008E1:  F5
F00:0278       	push de ; save de for later
               S01:000008E2:  D5
F00:0279       	call sizereset
               S01:000008E3:  CD AD 09
F00:0280       	ld a,0 ;# erase the executable header information
               S01:000008E6:  3E 00
F00:0281       	ld (startaddress),a
               S01:000008E8:  32 DA 09
F00:0282       	ld (startaddress+1),a
               S01:000008EB:  32 DB 09
F00:0283       	ld (startaddress+2),a
               S01:000008EE:  32 DC 09
F00:0284       	ld (startaddress+3),a
               S01:000008F1:  32 DD 09
F00:0285       		; try to open the SD card and read some data
F00:0286       		ld a,FILENAMECLEAR ; // filenameclear
               S01:000008F4:  3E 01
F00:0287       		out (SDCARD),a
               S01:000008F6:  D3 05
F00:0288       
F00:0289       
F00:0290       ;
F00:0291       _$getnextchar:
F00:0292       		ld a,(hl)
               S01:000008F8:  7E
F00:0293       		cp 0
               S01:000008F9:  FE 00
F00:0294       		jp z, _$openfile #; if filename character is null we have finished
               S01:000008FB:  CA 09 09
F00:0295       		ld a,FILENAMEAPPEND
               S01:000008FE:  3E 04
F00:0296       		out (SDCARD),a ; // filenameappend
               S01:00000900:  D3 05
F00:0297       		ld a,(hl)
               S01:00000902:  7E
F00:0298       		out (SDCARD),a
               S01:00000903:  D3 05
F00:0299       		;#out (SERIALPORT),a
F00:0300       		inc hl
               S01:00000905:  23
F00:0301       		jp _$getnextchar
               S01:00000906:  C3 F8 08
F00:0302       
F00:0303       _$openfile:
F00:0304       #openfile will return 1 if the file was opened, 0 if it failed to open
F00:0305       		ld a,OPEN	;// Open
               S01:00000909:  3E 02
F00:0306       		out (SDCARD),a
               S01:0000090B:  D3 05
F00:0307       		in a,(SDCARD)
               S01:0000090D:  DB 05
F00:0308       		pop hl ; get load address - must pop the stack before returning
               S01:0000090F:  E1
F00:0309       		cp 0
               S01:00000910:  FE 00
F00:0310       		jp nz,testloadaddress
               S01:00000912:  C2 1C 09
F00:0311       		pop af ;# a flag not needed now
               S01:00000915:  F1
F00:0312       		call sizeloaded
               S01:00000916:  CD 9E 09
F00:0313       		ld a,2 ;we have an error trying to open the file.
               S01:00000919:  3E 02
F00:0314       		ret
               S01:0000091B:  C9
F00:0315       testloadaddress:
F00:0316       	# if loadaddress (hl) = 0, then the file will have load address information in the 1st 2 bytes
F00:0317       	ld a,0
               S01:0000091C:  3E 00
F00:0318       	cp h
               S01:0000091E:  BC
F00:0319       	jp nz,available ;# h is not zero so it must have an address to load into already
               S01:0000091F:  C2 6A 09
F00:0320       	cp l
               S01:00000922:  BD
F00:0321       	jp nz,available ;# l is not zero so it must have an address to load intop already
               S01:00000923:  C2 6A 09
F00:0322       
F00:0323       	ld hl,startaddress ;# this is the place to store the 2 bytes we need to get at the load address
               S01:00000926:  21 DA 09
F00:0324       	call loadheader
               S01:00000929:  CD 41 09
F00:0325       	cp 1
               S01:0000092C:  FE 01
F00:0326       	jp nz,_4$
               S01:0000092E:  C2 3E 09
F00:0327       
F00:0328       	ld hl,(startaddress)
               S01:00000931:  2A DA 09
F00:0329       	inc hl ;#start address
               S01:00000934:  23
F00:0330       	inc hl
               S01:00000935:  23
F00:0331       	inc hl ;# program size in pages
               S01:00000936:  23
F00:0332       	inc hl ;# stack size in pages
               S01:00000937:  23
F00:0333       	ld (startaddress),hl ;# this is now the dll entry point address, will need this later to initialize the library
               S01:00000938:  22 DA 09
F00:0334       	jp available
               S01:0000093B:  C3 6A 09
F00:0335       _4$:
F00:0336       	ld a,3 ;#new error code
               S01:0000093E:  3E 03
F00:0337       	ret
               S01:00000940:  C9
F00:0338       	#if we reach here then the first 2 bytes have the address information so let read them now
F00:0339       	;# header information
F00:0340       	;# 2bytes program load address
F00:0341       	;# 1byte memory required in pages
F00:0342       	;# 1byte stack required in pages
F00:0343       loadheader:
F00:0344       	ld b,4
               S01:00000941:  06 04
F00:0345       	ld c,0
               S01:00000943:  0E 00
F00:0346       _2$:
F00:0347       	ld a, AVAILABLE
               S01:00000945:  3E 06
F00:0348       	out (SDCARD),a
               S01:00000947:  D3 05
F00:0349       	in a,(SDCARD) ;# is data available?
               S01:00000949:  DB 05
F00:0350       	cp 0
               S01:0000094B:  FE 00
F00:0351       	jp nz,_1$
               S01:0000094D:  C2 5D 09
F00:0352       	pop af ;#restore af
               S01:00000950:  F1
F00:0353       	ld hl,0
               S01:00000951:  21 00 00
F00:0354       		call println
               S01:00000954:  CD 93 08
F00:0355       		call sizeloaded
               S01:00000957:  CD 9E 09
F00:0356       		ld a,0 ;# use 0 in A to indicate a fail
               S01:0000095A:  3E 00
F00:0357       		ret ;#- exit loadheader because the file read had a problem
               S01:0000095C:  C9
F00:0358       _1$:
F00:0359       		;// if we get here then there is data to read
F00:0360       		ld a,READNEXTBYTE
               S01:0000095D:  3E 05
F00:0361       		out (SDCARD),a ;// read nextbyte
               S01:0000095F:  D3 05
F00:0362       		in a,(SDCARD)
               S01:00000961:  DB 05
F00:0363       		ld (hl),a ; // store byte in RAM (OSLOAD)
               S01:00000963:  77
F00:0364       		inc hl 
               S01:00000964:  23
F00:0365       		djnz _2$
               S01:00000965:  10 DE
F00:0366       		ld a,1 ;# use 1 in A to indicate a success
               S01:00000967:  3E 01
F00:0367       		ret ;# exit loadheader because we have loaded 2 bytes
               S01:00000969:  C9
F00:0368       available:
F00:0369       	#available will return 1 if there is data to read, 0 if no data to read
F00:0370       		ld a, AVAILABLE ; // available
               S01:0000096A:  3E 06
F00:0371       		out (SDCARD),a
               S01:0000096C:  D3 05
F00:0372       		in a,(SDCARD) ;// read the value from the device
               S01:0000096E:  DB 05
F00:0373       	;	ld b,a ; // going to malipulate the a register so save it as not to destroy the A result
F00:0374       	;	add a,'0' ;// make it printable
F00:0375       	;	out (SERIALPORT),a ;// print response
F00:0376       	;	ld a,b
F00:0377       		cp 0 ;// compare the A reg returned by the device
               S01:00000970:  FE 00
F00:0378       		jp nz,_$nextbyte
               S01:00000972:  C2 8D 09
F00:0379       		pop af ;# restore the af registers because it will tell me if I need to zero terminate the loaded file
               S01:00000975:  F1
F00:0380       		cp 1
               S01:00000976:  FE 01
F00:0381       		jp nz,_1$
               S01:00000978:  C2 7E 09
F00:0382       		;# the hl register pair contains the last address we need to write a zero here because the user wants it
F00:0383       		ld a,0
               S01:0000097B:  3E 00
F00:0384       		ld (hl),a ;# zero terminated
               S01:0000097D:  77
F00:0385       
F00:0386       _1$:
F00:0387       		ld hl,0
               S01:0000097E:  21 00 00
F00:0388       		call println
               S01:00000981:  CD 93 08
F00:0389       		call sizeloaded
               S01:00000984:  CD 9E 09
F00:0390       		ld hl,(startaddress) ;# return the startaddress
               S01:00000987:  2A DA 09
F00:0391       		ld a,0
               S01:0000098A:  3E 00
F00:0392       		ret
               S01:0000098C:  C9
F00:0393       _$nextbyte:
F00:0394       		;// if we get here then there is data to read
F00:0395       		ld a,READNEXTBYTE
               S01:0000098D:  3E 05
F00:0396       		out (SDCARD),a ;// read nextbyte
               S01:0000098F:  D3 05
F00:0397       		in a,(SDCARD)
               S01:00000991:  DB 05
F00:0398       		ld (hl),a ; // store byte in RAM (OSLOAD)
               S01:00000993:  77
F00:0399       		inc hl 
               S01:00000994:  23
F00:0400       		ld a,'#'
               S01:00000995:  3E 23
F00:0401       		out (SERIALPORT),a ;// just echo it back for now
               S01:00000997:  D3 01
F00:0402       		call sizeincrement
               S01:00000999:  CD C0 09
F00:0403       		jr available ;
               S01:0000099C:  18 CC
F00:0404       
F00:0405       sizeloaded:
F00:0406       	push ix
               S01:0000099E:  DD E5
F00:0407       	ld ix,losize
               S01:000009A0:  DD 21 D8 09
F00:0408       	ld e,(ix)
               S01:000009A4:  DD 5E 00
F00:0409       	ld d,(ix+1)
               S01:000009A7:  DD 56 01
F00:0410       	pop ix
               S01:000009AA:  DD E1
F00:0411       	ret
               S01:000009AC:  C9
F00:0412       sizereset:
F00:0413       	push ix
               S01:000009AD:  DD E5
F00:0414       	push af
               S01:000009AF:  F5
F00:0415       	ld a,0
               S01:000009B0:  3E 00
F00:0416       	ld ix,losize
               S01:000009B2:  DD 21 D8 09
F00:0417       	ld (ix),a
               S01:000009B6:  DD 77 00
F00:0418       	ld (ix+1),a
               S01:000009B9:  DD 77 01
F00:0419       	pop af
               S01:000009BC:  F1
F00:0420       	pop ix
               S01:000009BD:  DD E1
F00:0421       	ret
               S01:000009BF:  C9
F00:0422       sizeincrement:
F00:0423       	push ix
               S01:000009C0:  DD E5
F00:0424       	push hl
               S01:000009C2:  E5
F00:0425       
F00:0426       	ld ix,losize
               S01:000009C3:  DD 21 D8 09
F00:0427       	ld l,(ix)
               S01:000009C7:  DD 6E 00
F00:0428       	ld h,(ix+1)
               S01:000009CA:  DD 66 01
F00:0429       	inc HL
               S01:000009CD:  23
F00:0430       	ld (ix),l
               S01:000009CE:  DD 75 00
F00:0431       	ld (ix+1),h
               S01:000009D1:  DD 74 01
F00:0432       
F00:0433       	pop hl
               S01:000009D4:  E1
F00:0434       	pop ix
               S01:000009D5:  DD E1
F00:0435       	ret
               S01:000009D7:  C9
F00:0436       
F00:0437       losize: .byte 0
               S01:000009D8:  00
F00:0438       hisize: .byte 0
               S01:000009D9:  00
F00:0439       
F00:0440       ;# executable header information
F00:0441       startaddress: .2byte 0
               S01:000009DA:  00 00
F00:0442       memorypages: .byte 0
               S01:000009DC:  00
F00:0443       stackpages: .byte 0
               S01:000009DD:  00
F00:0444       ;# ====== hextobyte ==========
F00:0445       ;#    load HL registers with the 2 ascii characters of a hexadecimal value
F00:0446       ;# note routine does not validate the inputs.
F00:0447       ;# alphabeta expected in uppercase
F00:0448       ;#	ld h,'c'
F00:0449       ;#	ld l,'3'
F00:0450       ;#	call hextobyte
F00:0451       ;#	value stored in A register
F00:0452       
F00:0453       
F00:0454       hextobyte:
F00:0455       	push hl
               S01:000009DE:  E5
F00:0456       	push bc
               S01:000009DF:  C5
F00:0457       	ld a,l ;# prepare the low nibble
               S01:000009E0:  7D
F00:0458       	call workhextobyte
               S01:000009E1:  CD F1 09
F00:0459       	ld b,a ;# save it later
               S01:000009E4:  47
F00:0460       	ld a,h ;# prepare the high nibble
               S01:000009E5:  7C
F00:0461       	call workhextobyte
               S01:000009E6:  CD F1 09
F00:0462       	rla ;# a contains the result from the high nibble
               S01:000009E9:  17
F00:0463       	rla ;# so move the nibble to make room for the low nibble
               S01:000009EA:  17
F00:0464       	rla
               S01:000009EB:  17
F00:0465       	rla
               S01:000009EC:  17
F00:0466       	or b ;# add the low nibble
               S01:000009ED:  B0
F00:0467       
F00:0468       	pop bc
               S01:000009EE:  C1
F00:0469       	pop hl
               S01:000009EF:  E1
F00:0470       	ret
               S01:000009F0:  C9
F00:0471       workhextobyte:
F00:0472       	cp 'A' ;# alphabeta sub 55
               S01:000009F1:  FE 41
F00:0473       	jp m,hextobytenumber
               S01:000009F3:  FA F9 09
F00:0474       	sub 55
               S01:000009F6:  D6 37
F00:0475       	ret
               S01:000009F8:  C9
F00:0476       hextobytenumber:
F00:0477       	sub 48 ;# if number sub 48
               S01:000009F9:  D6 30
F00:0478       	ret
               S01:000009FB:  C9
F00:0479       
F00:0480       	;# === directory open === #
F00:0481       
F00:0482       directoryopen:
F00:0483       	push af
               S01:000009FC:  F5
F00:0484       	ld a,OPENDIRECTORY
               S01:000009FD:  3E 31
F00:0485       	out (SDCARD),a
               S01:000009FF:  D3 05
F00:0486       	pop af
               S01:00000A01:  F1
F00:0487       	ret
               S01:00000A02:  C9
F00:0488       	;# === nextfile === #
F00:0489       nextfile:
F00:0490       	push af
               S01:00000A03:  F5
F00:0491       	ld a,NEXTFILE
               S01:00000A04:  3E 32
F00:0492       	out (SDCARD),a
               S01:00000A06:  D3 05
F00:0493       	pop af
               S01:00000A08:  F1
F00:0494       	ret
               S01:00000A09:  C9
F00:0495       	;# === getfilename or currently open file ===#
F00:0496       	;# ld hl,storagelocation - for the filename
F00:0497       	;# call getfilename
F00:0498       
F00:0499       getfilename:
F00:0500       	push af
               S01:00000A0A:  F5
F00:0501       	push hl
               S01:00000A0B:  E5
F00:0502       	ld a,GETNAME
               S01:00000A0C:  3E 20
F00:0503       	out (SDCARD),a
               S01:00000A0E:  D3 05
F00:0504       
F00:0505       _getfilename$1:
F00:0506       	ld a,NAMEAVAILABLE
               S01:00000A10:  3E 21
F00:0507       	out (SDCARD),a
               S01:00000A12:  D3 05
F00:0508       	in a,(SDCARD)
               S01:00000A14:  DB 05
F00:0509       	cp 0
               S01:00000A16:  FE 00
F00:0510       	jp z, _exitgetfilename
               S01:00000A18:  CA 20 0A
F00:0511       
F00:0512       	ld (hl),a
               S01:00000A1B:  77
F00:0513       	inc hl
               S01:00000A1C:  23
F00:0514       	
F00:0515       	jp _getfilename$1
               S01:00000A1D:  C3 10 0A
F00:0516       
F00:0517       _exitgetfilename:
F00:0518       	ld a,0
               S01:00000A20:  3E 00
F00:0519       	ld (hl),a
               S01:00000A22:  77
F00:0520       	pop hl
               S01:00000A23:  E1
F00:0521       	pop af
               S01:00000A24:  F1
F00:0522       	ret
               S01:00000A25:  C9
F00:0523       
F00:0524       	# === createProcess == #
F00:0525       	;# stack - note the example below is using the registers as an example, it really don't matter
F00:0526       	;# which register pair put that data on the stack
F00:0527       	;# push hl,program - zero terminated
F00:0528       	;# push de,commandline - zero terminated
F00:0529       	;# call createProcess
F00:0530       	;# that should do for now
F00:0531       	createProcess: ;# this is messy need to have another go at this
F00:0532       		ld a,0
               S01:00000A26:  3E 00
F00:0533       		call printhex
               S01:00000A28:  CD C8 08
F00:0534       
F00:0535       		pop hl ;# get the return address
               S01:00000A2B:  E1
F00:0536       		exx ;# exchange with other registers
               S01:00000A2C:  D9
F00:0537       
F00:0538       		ld de,userMemory-50 ;# whooa
               S01:00000A2D:  11 CE 1F
F00:0539       		;# copy the command params
F00:0540       		pop hl ;# get the command params
               S01:00000A30:  E1
F00:0541       		ld a,1
               S01:00000A31:  3E 01
F00:0542       		call printhex
               S01:00000A33:  CD C8 08
F00:0543       
F00:0544       		call strcpy
               S01:00000A36:  CD 68 08
F00:0545       		ld a,2
               S01:00000A39:  3E 02
F00:0546       		call printhex
               S01:00000A3B:  CD C8 08
F00:0547       		push hl
               S01:00000A3E:  E5
F00:0548       		ld hl,thecommandlinemsg
               S01:00000A3F:  21 9E 0A
F00:0549       		call println
               S01:00000A42:  CD 93 08
F00:0550       		pop hl
               S01:00000A45:  E1
F00:0551       		call println ;# print command params
               S01:00000A46:  CD 93 08
F00:0552       
F00:0553       		ld a,3
               S01:00000A49:  3E 03
F00:0554       		call printhex
               S01:00000A4B:  CD C8 08
F00:0555       
F00:0556       		pop hl ;# get the program
               S01:00000A4E:  E1
F00:0557       		push HL
               S01:00000A4F:  E5
F00:0558       		ld hl,theprocessmsg
               S01:00000A50:  21 95 0A
F00:0559       		call println
               S01:00000A53:  CD 93 08
F00:0560       		pop hl
               S01:00000A56:  E1
F00:0561       		call println ;# print program name
               S01:00000A57:  CD 93 08
F00:0562       #		ld de,userMemory
F00:0563       		ld a,0
               S01:00000A5A:  3E 00
F00:0564       		ld d,a ;# use dynamic load address if possible
               S01:00000A5C:  57
F00:0565       		ld e,a
               S01:00000A5D:  5F
F00:0566       		ld a,4
               S01:00000A5E:  3E 04
F00:0567       		call printhex
               S01:00000A60:  CD C8 08
F00:0568       
F00:0569       		call loadFILE
               S01:00000A63:  CD E1 08
F00:0570       		cp 0
               S01:00000A66:  FE 00
F00:0571       		jp nz, _createProcesserr$1
               S01:00000A68:  C2 90 0A
F00:0572       		ld (_progloadaddr),hl ;# save the address the program was loaded into. if null is means use the default userMemory
               S01:00000A6B:  22 8E 0A
F00:0573       		
F00:0574       		exx ;# restore the other original registers
               S01:00000A6E:  D9
F00:0575       		push hl ; # restore the return address
               S01:00000A6F:  E5
F00:0576       		# test if we need to use the default address or the program/library supplied address
F00:0577       		# we can do that by checking if the hl pair is null, null = use fault, not null = custom address
F00:0578       		ld hl,(_progloadaddr)
               S01:00000A70:  2A 8E 0A
F00:0579       		ld a,h
               S01:00000A73:  7C
F00:0580       		cp 0
               S01:00000A74:  FE 00
F00:0581       		jp nz, _4$
               S01:00000A76:  C2 86 0A
F00:0582       		ld a,l
               S01:00000A79:  7D
F00:0583       		cp 0
               S01:00000A7A:  FE 00
F00:0584       		jp nz,_4$
               S01:00000A7C:  C2 86 0A
F00:0585       		# hl was null so call the default address
F00:0586       		call printhexL
               S01:00000A7F:  CD BD 08
F00:0587       		call userMemory
               S01:00000A82:  CD 00 20
F00:0588       		ret
               S01:00000A85:  C9
F00:0589       _4$:
F00:0590       	call printhexL
               S01:00000A86:  CD BD 08
F00:0591       	call progloadaddress
               S01:00000A89:  CD 8D 0A
F00:0592       	ret
               S01:00000A8C:  C9
F00:0593       progloadaddress: .byte 0xc3
               S01:00000A8D:  C3
F00:0594       	_progloadaddr: .2byte 0
               S01:00000A8E:  00 00
F00:0595       
F00:0596       _createProcesserr$1:
F00:0597       		push af
               S01:00000A90:  F5
F00:0598       		exx ;# restore the other original registers
               S01:00000A91:  D9
F00:0599       		pop af
               S01:00000A92:  F1
F00:0600       		push hl ; # restore the return address
               S01:00000A93:  E5
F00:0601       		ret
               S01:00000A94:  C9
F00:0602       
F00:0603       theprocessmsg: .string "process:"
               S01:00000A95:  70 72 6F 63 65 73 73 3A
F00:0604       thecommandlinemsg: .string "params:"
               S01:00000A9E:  70 61 72 61 6D 73 3A
F00:0605       
F00:0606       	# === getcomandline == #
F00:0607       	;# ld hl,buffer - address of where to copy the data
F00:0608       	;# call getcommandline
F00:0609       	;# returns zero termined string at buffer 
F00:0610       getcommandparams:
F00:0611       	push de
               S01:00000AA6:  D5
F00:0612       	push hl
               S01:00000AA7:  E5
F00:0613       	push hl ;# save hl to move into de
               S01:00000AA8:  E5
F00:0614       	pop de ;# load hl into de
               S01:00000AA9:  D1
F00:0615       	ld hl,userMemory-50
               S01:00000AAA:  21 CE 1F
F00:0616       	call strcpy
               S01:00000AAD:  CD 68 08
F00:0617       	pop hl
               S01:00000AB0:  E1
F00:0618       	pop de
               S01:00000AB1:  D1
F00:0619       	ret
               S01:00000AB2:  C9
F00:0620       
F00:0621       ;================================
F00:0622       ; # === loadaddress == #
F00:0623       ; ld a,x - where x = instruction id
F00:0624       ;				id = 1, print
F00:0625       ;					 2, printhex
F00:0626       ;					3,loadFILE
F00:0627       loadaddress:
F00:0628       	cp PRINT
               S01:00000AB3:  FE 01
F00:0629       	jp nz,_loadaddress$2
               S01:00000AB5:  C2 BC 0A
F00:0630       	ld hl,print
               S01:00000AB8:  21 A1 08
F00:0631       	ret
               S01:00000ABB:  C9
F00:0632       _loadaddress$2:
F00:0633       	cp PRINTHEX
               S01:00000ABC:  FE 02
F00:0634       	jp nz,_loadaddress$3
               S01:00000ABE:  C2 C5 0A
F00:0635       	ld hl,printhex
               S01:00000AC1:  21 C8 08
F00:0636       	ret
               S01:00000AC4:  C9
F00:0637       _loadaddress$3:
F00:0638       	cp LOADFILE
               S01:00000AC5:  FE 03
F00:0639       	jp nz,_loadaddress$4
               S01:00000AC7:  C2 CE 0A
F00:0640       	ld hl,loadFILE
               S01:00000ACA:  21 E1 08
F00:0641       	ret
               S01:00000ACD:  C9
F00:0642       _loadaddress$4:
F00:0643       	cp MEMSET
               S01:00000ACE:  FE 04
F00:0644       	jp nz,_loadaddress$5
               S01:00000AD0:  C2 D7 0A
F00:0645       	ld hl,memset
               S01:00000AD3:  21 4A 08
F00:0646       	ret
               S01:00000AD6:  C9
F00:0647       _loadaddress$5:
F00:0648       	cp STRLEN
               S01:00000AD7:  FE 05
F00:0649       	jp nz,_loadaddress$6
               S01:00000AD9:  C2 E0 0A
F00:0650       	ld hl,strlen
               S01:00000ADC:  21 53 08
F00:0651       	ret
               S01:00000ADF:  C9
F00:0652       _loadaddress$6:
F00:0653       	cp PUTC
               S01:00000AE0:  FE 06
F00:0654       	jp nz,_loadaddress$7
               S01:00000AE2:  C2 E9 0A
F00:0655       	ld hl,putc
               S01:00000AE5:  21 DE 08
F00:0656       	ret
               S01:00000AE8:  C9
F00:0657       _loadaddress$7:
F00:0658       	cp TOUPPERCASE
               S01:00000AE9:  FE 07
F00:0659       	jp nz,_loadaddress$8
               S01:00000AEB:  C2 F2 0A
F00:0660       	ld hl,touppercase
               S01:00000AEE:  21 7B 08
F00:0661       	ret
               S01:00000AF1:  C9
F00:0662       _loadaddress$8:
F00:0663       	cp HEXTOBYTE
               S01:00000AF2:  FE 08
F00:0664       	jp nz,_loadaddress$9
               S01:00000AF4:  C2 FB 0A
F00:0665       	ld hl,hextobyte
               S01:00000AF7:  21 DE 09
F00:0666       	ret
               S01:00000AFA:  C9
F00:0667       _loadaddress$9:
F00:0668       	cp PRINTLN
               S01:00000AFB:  FE 09
F00:0669       	jp nz,_loadaddress$10
               S01:00000AFD:  C2 04 0B
F00:0670       	ld hl,println
               S01:00000B00:  21 93 08
F00:0671       	ret
               S01:00000B03:  C9
F00:0672       _loadaddress$10:
F00:0673       	cp STRNCPY
               S01:00000B04:  FE 0A
F00:0674       	jp nz,_loadaddress$11
               S01:00000B06:  C2 0D 0B
F00:0675       	ld hl,strncpy
               S01:00000B09:  21 65 08
F00:0676       	ret
               S01:00000B0C:  C9
F00:0677       _loadaddress$11:
F00:0678       	cp DIRECTORYOPEN
               S01:00000B0D:  FE 0D
F00:0679       	jp nz,_loadaddress$12
               S01:00000B0F:  C2 16 0B
F00:0680       	ld hl,directoryopen
               S01:00000B12:  21 FC 09
F00:0681       	ret
               S01:00000B15:  C9
F00:0682       _loadaddress$12:
F00:0683       	cp GETFILENAME:
               S01:00000B16:  FE 0F
F00:0684       	jp nz,_loadaddress$13
               S01:00000B18:  C2 1F 0B
F00:0685       	ld hl,getfilename
               S01:00000B1B:  21 0A 0A
F00:0686       	ret
               S01:00000B1E:  C9
F00:0687       _loadaddress$13:
F00:0688       	cp NEXTFILE
               S01:00000B1F:  FE 32
F00:0689       	jp nz,_loadaddress$14
               S01:00000B21:  C2 28 0B
F00:0690       	ld hl,nextfile
               S01:00000B24:  21 03 0A
F00:0691       	ret
               S01:00000B27:  C9
F00:0692       _loadaddress$14:
F00:0693       	cp CREATEPROCESS
               S01:00000B28:  FE 10
F00:0694       	jp nz,_loadaddress$15
               S01:00000B2A:  C2 31 0B
F00:0695       	ld hl,createProcess
               S01:00000B2D:  21 26 0A
F00:0696       	ret
               S01:00000B30:  C9
F00:0697       _loadaddress$15:
F00:0698       	cp GETCOMMANDPARAMS
               S01:00000B31:  FE 11
F00:0699       	jp nz,_loadaddress$16
               S01:00000B33:  C2 3A 0B
F00:0700       	ld hl,getcommandparams
               S01:00000B36:  21 A6 0A
F00:0701       	ret
               S01:00000B39:  C9
F00:0702       _loadaddress$16:
F00:0703       	#----- not defined ---
F00:0704       	ld hl,addressfailedmsg
               S01:00000B3A:  21 91 0B
F00:0705       	call print 
               S01:00000B3D:  CD A1 08
F00:0706       	call printhex
               S01:00000B40:  CD C8 08
F00:0707       
F00:0708       	ld hl,0
               S01:00000B43:  21 00 00
F00:0709       	ret
               S01:00000B46:  C9
F00:0710       	# ======================== end subroutines ========== #
F00:0711       	
F00:0712       	nullroutine: 
F00:0713       		ei
               S01:00000B47:  FB
F00:0714       		reti
               S01:00000B48:  ED 4D
F00:0715       
F00:0716       	serialport: ;#/* interrupt 2, echo what was sent*/
F00:0717       	#	di
F00:0718       		#ld a,'*'
F00:0719       		#out (SERIALPORT),a
F00:0720       
F00:0721       		in a,(SERIALPORT)
               S01:00000B4A:  DB 01
F00:0722       		cp 0
               S01:00000B4C:  FE 00
F00:0723       		jp nz,_1$
               S01:00000B4E:  C2 53 0B
F00:0724       		ld a,'`'
               S01:00000B51:  3E 60
F00:0725       _1$:
F00:0726       		out (SERIALPORT),a
               S01:00000B53:  D3 01
F00:0727       		ei
               S01:00000B55:  FB
F00:0728       		reti
               S01:00000B56:  ED 4D
F00:0729       	crlf: .string "\r\n"
               S01:00000B58:  0D 0A
F00:0730       	loadedmsg: .string "JOSHUA\r\n"
               S01:00000B5B:  4A 4F 53 48 55 41 0D 0A
F00:0731       	readymsg: .string "\r\nReady v0.0\r\n"
               S01:00000B64:  0D 0A 52 65 61 64 79 20 76 30 2E 30 0D 0A
F00:0732       	commandprocessor: .string "cmd"
               S01:00000B73:  63 6D 64
F00:0733       	errorloadingmsg: .string "error loading program.\r\n\"
               S01:00000B77:  65 72 72 6F 72 20 6C 6F 61 64 69 6E 67 20 70 72
               S01:00000B87:  6F 67 72 61 6D 2E 0D 0A 22
F00:0734       	addressfailedmsg: .string "GetAddress failed for code:"
               S01:00000B91:  47 65 74 41 64 64 72 65 73 73 20 66 61 69 6C 65
               S01:00000BA1:  64 20 66 6F 72 20 63 6F 64 65 3A
F00:0735       
F00:0736       
F00:0737       	; I could set the org address but I'm going to let that move as needed	.org 0x????
F00:0738       	;#.org 0x0A00-start
F00:0739       	.align 8
F00:0740       	jumptable:
F00:0741       	.2byte nullroutine ;0
               S01:00000C00:  47 0B
F00:0742       	.2byte serialport ;2
               S01:00000C02:  4A 0B
F00:0743       	.2byte serialport ;4
               S01:00000C04:  4A 0B
F00:0744       	.2byte serialport ;6
               S01:00000C06:  4A 0B
F00:0745       
F00:0746       	ENDOFLINE:
F00:0747       	.if (ENDOFLINE > 0x0fff)
F00:0748       		.abort "PROGRAM TOO LARGE TO FIT BELOW <0x1000"
F00:0749       	.endif
F00:0750       	


Sections:
S01  seg800


Sources:
F00  RAM.s
F01  SDCARD.inc
F02  Routines.inc
F03  SERIAL.inc
F04  SDCARD.inc


Symbols:
ENDOFLINE EXPR(3080=0xc08) ABS 
 serialport _1$ EXPR(2899=0xb53) ABS 
serialport EXPR(2890=0xb4a) ABS 
nullroutine EXPR(2887=0xb47) ABS 
addressfailedmsg EXPR(2961=0xb91) ABS 
_loadaddress$16 EXPR(2874=0xb3a) ABS 
_loadaddress$15 EXPR(2865=0xb31) ABS 
_loadaddress$14 EXPR(2856=0xb28) ABS 
_loadaddress$13 EXPR(2847=0xb1f) ABS 
_loadaddress$12 EXPR(2838=0xb16) ABS 
_loadaddress$11 EXPR(2829=0xb0d) ABS 
_loadaddress$10 EXPR(2820=0xb04) ABS 
_loadaddress$9 EXPR(2811=0xafb) ABS 
_loadaddress$8 EXPR(2802=0xaf2) ABS 
_loadaddress$7 EXPR(2793=0xae9) ABS 
_loadaddress$6 EXPR(2784=0xae0) ABS 
_loadaddress$5 EXPR(2775=0xad7) ABS 
_loadaddress$4 EXPR(2766=0xace) ABS 
_loadaddress$3 EXPR(2757=0xac5) ABS 
_loadaddress$2 EXPR(2748=0xabc) ABS 
getcommandparams EXPR(2726=0xaa6) ABS 
progloadaddress EXPR(2701=0xa8d) ABS 
 createProcess _4$ EXPR(2694=0xa86) ABS 
_progloadaddr EXPR(2702=0xa8e) ABS 
_createProcesserr$1 EXPR(2704=0xa90) ABS 
theprocessmsg EXPR(2709=0xa95) ABS 
thecommandlinemsg EXPR(2718=0xa9e) ABS 
createProcess EXPR(2598=0xa26) ABS 
_exitgetfilename EXPR(2592=0xa20) ABS 
_getfilename$1 EXPR(2576=0xa10) ABS 
getfilename EXPR(2570=0xa0a) ABS 
nextfile EXPR(2563=0xa03) ABS 
directoryopen EXPR(2556=0x9fc) ABS 
hextobytenumber EXPR(2553=0x9f9) ABS 
workhextobyte EXPR(2545=0x9f1) ABS 
hextobyte EXPR(2526=0x9de) ABS 
stackpages EXPR(2525=0x9dd) UNUSED ABS 
memorypages EXPR(2524=0x9dc) UNUSED ABS 
hisize EXPR(2521=0x9d9) UNUSED ABS 
losize EXPR(2520=0x9d8) ABS 
sizeincrement EXPR(2496=0x9c0) ABS 
 available _1$ EXPR(2430=0x97e) ABS 
_$nextbyte EXPR(2445=0x98d) ABS 
 loadheader _1$ EXPR(2397=0x95d) ABS 
 loadheader _2$ EXPR(2373=0x945) ABS 
 testloadaddress _4$ EXPR(2366=0x93e) ABS 
loadheader EXPR(2369=0x941) ABS 
available EXPR(2410=0x96a) ABS 
sizeloaded EXPR(2462=0x99e) ABS 
testloadaddress EXPR(2332=0x91c) ABS 
_$openfile EXPR(2313=0x909) ABS 
_$getnextchar EXPR(2296=0x8f8) ABS 
startaddress EXPR(2522=0x9da) ABS 
sizereset EXPR(2477=0x9ad) ABS 
putc EXPR(2270=0x8de) ABS 
_$ EXPR(2257=0x8d1) ABS 
printhexL EXPR(2237=0x8bd) ABS 
_$2 EXPR(2234=0x8ba) ABS 
_$1 EXPR(2223=0x8af) ABS 
crlf EXPR(2904=0xb58) ABS 
nextcharacter EXPR(2185=0x889) ABS 
converttouppercaseletter EXPR(2182=0x886) ABS 
goagain EXPR(2173=0x87d) ABS 
touppercase EXPR(2171=0x87b) ABS 
_strcpyexit$1 EXPR(2167=0x877) ABS 
 strcpy _1$ EXPR(2155=0x86b) ABS 
strcpy EXPR(2152=0x868) ABS 
strncpy EXPR(2149=0x865) ABS 
strlenexit EXPR(2146=0x862) ABS 
_strlen$ EXPR(2135=0x857) ABS 
strlen EXPR(2131=0x853) ABS 
_metset$1 EXPR(2124=0x84c) ABS 
memset EXPR(2122=0x84a) ABS 
errorloadingmsg EXPR(2935=0xb77) ABS 
printhex EXPR(2248=0x8c8) ABS 
commandline EXPR(2119=0x847) ABS 
println EXPR(2195=0x893) ABS 
_cmdlne EXPR(2120=0x848) ABS 
errorloading EXPR(2107=0x83b) ABS 
loadFILE EXPR(2273=0x8e1) ABS 
commandprocessor EXPR(2931=0xb73) ABS 
commandprocessloop EXPR(2078=0x81e) ABS 
loadedmsg EXPR(2907=0xb5b) ABS 
jumptable EXPR(3072=0xc00) ABS 
print EXPR(2209=0x8a1) ABS 
readymsg EXPR(2916=0xb64) ABS 
loadaddress EXPR(2739=0xab3) ABS 
start EXPR(2052=0x804) UNUSED ABS 
boot EXPR(2055=0x807) ABS 
NEXTNUMBER EXPR(18=0x12) UNUSED 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
STRNCPY EXPR(10=0xa) 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) UNUSED 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(8192=0x2000) 
commandMemory EXPR(4096=0x1000) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) 
NAMEAVAILABLE EXPR(33=0x21) 
GETNAME EXPR(32=0x20) 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) 
READNEXTBYTE EXPR(5=0x5) 
FILENAMEAPPEND EXPR(4=0x4) 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) 
FILENAMECLEAR EXPR(1=0x1) 
SDCARD EXPR(5=0x5) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
