F00:0001       
F00:0002       
F00:0003       
F00:0004       #define LOWORD(l) ((WORD)(l))
F00:0005       #define HIWORD(l) ((WORD)(((DWORD)(l) >> 16) & 0xFFFF))
F00:0006       #define LOBYTE(w) ((BYTE)(w))
F00:0007       #define HIBYTE(w) ((BYTE)(((WORD)(w) >> 8) & 0xFF))
F00:0008       # process table - maximum number of entries - which also means the maximum number of processes
F00:0009       .set MAXPROCESSES,4
F00:0010       .set PROCINFOSIZE,6
F00:0011       
F00:0012       .include "SDCARD.inc"
F01:0001       .equ SDCARD,0x05
F01:0002       ; ******* SDCARD *********
F01:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F01:0004       .equ FILENAMECLEAR ,1
F01:0005       
F01:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F01:0007       .equ OPEN ,2
F01:0008       
F01:0009       ; z80 out - close: no return value
F01:0010       .equ CLOSE ,3
F01:0011       
F01:0012       ; z80 out + out - filenameappend: no return value
F01:0013       .equ FILENAMEAPPEND ,4
F01:0014       
F01:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F01:0016       .equ READNEXTBYTE ,5
F01:0017       
F01:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F01:0019       .equ AVAILABLE ,6
F01:0020       
F01:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F01:0022       .equ OPENWRITE,7
F01:0023       
F01:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F01:0025       .equ WRITEBYTE,8
F01:0026       
F01:0027       ;#===============================
F01:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F01:0029       .equ GETNAME,0x20
F01:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F01:0031       .equ NAMEAVAILABLE,0x21
F01:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F01:0033       .equ OPENDIRECTORY,0x31
F01:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F01:0035       .equ NEXTFILE,0x32
F00:0013       .include "Routines.inc"
F02:0001       
F02:0002       .macro DEBUG CHARACTER='!'
F02:0009       
F02:0010       
F02:0011       .macro DEBUGHEX CHARACTER='!'
F02:0018       
F02:0019       
F02:0020       .macro PRINTLN
F02:0025       
F02:0026       
F02:0027       
F02:0028       # address where user programs load
F02:0029       .include "SERIAL.inc"
F03:0001       .equ SERIALPORT , 0x01
F03:0002       .equ SERIALPORT2, 0x02
F03:0003       
F02:0030       .include "SDCARD.inc"
F04:0001       .equ SDCARD,0x05
F04:0002       ; ******* SDCARD *********
F04:0003       ; z80 out -filenameclear: no return value, will close the previous open file is one already open
F04:0004       .equ FILENAMECLEAR ,1
F04:0005       
F04:0006       ; z80 out + in -open: will return a status 1 if file open successfull, 0 if open failed
F04:0007       .equ OPEN ,2
F04:0008       
F04:0009       ; z80 out - close: no return value
F04:0010       .equ CLOSE ,3
F04:0011       
F04:0012       ; z80 out + out - filenameappend: no return value
F04:0013       .equ FILENAMEAPPEND ,4
F04:0014       
F04:0015       ; z80 out + in - readnextbyte: will return 0xFF is nothing to read, which might be a problem if you don't check the avai
F04:0016       .equ READNEXTBYTE ,5
F04:0017       
F04:0018       ; z80 out + in - available: return 1 is data is available, 0 if no data available
F04:0019       .equ AVAILABLE ,6
F04:0020       
F04:0021       ; z80 out + in - openwrite: open file for write ,will return a status 1 if file open successfull, 0 if open failed
F04:0022       .equ OPENWRITE,7
F04:0023       
F04:0024       ; z80 - out + out -writebyte: will write data to an open file,is no file is open or the file is not writable nothing wil
F04:0025       .equ WRITEBYTE,8
F04:0026       
F04:0027       ;#===============================
F04:0028       ; z80 - out -getname: prepares to get the openfilename, use NAMEAVAILABLE to read the bytes, no return value
F04:0029       .equ GETNAME,0x20
F04:0030       ; z80 out + in - nameavailable: return next character of the filename, or 0 it no more characters
F04:0031       .equ NAMEAVAILABLE,0x21
F04:0032       ;z80 - out - opendirectory : will open the root directory for directory listing, no return value
F04:0033       .equ OPENDIRECTORY,0x31
F04:0034       ;z80 -out - nextfile: move to the next directory entry, no return value
F04:0035       .equ NEXTFILE,0x32
F02:0031       .equ commandMemory, 0x2000
F02:0032       .equ userMemory,0x3000
F02:0033       .equ libMemory,0xF000
F02:0034       
F02:0035       .equ TRUE, 1
F02:0036       .equ FALSE, 0
F02:0037       
F02:0038       # the only fixed address (i hope), use it to get the address of utilities methods
F02:0039       # ld a, PRINT
F02:0040       # call GetAddress
F02:0041       # address for print loaded into hl
F02:0042       # the value in hl can change between os versions so do not hard code the values
F02:0043       
F02:0044       .equ GetAddress, 0x0804
F02:0045       .equ PRINT,		1
F02:0046       .equ PRINTLN,	9
F02:0047       .equ PRINTHEX,	2
F02:0048       .equ PRINTHEXL,21
F02:0049       .equ LOADFILE,	3
F02:0050       .equ MEMSET,	4
F02:0051       .equ STRLEN,	5
F02:0052       .equ STRCPY,24
F02:0053       .equ STRNCPY,10
F02:0054       .equ PUTC,		6
F02:0055       .equ TOUPPERCASE,7
F02:0056       .equ HEXTOBYTE,	8
F02:0057       .equ CREATEPROCESS,16
F02:0058       .equ GETCOMMANDPARAMS,17
F02:0059       # filesystem - primitive functions, probably going to change 
F02:0060       .equ DIRECTORYOPEN,13
F02:0061       .equ DIRECTORYNEXTFILE,14
F02:0062       .equ GETFILENAME,15
F02:0063       .equ GETMALLOCTABLE,18
F02:0064       .equ DIV8,19
F02:0065       .equ SETRESETPAGE,20
F02:0066       .equ STARTPROCESSINFO,22
F02:0067       .equ NEXTPROCESSINFO,23
F02:0068       
F02:0069       
F02:0070       
F02:0071       
F02:0072       .equ NEXTNUMBER,26
F02:0073       
F02:0074       
F00:0014       
F00:0015       
F00:0016       	.org 0x800
F00:0017       	jp boot
               S01:00000800:  C3 07 08
F00:0018       	.align 2
F00:0019       	start:
F00:0020       	jp loadaddress
               S01:00000804:  C3 CB 0B
F00:0021       	
F00:0022       boot:
F00:0023       	ld sp,0xffff
               S01:00000807:  31 FF FF
F00:0024       
F00:0025       	di
               S01:0000080A:  F3
F00:0026       	ld hl,readymsg
               S01:0000080B:  21 BB 0C
F00:0027       	call print
               S01:0000080E:  CD A1 08
F00:0028       		;ld b, endlabel2-label2
F00:0029       		;ld c,SERIALPORT
F00:0030       		;otir
F00:0031       		
F00:0032       		im 2 ;/* interrupt mode 2*/
               S01:00000811:  ED 5E
F00:0033       		ld a, jumptable/256 ;// hibyte
               S01:00000813:  3E 0F
F00:0034       		ld i,a
               S01:00000815:  ED 47
F00:0035       		ei   ;#/* enable interrupts*/
               S01:00000817:  FB
F00:0036       
F00:0037       		ld hl,loadedmsg
               S01:00000818:  21 B2 0C
F00:0038       		call print
               S01:0000081B:  CD A1 08
F00:0039       		#== ******* Command processor Loop ******** ==#
F00:0040       	commandprocessloop:	
F00:0041       		ld hl,commandprocessor
               S01:0000081E:  21 CA 0C
F00:0042       #		ld de,commandMemory
F00:0043       		ld de,0
               S01:00000821:  11 00 00
F00:0044       		call loadFILE
               S01:00000824:  CD E3 08
F00:0045       		cp 0
               S01:00000827:  FE 00
F00:0046       		jp nz,errorloading
               S01:00000829:  C2 3B 08
F00:0047       		ld (_cmdlne),hl ;# save the load address
               S01:0000082C:  22 48 08
F00:0048       		ld hl,0
               S01:0000082F:  21 00 00
F00:0049       		call println
               S01:00000832:  CD 93 08
F00:0050       #		call commandMemory # run the file just loaded.
F00:0051       		call commandline
               S01:00000835:  CD 47 08
F00:0052       		jp commandprocessloop
               S01:00000838:  C3 1E 08
F00:0053       
F00:0054       	errorloading:
F00:0055       		call printhex
               S01:0000083B:  CD CA 08
F00:0056       		ld hl,errorloadingmsg
               S01:0000083E:  21 CE 0C
F00:0057       		call println
               S01:00000841:  CD 93 08
F00:0058       		jp commandprocessloop
               S01:00000844:  C3 1E 08
F00:0059       
F00:0060       commandline: .byte 0xc3
               S01:00000847:  C3
F00:0061       	_cmdlne: .2byte 0
               S01:00000848:  00 00
F00:0062       
F00:0063       		#======================suboutines===============================================#
F00:0064       	# === memset === #
F00:0065       		# ld hl, address to start
F00:0066       		# ld a,0 byte to write into address
F00:0067       		# ld b,1 count of bytes to write
F00:0068       	memset:
F00:0069       		push af
               S01:0000084A:  F5
F00:0070       		push hl
               S01:0000084B:  E5
F00:0071       	_metset$1:
F00:0072       		ld (hl),a
               S01:0000084C:  77
F00:0073       		inc hl
               S01:0000084D:  23
F00:0074       		djnz _metset$1
               S01:0000084E:  10 FC
F00:0075       		pop hl
               S01:00000850:  E1
F00:0076       		pop af
               S01:00000851:  F1
F00:0077       		ret
               S01:00000852:  C9
F00:0078       	#== strlen ==#
F00:0079       		# ld hl, address to start
F00:0080       		# call strlen
F00:0081       		# return len in b
F00:0082       	strlen:
F00:0083       		push hl
               S01:00000853:  E5
F00:0084       		push af
               S01:00000854:  F5
F00:0085       	
F00:0086       		ld b,0
               S01:00000855:  06 00
F00:0087       	_strlen$:
F00:0088       		ld a,(hl)
               S01:00000857:  7E
F00:0089       		cp 0
               S01:00000858:  FE 00
F00:0090       		jp z, strlenexit
               S01:0000085A:  CA 62 08
F00:0091       		inc b
               S01:0000085D:  04
F00:0092       		inc hl
               S01:0000085E:  23
F00:0093       		jp _strlen$:
               S01:0000085F:  C3 57 08
F00:0094       	strlenexit:
F00:0095       	;#	ld a,b
F00:0096       	;#	call printhex
F00:0097       		pop af
               S01:00000862:  F1
F00:0098       		pop hl
               S01:00000863:  E1
F00:0099       		ret
               S01:00000864:  C9
F00:0100       
F00:0101       	#=== strncpy ==#
F00:0102       	;# copy from source into destination size bytes. no validation is done.
F00:0103       	;# ld hl, source
F00:0104       	;# ld de, destination
F00:0105       	;# ld bc, size
F00:0106       
F00:0107       	strncpy:
F00:0108       		ldir
               S01:00000865:  ED B0
F00:0109       		ret
               S01:00000867:  C9
F00:0110       
F00:0111       	# === strcpy == #
F00:0112       	;# copy from source into destination string is zero terminated, no validation is done
F00:0113       	;# ld hl,source
F00:0114       	;# ld de,destination
F00:0115       	;# call strcpy
F00:0116       	strcpy:
F00:0117       		push af
               S01:00000868:  F5
F00:0118       		push hl
               S01:00000869:  E5
F00:0119       		push de
               S01:0000086A:  D5
F00:0120       	_1$:
F00:0121       		ld a,(hl)
               S01:0000086B:  7E
F00:0122       		ld (de),a ;# copy the potential zero before we test because we will need it
               S01:0000086C:  12
F00:0123       		cp 0
               S01:0000086D:  FE 00
F00:0124       		jp z, _strcpyexit$1
               S01:0000086F:  CA 77 08
F00:0125       
F00:0126       		inc de
               S01:00000872:  13
F00:0127       		inc hl
               S01:00000873:  23
F00:0128       		jp _1$
               S01:00000874:  C3 6B 08
F00:0129       	
F00:0130       	_strcpyexit$1:
F00:0131       		pop de
               S01:00000877:  D1
F00:0132       		pop hl
               S01:00000878:  E1
F00:0133       		pop af
               S01:00000879:  F1
F00:0134       		ret
               S01:0000087A:  C9
F00:0135       		# === touppercase ==#
F00:0136       	;#		ld hl,cmd  - zero terminated string
F00:0137       	;#		call touppercase
F00:0138       	;#		ret
F00:0139       	;# the P flag means the comparison was Positive
F00:0140       	;# the M flags means the comparision was Negative
F00:0141       	;# the Z flag means the comparison was equal
F00:0142       	;# the NZ flag means the comparison was not equal.
F00:0143       	;# where:
F00:0144       	;#    A = x  P Positive
F00:0145       	;#			 Z Zero
F00:0146       	;#
F00:0147       	;#    A < x	 M Negative
F00:0148       	;#			 NZ Not zero
F00:0149       	;#
F00:0150       	;#	  A > x  P Positive
F00:0151       	;#			 NZ Not zero
F00:0152       	;#
F00:0153       	;# so a test for JP P,meansSameOrGreater
F00:0154       
F00:0155       
F00:0156       touppercase:
F00:0157       	push af
               S01:0000087B:  F5
F00:0158       	push hl
               S01:0000087C:  E5
F00:0159       	
F00:0160       goagain:
F00:0161       	ld a,(hl)
               S01:0000087D:  7E
F00:0162       	cp 'a'
               S01:0000087E:  FE 61
F00:0163       	jp p, converttouppercaseletter ;# is same or greater then 'a'
               S01:00000880:  F2 86 08
F00:0164       ;# the instructions commented out are implied
F00:0165       	;#cp 'A'
F00:0166       	;#jp p, nextcharacter ;# is same or greater
F00:0167       	;#cp '0'
F00:0168       	;#jp p, nextcharacter
F00:0169       	;# jp nextcharacter replaces the above 4 lines
F00:0170       	jp nextcharacter
               S01:00000883:  C3 89 08
F00:0171       
F00:0172       converttouppercaseletter:
F00:0173       	sub 32
               S01:00000886:  D6 20
F00:0174       	ld (hl),a
               S01:00000888:  77
F00:0175       nextcharacter:
F00:0176       	inc hl
               S01:00000889:  23
F00:0177       	ld a,(hl)
               S01:0000088A:  7E
F00:0178       	cp 0
               S01:0000088B:  FE 00
F00:0179       	jp nz,goagain	
               S01:0000088D:  C2 7D 08
F00:0180       
F00:0181       	pop hl
               S01:00000890:  E1
F00:0182       	pop af
               S01:00000891:  F1
F00:0183       
F00:0184       	ret
               S01:00000892:  C9
F00:0185       	# === PRINTLN == #
F00:0186       	println: ;// same as print but appends CRLF
F00:0187       	call print
               S01:00000893:  CD A1 08
F00:0188       	push hl
               S01:00000896:  E5
F00:0189       	push af
               S01:00000897:  F5
F00:0190       	ld hl,crlf
               S01:00000898:  21 AF 0C
F00:0191       	call print
               S01:0000089B:  CD A1 08
F00:0192       	pop af
               S01:0000089E:  F1
F00:0193       	pop hl
               S01:0000089F:  E1
F00:0194       	ret
               S01:000008A0:  C9
F00:0195       
F00:0196       	# === PRINT === #
F00:0197       	print: ;// expecting a zero terminated string
F00:0198       		push hl
               S01:000008A1:  E5
F00:0199       		push af
               S01:000008A2:  F5
F00:0200       		;# hl can be null so check for that first
F00:0201       		ld a,h
               S01:000008A3:  7C
F00:0202       		cp 0
               S01:000008A4:  FE 00
F00:0203       		jp nz,_$1 ;# hibyte not null, no just print it
               S01:000008A6:  C2 AF 08
F00:0204       		ld a,l
               S01:000008A9:  7D
F00:0205       		cp 0
               S01:000008AA:  FE 00
F00:0206       		jp z,_$2 ;# lobyte is null and hibyte is null so just exit
               S01:000008AC:  CA BA 08
F00:0207       		_$1:
F00:0208       			ld a,(hl)
               S01:000008AF:  7E
F00:0209       			cp 0
               S01:000008B0:  FE 00
F00:0210       			jr z,_$2
               S01:000008B2:  28 06
F00:0211       			out (SERIALPORT),a
               S01:000008B4:  D3 01
F00:0212       			inc hl
               S01:000008B6:  23
F00:0213       			jp _$1
               S01:000008B7:  C3 AF 08
F00:0214       _$2:			
F00:0215       		pop af
               S01:000008BA:  F1
F00:0216       		pop hl
               S01:000008BB:  E1
F00:0217       		ret
               S01:000008BC:  C9
F00:0218       ;#=== printhexL ===#
F00:0219       ;# ld hl,passwords
F00:0220       ;# call printhexL
F00:0221       
F00:0222       printhexL:
F00:0223       	push af
               S01:000008BD:  F5
F00:0224       	push hl
               S01:000008BE:  E5
F00:0225       	ld a,h
               S01:000008BF:  7C
F00:0226       	call printhex
               S01:000008C0:  CD CA 08
F00:0227       	ld a,l
               S01:000008C3:  7D
F00:0228       	call printhex
               S01:000008C4:  CD CA 08
F00:0229       	pop hl
               S01:000008C7:  E1
F00:0230       	pop af
               S01:000008C8:  F1
F00:0231       	ret
               S01:000008C9:  C9
F00:0232       # === PRINTHEX === #
F00:0233       		;Display 8-bit number in hex.
F00:0234       		; 	ld a,0xaa
F00:0235       	;       call printhex
F00:0236       printhex:
F00:0237       
F00:0238       ; Input: a
F00:0239       
F00:0240         push af
               S01:000008CA:  F5
F00:0241         ;// remove low nibble
F00:0242          rra
               S01:000008CB:  1F
F00:0243          rra
               S01:000008CC:  1F
F00:0244          rra
               S01:000008CD:  1F
F00:0245          rra
               S01:000008CE:  1F
F00:0246          call  _$
               S01:000008CF:  CD D3 08
F00:0247          ;// restore low nibble
F00:0248          pop af
               S01:000008D2:  F1
F00:0249          
F00:0250       _$:
F00:0251       	push af
               S01:000008D3:  F5
F00:0252       	;// remove high nibble
F00:0253          and  0x0F
               S01:000008D4:  E6 0F
F00:0254          add  a,0x90
               S01:000008D6:  C6 90
F00:0255          ;; bcd adjust
F00:0256          daa
               S01:000008D8:  27
F00:0257          adc  a,0x40
               S01:000008D9:  CE 40
F00:0258          daa
               S01:000008DB:  27
F00:0259          out (SERIALPORT),a 
               S01:000008DC:  D3 01
F00:0260          pop af
               S01:000008DE:  F1
F00:0261          ret
               S01:000008DF:  C9
F00:0262       
F00:0263       # === putc ===== #
F00:0264       ;# ld a,'*'
F00:0265       ;# call putc
F00:0266       ;# no return value
F00:0267       putc:
F00:0268       		out (SERIALPORT),a
               S01:000008E0:  D3 01
F00:0269       		ret
               S01:000008E2:  C9
F00:0270       
F00:0271       		;// end subroutines
F00:0272       # === loadFILE === #
F00:0273       ; ld hl, filename (zero terminated)
F00:0274       ; ld de, memory address to load file into
F00:0275       ; call loadFILE
F00:0276       ; returns 
F00:0277       ;	HL
F00:0278       ;		baseaddress of the dll
F00:0279       ;	A register 
F00:0280       ;			2 = failed to open the file
F00:0281       ;			0 = if file loaded into memory
F00:0282       ;	DE register pair
F00:0283       ;			count of bytes loaded
F00:0284       loadFILE:
F00:0285       	push af
               S01:000008E3:  F5
F00:0286       	push de ; save de for later
               S01:000008E4:  D5
F00:0287       	call sizereset
               S01:000008E5:  CD C7 09
F00:0288       	ld a,0 ;# erase the executable header information
               S01:000008E8:  3E 00
F00:0289       	ld (startaddress),a
               S01:000008EA:  32 F4 09
F00:0290       	ld (startaddress+1),a
               S01:000008ED:  32 F5 09
F00:0291       	ld (startaddress+2),a
               S01:000008F0:  32 F6 09
F00:0292       	ld (startaddress+3),a
               S01:000008F3:  32 F7 09
F00:0293       		; try to open the SD card and read some data
F00:0294       		ld a,FILENAMECLEAR ; // filenameclear
               S01:000008F6:  3E 01
F00:0295       		out (SDCARD),a
               S01:000008F8:  D3 05
F00:0296       
F00:0297       
F00:0298       ;
F00:0299       _$getnextchar:
F00:0300       		ld a,(hl)
               S01:000008FA:  7E
F00:0301       		cp 0
               S01:000008FB:  FE 00
F00:0302       		jp z, _$openfile #; if filename character is null we have finished
               S01:000008FD:  CA 0B 09
F00:0303       		ld a,FILENAMEAPPEND
               S01:00000900:  3E 04
F00:0304       		out (SDCARD),a ; // filenameappend
               S01:00000902:  D3 05
F00:0305       		ld a,(hl)
               S01:00000904:  7E
F00:0306       		out (SDCARD),a
               S01:00000905:  D3 05
F00:0307       		;#out (SERIALPORT),a
F00:0308       		inc hl
               S01:00000907:  23
F00:0309       		jp _$getnextchar
               S01:00000908:  C3 FA 08
F00:0310       
F00:0311       _$openfile:
F00:0312       #openfile will return 1 if the file was opened, 0 if it failed to open
F00:0313       		ld a,OPEN	;// Open
               S01:0000090B:  3E 02
F00:0314       		out (SDCARD),a
               S01:0000090D:  D3 05
F00:0315       		in a,(SDCARD)
               S01:0000090F:  DB 05
F00:0316       		pop hl ; get load address - must pop the stack before returning
               S01:00000911:  E1
F00:0317       		cp 0
               S01:00000912:  FE 00
F00:0318       		jp nz,testloadaddress
               S01:00000914:  C2 1E 09
F00:0319       		pop af ;# a flag not needed now
               S01:00000917:  F1
F00:0320       		call sizeloaded
               S01:00000918:  CD B8 09
F00:0321       		ld a,2 ;we have an error trying to open the file.
               S01:0000091B:  3E 02
F00:0322       		ret
               S01:0000091D:  C9
F00:0323       testloadaddress:
F00:0324       	# if loadaddress (hl) = 0, then the file will have load address information in the 1st 2 bytes
F00:0325       	ld a,0
               S01:0000091E:  3E 00
F00:0326       	cp h
               S01:00000920:  BC
F00:0327       	jp nz,available ;# h is not zero so it must have an address to load into already
               S01:00000921:  C2 84 09
F00:0328       	cp l
               S01:00000924:  BD
F00:0329       	jp nz,available ;# l is not zero so it must have an address to load intop already
               S01:00000925:  C2 84 09
F00:0330       
F00:0331       	ld hl,startaddress ;# this is the place to store the 2 bytes we need to get at the load address
               S01:00000928:  21 F4 09
F00:0332       	call loadheader
               S01:0000092B:  CD 5B 09
F00:0333       	cp 1
               S01:0000092E:  FE 01
F00:0334       	jp nz,_4$
               S01:00000930:  C2 58 09
F00:0335       
F00:0336       	ld hl,(startaddress)
               S01:00000933:  2A F4 09
F00:0337       	inc hl ;#start address
               S01:00000936:  23
F00:0338       	inc hl
               S01:00000937:  23
F00:0339       	inc hl ;# program size in pages
               S01:00000938:  23
F00:0340       	inc hl ;# stack size in pages
               S01:00000939:  23
F00:0341       	ld (startaddress),hl ;# this is now the dll entry point address, will need this later to initialize the library
               S01:0000093A:  22 F4 09
F00:0342       
F00:0343       	ld a,(memorypages)
               S01:0000093D:  3A F6 09
F00:0344       	ld b,a
               S01:00000940:  47
F00:0345       	ld a,h
               S01:00000941:  7C
F00:0346       
F00:0347       45$:	DEBUGHEX a
F05:0001       # example : DEBUGHEX '!'
F05:0002       #      or : DEBUGHEX h
F05:0003       		push af
               S01:00000942:  F5
F05:0004       		ld a,a
               S01:00000943:  7F
F05:0005       		call printhex
               S01:00000944:  CD CA 08
F05:0006       		pop af
               S01:00000947:  F1
F00:0348       	DEBUG '\n'
F06:0001       # example : DEBUG '!'
F06:0002       #      or : DEBUG h
F06:0003       		push af
               S01:00000948:  F5
F06:0004       		ld a,10
               S01:00000949:  3E 0A
F06:0005       		call putc
               S01:0000094B:  CD E0 08
F06:0006       		pop af
               S01:0000094E:  F1
F00:0349       
F00:0350       	call reservemalloc
               S01:0000094F:  CD 4C 0B
F00:0351       	inc a
               S01:00000952:  3C
F00:0352       	djnz 45$
               S01:00000953:  10 ED
F00:0353       
F00:0354       	jp available
               S01:00000955:  C3 84 09
F00:0355       _4$:
F00:0356       	ld a,3 ;#new error code
               S01:00000958:  3E 03
F00:0357       	ret
               S01:0000095A:  C9
F00:0358       	#if we reach here then the first 2 bytes have the address information so let read them now
F00:0359       	;# header information
F00:0360       	;# 2bytes program load address
F00:0361       	;# 1byte memory required in pages
F00:0362       	;# 1byte stack required in pages
F00:0363       loadheader:
F00:0364       	ld b,4
               S01:0000095B:  06 04
F00:0365       	ld c,0
               S01:0000095D:  0E 00
F00:0366       _2$:
F00:0367       	ld a, AVAILABLE
               S01:0000095F:  3E 06
F00:0368       	out (SDCARD),a
               S01:00000961:  D3 05
F00:0369       	in a,(SDCARD) ;# is data available?
               S01:00000963:  DB 05
F00:0370       	cp 0
               S01:00000965:  FE 00
F00:0371       	jp nz,_1$
               S01:00000967:  C2 77 09
F00:0372       	pop af ;#restore af
               S01:0000096A:  F1
F00:0373       	ld hl,0
               S01:0000096B:  21 00 00
F00:0374       		call println
               S01:0000096E:  CD 93 08
F00:0375       		call sizeloaded
               S01:00000971:  CD B8 09
F00:0376       		ld a,0 ;# use 0 in A to indicate a fail
               S01:00000974:  3E 00
F00:0377       		ret ;#- exit loadheader because the file read had a problem
               S01:00000976:  C9
F00:0378       _1$:
F00:0379       		;// if we get here then there is data to read
F00:0380       		ld a,READNEXTBYTE
               S01:00000977:  3E 05
F00:0381       		out (SDCARD),a ;// read nextbyte
               S01:00000979:  D3 05
F00:0382       		in a,(SDCARD)
               S01:0000097B:  DB 05
F00:0383       		ld (hl),a ; // store byte in RAM (OSLOAD)
               S01:0000097D:  77
F00:0384       		inc hl 
               S01:0000097E:  23
F00:0385       		djnz _2$
               S01:0000097F:  10 DE
F00:0386       		ld a,1 ;# use 1 in A to indicate a success
               S01:00000981:  3E 01
F00:0387       		ret ;# exit loadheader because we have loaded 4 bytes
               S01:00000983:  C9
F00:0388       available:
F00:0389       	#available will return 1 if there is data to read, 0 if no data to read
F00:0390       		ld a, AVAILABLE ; // available
               S01:00000984:  3E 06
F00:0391       		out (SDCARD),a
               S01:00000986:  D3 05
F00:0392       		in a,(SDCARD) ;// read the value from the device
               S01:00000988:  DB 05
F00:0393       	;	ld b,a ; // going to malipulate the a register so save it as not to destroy the A result
F00:0394       	;	add a,'0' ;// make it printable
F00:0395       	;	out (SERIALPORT),a ;// print response
F00:0396       	;	ld a,b
F00:0397       		cp 0 ;// compare the A reg returned by the device
               S01:0000098A:  FE 00
F00:0398       		jp nz,_$nextbyte
               S01:0000098C:  C2 A7 09
F00:0399       		pop af ;# restore the af registers because it will tell me if I need to zero terminate the loaded file
               S01:0000098F:  F1
F00:0400       		cp 1
               S01:00000990:  FE 01
F00:0401       		jp nz,_1$
               S01:00000992:  C2 98 09
F00:0402       		;# the hl register pair contains the last address we need to write a zero here because the user wants it
F00:0403       		ld a,0
               S01:00000995:  3E 00
F00:0404       		ld (hl),a ;# zero terminated
               S01:00000997:  77
F00:0405       
F00:0406       _1$:
F00:0407       		ld hl,0
               S01:00000998:  21 00 00
F00:0408       		call println
               S01:0000099B:  CD 93 08
F00:0409       		call sizeloaded
               S01:0000099E:  CD B8 09
F00:0410       		ld hl,(startaddress) ;# return the startaddress
               S01:000009A1:  2A F4 09
F00:0411       		ld a,0
               S01:000009A4:  3E 00
F00:0412       		ret
               S01:000009A6:  C9
F00:0413       _$nextbyte:
F00:0414       		;// if we get here then there is data to read
F00:0415       		ld a,READNEXTBYTE
               S01:000009A7:  3E 05
F00:0416       		out (SDCARD),a ;// read nextbyte
               S01:000009A9:  D3 05
F00:0417       		in a,(SDCARD)
               S01:000009AB:  DB 05
F00:0418       		ld (hl),a ; // store byte in RAM (OSLOAD)
               S01:000009AD:  77
F00:0419       		inc hl 
               S01:000009AE:  23
F00:0420       		ld a,'#'
               S01:000009AF:  3E 23
F00:0421       		out (SERIALPORT),a ;// just echo it back for now
               S01:000009B1:  D3 01
F00:0422       		call sizeincrement
               S01:000009B3:  CD DA 09
F00:0423       		jr available ;
               S01:000009B6:  18 CC
F00:0424       
F00:0425       sizeloaded:
F00:0426       	push ix
               S01:000009B8:  DD E5
F00:0427       	ld ix,losize
               S01:000009BA:  DD 21 F2 09
F00:0428       	ld e,(ix)
               S01:000009BE:  DD 5E 00
F00:0429       	ld d,(ix+1)
               S01:000009C1:  DD 56 01
F00:0430       	pop ix
               S01:000009C4:  DD E1
F00:0431       	ret
               S01:000009C6:  C9
F00:0432       sizereset:
F00:0433       	push ix
               S01:000009C7:  DD E5
F00:0434       	push af
               S01:000009C9:  F5
F00:0435       	ld a,0
               S01:000009CA:  3E 00
F00:0436       	ld ix,losize
               S01:000009CC:  DD 21 F2 09
F00:0437       	ld (ix),a
               S01:000009D0:  DD 77 00
F00:0438       	ld (ix+1),a
               S01:000009D3:  DD 77 01
F00:0439       	pop af
               S01:000009D6:  F1
F00:0440       	pop ix
               S01:000009D7:  DD E1
F00:0441       	ret
               S01:000009D9:  C9
F00:0442       sizeincrement:
F00:0443       	push ix
               S01:000009DA:  DD E5
F00:0444       	push hl
               S01:000009DC:  E5
F00:0445       
F00:0446       	ld ix,losize
               S01:000009DD:  DD 21 F2 09
F00:0447       	ld l,(ix)
               S01:000009E1:  DD 6E 00
F00:0448       	ld h,(ix+1)
               S01:000009E4:  DD 66 01
F00:0449       	inc HL
               S01:000009E7:  23
F00:0450       	ld (ix),l
               S01:000009E8:  DD 75 00
F00:0451       	ld (ix+1),h
               S01:000009EB:  DD 74 01
F00:0452       
F00:0453       	pop hl
               S01:000009EE:  E1
F00:0454       	pop ix
               S01:000009EF:  DD E1
F00:0455       	ret
               S01:000009F1:  C9
F00:0456       
F00:0457       losize: .byte 0
               S01:000009F2:  00
F00:0458       hisize: .byte 0
               S01:000009F3:  00
F00:0459       
F00:0460       ;# executable header information
F00:0461       startaddress: .2byte 0
               S01:000009F4:  00 00
F00:0462       memorypages: .byte 0
               S01:000009F6:  00
F00:0463       stackpages: .byte 0
               S01:000009F7:  00
F00:0464       ;# ====== hextobyte ==========
F00:0465       ;#    load HL registers with the 2 ascii characters of a hexadecimal value
F00:0466       ;# note routine does not validate the inputs.
F00:0467       ;# alphabeta expected in uppercase
F00:0468       ;#	ld h,'c'
F00:0469       ;#	ld l,'3'
F00:0470       ;#	call hextobyte
F00:0471       ;#	value stored in A register
F00:0472       
F00:0473       
F00:0474       hextobyte:
F00:0475       	push hl
               S01:000009F8:  E5
F00:0476       	push bc
               S01:000009F9:  C5
F00:0477       	ld a,l ;# prepare the low nibble
               S01:000009FA:  7D
F00:0478       	call workhextobyte
               S01:000009FB:  CD 0B 0A
F00:0479       	ld b,a ;# save it later
               S01:000009FE:  47
F00:0480       	ld a,h ;# prepare the high nibble
               S01:000009FF:  7C
F00:0481       	call workhextobyte
               S01:00000A00:  CD 0B 0A
F00:0482       	rla ;# a contains the result from the high nibble
               S01:00000A03:  17
F00:0483       	rla ;# so move the nibble to make room for the low nibble
               S01:00000A04:  17
F00:0484       	rla
               S01:00000A05:  17
F00:0485       	rla
               S01:00000A06:  17
F00:0486       	or b ;# add the low nibble
               S01:00000A07:  B0
F00:0487       
F00:0488       	pop bc
               S01:00000A08:  C1
F00:0489       	pop hl
               S01:00000A09:  E1
F00:0490       	ret
               S01:00000A0A:  C9
F00:0491       workhextobyte:
F00:0492       	cp 'A' ;# alphabeta sub 55
               S01:00000A0B:  FE 41
F00:0493       	jp m,hextobytenumber
               S01:00000A0D:  FA 13 0A
F00:0494       	sub 55
               S01:00000A10:  D6 37
F00:0495       	ret
               S01:00000A12:  C9
F00:0496       hextobytenumber:
F00:0497       	sub 48 ;# if number sub 48
               S01:00000A13:  D6 30
F00:0498       	ret
               S01:00000A15:  C9
F00:0499       
F00:0500       	;# === directory open === #
F00:0501       
F00:0502       directoryopen:
F00:0503       	push af
               S01:00000A16:  F5
F00:0504       	ld a,OPENDIRECTORY
               S01:00000A17:  3E 31
F00:0505       	out (SDCARD),a
               S01:00000A19:  D3 05
F00:0506       	pop af
               S01:00000A1B:  F1
F00:0507       	ret
               S01:00000A1C:  C9
F00:0508       	;# === nextfile === #
F00:0509       nextfile:
F00:0510       	push af
               S01:00000A1D:  F5
F00:0511       	ld a,NEXTFILE
               S01:00000A1E:  3E 32
F00:0512       	out (SDCARD),a
               S01:00000A20:  D3 05
F00:0513       	pop af
               S01:00000A22:  F1
F00:0514       	ret
               S01:00000A23:  C9
F00:0515       	;# === getfilename or currently open file ===#
F00:0516       	;# ld hl,storagelocation - for the filename
F00:0517       	;# call getfilename
F00:0518       
F00:0519       getfilename:
F00:0520       	push af
               S01:00000A24:  F5
F00:0521       	push hl
               S01:00000A25:  E5
F00:0522       	ld a,GETNAME
               S01:00000A26:  3E 20
F00:0523       	out (SDCARD),a
               S01:00000A28:  D3 05
F00:0524       
F00:0525       _getfilename$1:
F00:0526       	ld a,NAMEAVAILABLE
               S01:00000A2A:  3E 21
F00:0527       	out (SDCARD),a
               S01:00000A2C:  D3 05
F00:0528       	in a,(SDCARD)
               S01:00000A2E:  DB 05
F00:0529       	cp 0
               S01:00000A30:  FE 00
F00:0530       	jp z, _exitgetfilename
               S01:00000A32:  CA 3A 0A
F00:0531       
F00:0532       	ld (hl),a
               S01:00000A35:  77
F00:0533       	inc hl
               S01:00000A36:  23
F00:0534       	
F00:0535       	jp _getfilename$1
               S01:00000A37:  C3 2A 0A
F00:0536       
F00:0537       _exitgetfilename:
F00:0538       	ld a,0
               S01:00000A3A:  3E 00
F00:0539       	ld (hl),a
               S01:00000A3C:  77
F00:0540       	pop hl
               S01:00000A3D:  E1
F00:0541       	pop af
               S01:00000A3E:  F1
F00:0542       	ret
               S01:00000A3F:  C9
F00:0543       
F00:0544       	# === createProcess == #
F00:0545       	;# stack - note the example below is using the registers as an example, it really don't matter
F00:0546       	;# which register pair put that data on the stack, the sequence in which the parameters are put on the stack
F00:0547       	;# does matter.
F00:0548       	;# push hl,program - zero terminated
F00:0549       	;# push de,commandline - zero terminated
F00:0550       	;# call createProcess
F00:0551       	;# that should do for now
F00:0552       	createProcess: ;# this is messy need to have another go at this
F00:0553       		ld a,0
               S01:00000A40:  3E 00
F00:0554       		call printhex
               S01:00000A42:  CD CA 08
F00:0555       
F00:0556       		pop hl ;# get the return address
               S01:00000A45:  E1
F00:0557       		exx ;# exchange with other registers
               S01:00000A46:  D9
F00:0558       
F00:0559       #		ld de,userMemory-50 ;# whooa
F00:0560       		ld de,theparams
               S01:00000A47:  11 C0 0A
F00:0561       		;# copy the command params
F00:0562       		pop hl ;# get the command params
               S01:00000A4A:  E1
F00:0563       		ld a,1
               S01:00000A4B:  3E 01
F00:0564       		call printhex
               S01:00000A4D:  CD CA 08
F00:0565       
F00:0566       		call strcpy
               S01:00000A50:  CD 68 08
F00:0567       		ld a,2
               S01:00000A53:  3E 02
F00:0568       		call printhex
               S01:00000A55:  CD CA 08
F00:0569       		push hl
               S01:00000A58:  E5
F00:0570       		ld hl,thecommandlinemsg
               S01:00000A59:  21 B8 0A
F00:0571       		call println
               S01:00000A5C:  CD 93 08
F00:0572       		pop hl
               S01:00000A5F:  E1
F00:0573       		call println ;# print command params
               S01:00000A60:  CD 93 08
F00:0574       
F00:0575       		ld a,3
               S01:00000A63:  3E 03
F00:0576       		call printhex
               S01:00000A65:  CD CA 08
F00:0577       
F00:0578       		pop hl ;# get the program
               S01:00000A68:  E1
F00:0579       		push HL
               S01:00000A69:  E5
F00:0580       		ld hl,theprocessmsg
               S01:00000A6A:  21 AF 0A
F00:0581       		call println
               S01:00000A6D:  CD 93 08
F00:0582       		pop hl
               S01:00000A70:  E1
F00:0583       		call println ;# print program name
               S01:00000A71:  CD 93 08
F00:0584       #		ld de,userMemory
F00:0585       		ld a,0
               S01:00000A74:  3E 00
F00:0586       		ld d,a ;# use dynamic load address if possible
               S01:00000A76:  57
F00:0587       		ld e,a
               S01:00000A77:  5F
F00:0588       		ld a,4
               S01:00000A78:  3E 04
F00:0589       		call printhex
               S01:00000A7A:  CD CA 08
F00:0590       
F00:0591       		call loadFILE
               S01:00000A7D:  CD E3 08
F00:0592       		cp 0
               S01:00000A80:  FE 00
F00:0593       		jp nz, _createProcesserr$1
               S01:00000A82:  C2 AA 0A
F00:0594       		ld (_progloadaddr),hl ;# save the address the program was loaded into. if null is means use the default userMemory
               S01:00000A85:  22 A8 0A
F00:0595       		
F00:0596       		exx ;# restore the other original registers
               S01:00000A88:  D9
F00:0597       		push hl ; # restore the return address
               S01:00000A89:  E5
F00:0598       		# test if we need to use the default address or the program/library supplied address
F00:0599       		# we can do that by checking if the hl pair is null, null = use fault, not null = custom address
F00:0600       		ld hl,(_progloadaddr)
               S01:00000A8A:  2A A8 0A
F00:0601       		ld a,h
               S01:00000A8D:  7C
F00:0602       		cp 0
               S01:00000A8E:  FE 00
F00:0603       		jp nz, _4$
               S01:00000A90:  C2 A0 0A
F00:0604       		ld a,l
               S01:00000A93:  7D
F00:0605       		cp 0
               S01:00000A94:  FE 00
F00:0606       		jp nz,_4$
               S01:00000A96:  C2 A0 0A
F00:0607       		# hl was null so call the default address
F00:0608       		call printhexL
               S01:00000A99:  CD BD 08
F00:0609       				### CREATENEWPROCESSINFO
F00:0610       		call userMemory
               S01:00000A9C:  CD 00 30
F00:0611       		
F00:0612       		ret
               S01:00000A9F:  C9
F00:0613       _4$:
F00:0614       	call printhexL
               S01:00000AA0:  CD BD 08
F00:0615       		### CREATENEWPROCESSINFO
F00:0616       	call progloadaddress
               S01:00000AA3:  CD A7 0A
F00:0617       	ret
               S01:00000AA6:  C9
F00:0618       progloadaddress: .byte 0xc3
               S01:00000AA7:  C3
F00:0619       	_progloadaddr: .2byte 0
               S01:00000AA8:  00 00
F00:0620       
F00:0621       
F00:0622       
F00:0623       _createProcesserr$1:
F00:0624       		push af
               S01:00000AAA:  F5
F00:0625       		exx ;# restore the other original registers
               S01:00000AAB:  D9
F00:0626       		pop af
               S01:00000AAC:  F1
F00:0627       		push hl ; # restore the return address
               S01:00000AAD:  E5
F00:0628       		ret
               S01:00000AAE:  C9
F00:0629       
F00:0630       theprocessmsg: .string "process:"
               S01:00000AAF:  70 72 6F 63 65 73 73 3A
F00:0631       thecommandlinemsg: .string "params:"
               S01:00000AB8:  70 61 72 61 6D 73 3A
F00:0632       theparams: .space 50
F00:0633       
F00:0634       #== updateprocessinfo ===#
F00:0635       # ld hl,processname - zero terminated
F00:0636       # call newprocessinfo
F00:0637       # return 
F00:0638       #	processid in A register
F00:0639       #	processinfo pointer in HL
F00:0640       
F00:0641       
F00:0642       
F00:0643       #== startprocessinfo ==#
F00:0644       # reset the process info list pointer
F00:0645       # no inputs, no outputs
F00:0646       startprocessinfo: 
F00:0647       	push af
               S01:00000AF2:  F5
F00:0648       	ld a,0
               S01:00000AF3:  3E 00
F00:0649       	ld (currentprocessinfo),a
               S01:00000AF5:  32 22 0B
F00:0650       	pop af
               S01:00000AF8:  F1
F00:0651       	ret
               S01:00000AF9:  C9
F00:0652       
F00:0653       #== nextprocessinfo ===#
F00:0654       # return in hl the next processinfo entry
F00:0655       # also updates currentprocessinfo
F00:0656       
F00:0657       nextprocessinfo:
F00:0658       	push af
               S01:00000AFA:  F5
F00:0659       	ld a,(currentprocessinfo)
               S01:00000AFB:  3A 22 0B
F00:0660       	ld h,a
               S01:00000AFE:  67
F00:0661       	ld e,PROCINFOSIZE
               S01:00000AFF:  1E 06
F00:0662       	call Mul8b
               S01:00000B01:  CD BE 0B
F00:0663       	ex de,hl
               S01:00000B04:  EB
F00:0664       	ld hl,processtable
               S01:00000B05:  21 23 0B
F00:0665       	add hl,DE
               S01:00000B08:  19
F00:0666       	inc a
               S01:00000B09:  3C
F00:0667       	cp MAXPROCESSES
               S01:00000B0A:  FE 04
F00:0668       	jp p, 1$ ;# if we go passed the limit reset back to 0
               S01:00000B0C:  F2 16 0B
F00:0669       	ld (currentprocessinfo),a
               S01:00000B0F:  32 22 0B
F00:0670       	pop af
               S01:00000B12:  F1
F00:0671       	scf ;# set cf
               S01:00000B13:  37
F00:0672       	ccf ;# invert cf
               S01:00000B14:  3F
F00:0673       	ret
               S01:00000B15:  C9
F00:0674       1$: ;# if reach maxprocesses, return 0 in a & hl
F00:0675       	ld a,0
               S01:00000B16:  3E 00
F00:0676       	ld (currentprocessinfo),a
               S01:00000B18:  32 22 0B
F00:0677       	ld h,a
               S01:00000B1B:  67
F00:0678       	ld l,a
               S01:00000B1C:  6F
F00:0679       	pop af
               S01:00000B1D:  F1
F00:0680       	scf
               S01:00000B1E:  37
F00:0681       	ret
               S01:00000B1F:  C9
F00:0682       
F00:0683       lastprogramid: .byte 0
               S01:00000B20:  00
F00:0684       maxprocesses: .byte MAXPROCESSES
               S01:00000B21:  04
F00:0685       currentprocessinfo: .byte 0; # index to a process table entry
               S01:00000B22:  00
F00:0686       processtable: 
F00:0687       	;# 1byte process status - 1=running, 0=no process
F00:0688       	;# 1byte processID
F00:0689       	;# 4bytes process name
F00:0690       .rept MAXPROCESSES
F00:0692       
F07:0001       	.space PROCINFOSIZE
F07:0001       	.space PROCINFOSIZE
F07:0001       	.space PROCINFOSIZE
F07:0001       	.space PROCINFOSIZE
F00:0693       endprocesstable: ;# this does nothing and can be deleted. I'm using it to check the listing address
F00:0694       
F00:0695       	# === getcommandparams == #
F00:0696       	;# ld hl,buffer - address of where to copy the data
F00:0697       	;# call getcommandparams
F00:0698       	;# returns zero termined string at buffer 
F00:0699       getcommandparams:
F00:0700       	push de
               S01:00000B3B:  D5
F00:0701       	push hl
               S01:00000B3C:  E5
F00:0702       	push hl ;# save hl to move into de
               S01:00000B3D:  E5
F00:0703       	pop de ;# load hl into de
               S01:00000B3E:  D1
F00:0704       #	ld hl,userMemory-50   ;# ********* I dont remember why I did this, it needs investigating
F00:0705       	ld hl,theparams
               S01:00000B3F:  21 C0 0A
F00:0706       	call strcpy
               S01:00000B42:  CD 68 08
F00:0707       	pop hl
               S01:00000B45:  E1
F00:0708       	pop de
               S01:00000B46:  D1
F00:0709       	ret
               S01:00000B47:  C9
F00:0710       
F00:0711       ;# ================ getmalloctable ======#
F00:0712       	getmalloctable:
F00:0713       		ld hl,malloctable
               S01:00000B48:  21 00 0E
F00:0714       		ret
               S01:00000B4B:  C9
F00:0715       
F00:0716       ;# ====== reserve memory alloc table entry ===#
F00:0717       
F00:0718       	reservemalloc:
F00:0719       		push bc
               S01:00000B4C:  C5
F00:0720       		push af
               S01:00000B4D:  F5
F00:0721       		ld b,1
               S01:00000B4E:  06 01
F00:0722       		call setresetpage
               S01:00000B50:  CD 56 0B
F00:0723       		pop af
               S01:00000B53:  F1
F00:0724       		pop bc
               S01:00000B54:  C1
F00:0725       	ret
               S01:00000B55:  C9
F00:0726       ;# ======= setresetpage - memory alloc table management ===#
F00:0727       setresetpage:
F00:0728       ;# ld a, page
F00:0729       ;# ld b, setorreset , 0 = reset, 1 = set
F00:0730       		push hl
               S01:00000B56:  E5
F00:0731       		push bc
               S01:00000B57:  C5
F00:0732       		push af
               S01:00000B58:  F5
F00:0733       	
F00:0734       		
F00:0735       		DEBUG '@'
F08:0001       # example : DEBUG '!'
F08:0002       #      or : DEBUG h
F08:0003       		push af
               S01:00000B59:  F5
F08:0004       		ld a,64
               S01:00000B5A:  3E 40
F08:0005       		call putc
               S01:00000B5C:  CD E0 08
F08:0006       		pop af
               S01:00000B5F:  F1
F00:0736       
F00:0737       		call getmallocrelativebase
               S01:00000B60:  CD 90 0B
F00:0738       
F00:0739       		DEBUG '%'
F09:0001       # example : DEBUG '!'
F09:0002       #      or : DEBUG h
F09:0003       		push af
               S01:00000B63:  F5
F09:0004       		ld a,37
               S01:00000B64:  3E 25
F09:0005       		call putc
               S01:00000B66:  CD E0 08
F09:0006       		pop af
               S01:00000B69:  F1
F00:0740       		pop af
               S01:00000B6A:  F1
F00:0741       		and 0x0f
               S01:00000B6B:  E6 0F
F00:0742       		cp 8
               S01:00000B6D:  FE 08
F00:0743       		jp m,1$
               S01:00000B6F:  FA 75 0B
F00:0744       		inc hl
               S01:00000B72:  23
F00:0745       		sub 8
               S01:00000B73:  D6 08
F00:0746       1$:
F00:0747       	
F00:0748       		ld b,a
               S01:00000B75:  47
F00:0749       		inc b
               S01:00000B76:  04
F00:0750       		scf
               S01:00000B77:  37
F00:0751       		ld a,0
               S01:00000B78:  3E 00
F00:0752       
F00:0753       2$:		rra 	
               S01:00000B7A:  1F
F00:0754       		djnz 2$
               S01:00000B7B:  10 FD
F00:0755       		pop bc
               S01:00000B7D:  C1
F00:0756       
F00:0757       		push af
               S01:00000B7E:  F5
F00:0758       		ld a,b
               S01:00000B7F:  78
F00:0759       		cp 0
               S01:00000B80:  FE 00
F00:0760       		jp z,6$
               S01:00000B82:  CA 8A 0B
F00:0761       ;# set
F00:0762       		pop af
               S01:00000B85:  F1
F00:0763       		or (hl)
               S01:00000B86:  B6
F00:0764       		jp 4$
               S01:00000B87:  C3 8D 0B
F00:0765       
F00:0766       ;# reset
F00:0767       6$:		pop af
               S01:00000B8A:  F1
F00:0768       		cpl
               S01:00000B8B:  2F
F00:0769       		and (hl)
               S01:00000B8C:  A6
F00:0770       
F00:0771       4$:
F00:0772       		ld (hl),a
               S01:00000B8D:  77
F00:0773       		pop hl
               S01:00000B8E:  E1
F00:0774       		ret
               S01:00000B8F:  C9
F00:0775       
F00:0776       getmallocrelativebase:
F00:0777       ;# ld a,page
F00:0778       ;# call getmallocrelativebase
F00:0779       ;# return in hl = malloctable address adjusted for page
F00:0780       	push de
               S01:00000B90:  D5
F00:0781       		and 0xf0
               S01:00000B91:  E6 F0
F00:0782       
F00:0783       		ld l,a
               S01:00000B93:  6F
F00:0784       		ld h,0
               S01:00000B94:  26 00
F00:0785       		ld d,8
               S01:00000B96:  16 08
F00:0786       		call Div8
               S01:00000B98:  CD B0 0B
F00:0787       
F00:0788       		ex de,hl
               S01:00000B9B:  EB
F00:0789       		#.byte 0xeb
F00:0790       
F00:0791       		DEBUG '!'
F10:0001       # example : DEBUG '!'
F10:0002       #      or : DEBUG h
F10:0003       		push af
               S01:00000B9C:  F5
F10:0004       		ld a,33
               S01:00000B9D:  3E 21
F10:0005       		call putc
               S01:00000B9F:  CD E0 08
F10:0006       		pop af
               S01:00000BA2:  F1
F00:0792       
F00:0793       		call getmalloctable
               S01:00000BA3:  CD 48 0B
F00:0794       		DEBUG '^'
F11:0001       # example : DEBUG '!'
F11:0002       #      or : DEBUG h
F11:0003       		push af
               S01:00000BA6:  F5
F11:0004       		ld a,94
               S01:00000BA7:  3E 5E
F11:0005       		call putc
               S01:00000BA9:  CD E0 08
F11:0006       		pop af
               S01:00000BAC:  F1
F00:0795       		add hl,de
               S01:00000BAD:  19
F00:0796       		pop de
               S01:00000BAE:  D1
F00:0797       		ret
               S01:00000BAF:  C9
F00:0798       
F00:0799       
F00:0800       
F00:0801       ;# ========== Div8 8bit division =======#
F00:0802       ;# http://tutorials.eeems.ca/Z80ASM/part4.htm#div8
F00:0803       ;# result stored in HL
F00:0804       ;# ld hl,4
F00:0805       ;# ld d,2
F00:0806       ;# call Div8
F00:0807       Div8:                            ; this routine performs the operation HL=HL/D
F00:0808         xor a                          ; clearing the upper 8 bits of AHL
               S01:00000BB0:  AF
F00:0809         ld b,16                        ; the length of the dividend (16 bits)
               S01:00000BB1:  06 10
F00:0810       Div8Loop:
F00:0811         add hl,hl                      ; advancing a bit
               S01:00000BB3:  29
F00:0812         rla
               S01:00000BB4:  17
F00:0813         cp d                           ; checking if the divisor divides the digits chosen (in A)
               S01:00000BB5:  BA
F00:0814         jp c,Div8NextBit               ; if not, advancing without subtraction
               S01:00000BB6:  DA BB 0B
F00:0815         sub d                          ; subtracting the divisor
               S01:00000BB9:  92
F00:0816         inc l                          ; and setting the next digit of the quotient
               S01:00000BBA:  2C
F00:0817       Div8NextBit:
F00:0818         djnz Div8Loop
               S01:00000BBB:  10 F6
F00:0819         ret
               S01:00000BBD:  C9
F00:0820       
F00:0821         # ===== Mul8b 8bit multily ===#
F00:0822         # http://tutorials.eeems.ca/Z80ASM/part4.htm
F00:0823         Mul8b:                           ; this routine performs the operation HL=H*E
F00:0824         ld d,0                         ; clearing D and L
               S01:00000BBE:  16 00
F00:0825         ld l,d
               S01:00000BC0:  6A
F00:0826         ld b,8                         ; we have 8 bits
               S01:00000BC1:  06 08
F00:0827       Mul8bLoop:
F00:0828         add hl,hl                      ; advancing a bit
               S01:00000BC3:  29
F00:0829         jp nc,Mul8bSkip                ; if zero, we skip the addition (jp is used for speed)
               S01:00000BC4:  D2 C8 0B
F00:0830         add hl,de                      ; adding to the product if necessary
               S01:00000BC7:  19
F00:0831       Mul8bSkip:
F00:0832         djnz Mul8bLoop
               S01:00000BC8:  10 F9
F00:0833         ret
               S01:00000BCA:  C9
F00:0834       
F00:0835       ;================================
F00:0836       ; # === loadaddress == #   THIS NEEDS CHANGING INTO A LOOKUP TABLE - not code
F00:0837       ; ld a,x - where x = instruction id
F00:0838       ;				id = 1, print
F00:0839       ;					 2, printhex
F00:0840       ;					3,loadFILE
F00:0841       loadaddress:
F00:0842       	cp PRINT
               S01:00000BCB:  FE 01
F00:0843       	jp nz,_loadaddress$2
               S01:00000BCD:  C2 D4 0B
F00:0844       	ld hl,print
               S01:00000BD0:  21 A1 08
F00:0845       	ret
               S01:00000BD3:  C9
F00:0846       _loadaddress$2:
F00:0847       	cp PRINTHEX
               S01:00000BD4:  FE 02
F00:0848       	jp nz,_loadaddress$3
               S01:00000BD6:  C2 DD 0B
F00:0849       	ld hl,printhex
               S01:00000BD9:  21 CA 08
F00:0850       	ret
               S01:00000BDC:  C9
F00:0851       _loadaddress$3:
F00:0852       	cp LOADFILE
               S01:00000BDD:  FE 03
F00:0853       	jp nz,_loadaddress$4
               S01:00000BDF:  C2 E6 0B
F00:0854       	ld hl,loadFILE
               S01:00000BE2:  21 E3 08
F00:0855       	ret
               S01:00000BE5:  C9
F00:0856       _loadaddress$4:
F00:0857       	cp MEMSET
               S01:00000BE6:  FE 04
F00:0858       	jp nz,_loadaddress$5
               S01:00000BE8:  C2 EF 0B
F00:0859       	ld hl,memset
               S01:00000BEB:  21 4A 08
F00:0860       	ret
               S01:00000BEE:  C9
F00:0861       _loadaddress$5:
F00:0862       	cp STRLEN
               S01:00000BEF:  FE 05
F00:0863       	jp nz,_loadaddress$6
               S01:00000BF1:  C2 F8 0B
F00:0864       	ld hl,strlen
               S01:00000BF4:  21 53 08
F00:0865       	ret
               S01:00000BF7:  C9
F00:0866       _loadaddress$6:
F00:0867       	cp PUTC
               S01:00000BF8:  FE 06
F00:0868       	jp nz,_loadaddress$7
               S01:00000BFA:  C2 01 0C
F00:0869       	ld hl,putc
               S01:00000BFD:  21 E0 08
F00:0870       	ret
               S01:00000C00:  C9
F00:0871       _loadaddress$7:
F00:0872       	cp TOUPPERCASE
               S01:00000C01:  FE 07
F00:0873       	jp nz,_loadaddress$8
               S01:00000C03:  C2 0A 0C
F00:0874       	ld hl,touppercase
               S01:00000C06:  21 7B 08
F00:0875       	ret
               S01:00000C09:  C9
F00:0876       _loadaddress$8:
F00:0877       	cp HEXTOBYTE
               S01:00000C0A:  FE 08
F00:0878       	jp nz,_loadaddress$9
               S01:00000C0C:  C2 13 0C
F00:0879       	ld hl,hextobyte
               S01:00000C0F:  21 F8 09
F00:0880       	ret
               S01:00000C12:  C9
F00:0881       _loadaddress$9:
F00:0882       	cp PRINTLN
               S01:00000C13:  FE 09
F00:0883       	jp nz,_loadaddress$10
               S01:00000C15:  C2 1C 0C
F00:0884       	ld hl,println
               S01:00000C18:  21 93 08
F00:0885       	ret
               S01:00000C1B:  C9
F00:0886       _loadaddress$10:
F00:0887       	cp STRNCPY
               S01:00000C1C:  FE 0A
F00:0888       	jp nz,_loadaddress$11
               S01:00000C1E:  C2 25 0C
F00:0889       	ld hl,strncpy
               S01:00000C21:  21 65 08
F00:0890       	ret
               S01:00000C24:  C9
F00:0891       _loadaddress$11:
F00:0892       	cp DIRECTORYOPEN
               S01:00000C25:  FE 0D
F00:0893       	jp nz,_loadaddress$12
               S01:00000C27:  C2 2E 0C
F00:0894       	ld hl,directoryopen
               S01:00000C2A:  21 16 0A
F00:0895       	ret
               S01:00000C2D:  C9
F00:0896       _loadaddress$12:
F00:0897       	cp GETFILENAME:
               S01:00000C2E:  FE 0F
F00:0898       	jp nz,_loadaddress$13
               S01:00000C30:  C2 37 0C
F00:0899       	ld hl,getfilename
               S01:00000C33:  21 24 0A
F00:0900       	ret
               S01:00000C36:  C9
F00:0901       _loadaddress$13:
F00:0902       	cp NEXTFILE
               S01:00000C37:  FE 32
F00:0903       	jp nz,_loadaddress$14
               S01:00000C39:  C2 40 0C
F00:0904       	ld hl,nextfile
               S01:00000C3C:  21 1D 0A
F00:0905       	ret
               S01:00000C3F:  C9
F00:0906       _loadaddress$14:
F00:0907       	cp CREATEPROCESS
               S01:00000C40:  FE 10
F00:0908       	jp nz,_loadaddress$15
               S01:00000C42:  C2 49 0C
F00:0909       	ld hl,createProcess
               S01:00000C45:  21 40 0A
F00:0910       	ret
               S01:00000C48:  C9
F00:0911       _loadaddress$15:
F00:0912       	cp GETCOMMANDPARAMS
               S01:00000C49:  FE 11
F00:0913       	jp nz,_loadaddress$16
               S01:00000C4B:  C2 52 0C
F00:0914       	ld hl,getcommandparams
               S01:00000C4E:  21 3B 0B
F00:0915       	ret
               S01:00000C51:  C9
F00:0916       _loadaddress$16:
F00:0917       	cp GETMALLOCTABLE
               S01:00000C52:  FE 12
F00:0918       	jp nz,_loadaddress$17
               S01:00000C54:  C2 5B 0C
F00:0919       	ld hl,getmalloctable
               S01:00000C57:  21 48 0B
F00:0920       	ret
               S01:00000C5A:  C9
F00:0921       _loadaddress$17:
F00:0922       	cp DIV8
               S01:00000C5B:  FE 13
F00:0923       	jp nz,_loadaddress18$
               S01:00000C5D:  C2 64 0C
F00:0924       	ld hl,Div8
               S01:00000C60:  21 B0 0B
F00:0925       	ret
               S01:00000C63:  C9
F00:0926       _loadaddress18$:
F00:0927       	cp SETRESETPAGE
               S01:00000C64:  FE 14
F00:0928       	jp nz,_loadaddress19$
               S01:00000C66:  C2 6D 0C
F00:0929       	ld hl,setresetpage
               S01:00000C69:  21 56 0B
F00:0930       	ret
               S01:00000C6C:  C9
F00:0931       _loadaddress19$:
F00:0932       	cp PRINTHEXL
               S01:00000C6D:  FE 15
F00:0933       	jp nz,_loadaddress20$
               S01:00000C6F:  C2 76 0C
F00:0934       	ld hl,printhexL
               S01:00000C72:  21 BD 08
F00:0935       	ret
               S01:00000C75:  C9
F00:0936       _loadaddress20$:
F00:0937       	cp STARTPROCESSINFO
               S01:00000C76:  FE 16
F00:0938       	jp nz,_loadaddress21$
               S01:00000C78:  C2 7F 0C
F00:0939       	ld hl,startprocessinfo
               S01:00000C7B:  21 F2 0A
F00:0940       	ret
               S01:00000C7E:  C9
F00:0941       _loadaddress21$:
F00:0942       	cp NEXTPROCESSINFO
               S01:00000C7F:  FE 17
F00:0943       	jp nz, _loadaddress22$
               S01:00000C81:  C2 88 0C
F00:0944       	ld hl, nextprocessinfo
               S01:00000C84:  21 FA 0A
F00:0945       	ret
               S01:00000C87:  C9
F00:0946       _loadaddress22$:
F00:0947       	cp STRCPY
               S01:00000C88:  FE 18
F00:0948       	jp nz, _loadaddress23$
               S01:00000C8A:  C2 91 0C
F00:0949       	ld hl, strcpy
               S01:00000C8D:  21 68 08
F00:0950       	ret
               S01:00000C90:  C9
F00:0951       _loadaddress23$:
F00:0952       	#----- not defined ---
F00:0953       	ld hl,addressfailedmsg
               S01:00000C91:  21 E8 0C
F00:0954       	call print 
               S01:00000C94:  CD A1 08
F00:0955       	call printhex
               S01:00000C97:  CD CA 08
F00:0956       
F00:0957       	ld hl,0
               S01:00000C9A:  21 00 00
F00:0958       	ret
               S01:00000C9D:  C9
F00:0959       
F00:0960       
F00:0961       	# ======================== end subroutines ========== #
F00:0962       	
F00:0963       	nullroutine: 
F00:0964       		ei
               S01:00000C9E:  FB
F00:0965       		reti
               S01:00000C9F:  ED 4D
F00:0966       
F00:0967       	serialport: ;#/* interrupt 2, echo what was sent*/
F00:0968       	#	di
F00:0969       		#ld a,'*'
F00:0970       		#out (SERIALPORT),a
F00:0971       
F00:0972       		in a,(SERIALPORT)
               S01:00000CA1:  DB 01
F00:0973       		cp 0
               S01:00000CA3:  FE 00
F00:0974       		jp nz,_1$
               S01:00000CA5:  C2 AA 0C
F00:0975       		ld a,'`'
               S01:00000CA8:  3E 60
F00:0976       _1$:
F00:0977       		out (SERIALPORT),a
               S01:00000CAA:  D3 01
F00:0978       		ei
               S01:00000CAC:  FB
F00:0979       		reti
               S01:00000CAD:  ED 4D
F00:0980       	crlf: .string "\r\n"
               S01:00000CAF:  0D 0A
F00:0981       	loadedmsg: .string "JOSHUA\r\n"
               S01:00000CB2:  4A 4F 53 48 55 41 0D 0A
F00:0982       	readymsg: .string "\r\nReady v0.0\r\n"
               S01:00000CBB:  0D 0A 52 65 61 64 79 20 76 30 2E 30 0D 0A
F00:0983       	commandprocessor: .string "cmd"
               S01:00000CCA:  63 6D 64
F00:0984       	errorloadingmsg: .string "error loading program.\r\n\"
               S01:00000CCE:  65 72 72 6F 72 20 6C 6F 61 64 69 6E 67 20 70 72
               S01:00000CDE:  6F 67 72 61 6D 2E 0D 0A 22
F00:0985       	addressfailedmsg: .string "GetAddress failed for code:"
               S01:00000CE8:  47 65 74 41 64 64 72 65 73 73 20 66 61 69 6C 65
               S01:00000CF8:  64 20 66 6F 72 20 63 6F 64 65 3A
F00:0986       
F00:0987       	.align 8
F00:0988       malloctable: .space 255
F00:0989       
F00:0990       	; I could set the org address but I'm going to let that move as needed	.org 0x????
F00:0991       	;#.org 0x0A00-start
F00:0992       
F00:0993       	.align 8
F00:0994       	jumptable:
F00:0995       	.2byte nullroutine ;0
               S01:00000F00:  9E 0C
F00:0996       	.2byte serialport ;2
               S01:00000F02:  A1 0C
F00:0997       	.2byte nullroutine ;4
               S01:00000F04:  9E 0C
F00:0998       	.2byte nullroutine ;6
               S01:00000F06:  9E 0C
F00:0999       	.2byte nullroutine ;0
               S01:00000F08:  9E 0C
F00:1000       	.2byte nullroutine ;0
               S01:00000F0A:  9E 0C
F00:1001       	.2byte nullroutine ;0
               S01:00000F0C:  9E 0C
F00:1002       	.2byte nullroutine ;0
               S01:00000F0E:  9E 0C
F00:1003       	.2byte nullroutine ;0
               S01:00000F10:  9E 0C
F00:1004       	.2byte nullroutine ;0
               S01:00000F12:  9E 0C
F00:1005       #/* 10 */
F00:1006       	.2byte nullroutine ;0
               S01:00000F14:  9E 0C
F00:1007       	.2byte nullroutine ;0
               S01:00000F16:  9E 0C
F00:1008       	.2byte nullroutine ;0
               S01:00000F18:  9E 0C
F00:1009       	.2byte nullroutine ;0
               S01:00000F1A:  9E 0C
F00:1010       	.2byte nullroutine ;0
               S01:00000F1C:  9E 0C
F00:1011       	.2byte nullroutine ;0
               S01:00000F1E:  9E 0C
F00:1012       	.2byte nullroutine ;0
               S01:00000F20:  9E 0C
F00:1013       	.2byte nullroutine ;0
               S01:00000F22:  9E 0C
F00:1014       	.2byte nullroutine ;0
               S01:00000F24:  9E 0C
F00:1015       	.2byte nullroutine ;0
               S01:00000F26:  9E 0C
F00:1016       #/* 20 */
F00:1017       	.2byte nullroutine ;0
               S01:00000F28:  9E 0C
F00:1018       	.2byte nullroutine ;0
               S01:00000F2A:  9E 0C
F00:1019       	.2byte nullroutine ;0
               S01:00000F2C:  9E 0C
F00:1020       	.2byte nullroutine ;0
               S01:00000F2E:  9E 0C
F00:1021       	.2byte nullroutine ;0
               S01:00000F30:  9E 0C
F00:1022       	.2byte nullroutine ;0
               S01:00000F32:  9E 0C
F00:1023       	.2byte nullroutine ;0
               S01:00000F34:  9E 0C
F00:1024       	.2byte nullroutine ;0
               S01:00000F36:  9E 0C
F00:1025       	.2byte nullroutine ;0
               S01:00000F38:  9E 0C
F00:1026       	.2byte nullroutine ;0
               S01:00000F3A:  9E 0C
F00:1027       #/* 30 */
F00:1028       	.2byte nullroutine ;0
               S01:00000F3C:  9E 0C
F00:1029       	.2byte nullroutine ;0
               S01:00000F3E:  9E 0C
F00:1030       	.2byte nullroutine ;0
               S01:00000F40:  9E 0C
F00:1031       	.2byte nullroutine ;0
               S01:00000F42:  9E 0C
F00:1032       	.2byte nullroutine ;0
               S01:00000F44:  9E 0C
F00:1033       	.2byte nullroutine ;0
               S01:00000F46:  9E 0C
F00:1034       	.2byte nullroutine ;0
               S01:00000F48:  9E 0C
F00:1035       	.2byte nullroutine ;0
               S01:00000F4A:  9E 0C
F00:1036       	.2byte nullroutine ;0
               S01:00000F4C:  9E 0C
F00:1037       	.2byte nullroutine ;0
               S01:00000F4E:  9E 0C
F00:1038       #/* 40 */
F00:1039       	.2byte nullroutine ;0
               S01:00000F50:  9E 0C
F00:1040       	.2byte nullroutine ;0
               S01:00000F52:  9E 0C
F00:1041       	.2byte nullroutine ;0
               S01:00000F54:  9E 0C
F00:1042       	.2byte nullroutine ;0
               S01:00000F56:  9E 0C
F00:1043       	.2byte nullroutine ;0
               S01:00000F58:  9E 0C
F00:1044       	.2byte nullroutine ;0
               S01:00000F5A:  9E 0C
F00:1045       	.2byte nullroutine ;0
               S01:00000F5C:  9E 0C
F00:1046       	.2byte nullroutine ;0
               S01:00000F5E:  9E 0C
F00:1047       	.2byte nullroutine ;0
               S01:00000F60:  9E 0C
F00:1048       	.2byte nullroutine ;0
               S01:00000F62:  9E 0C
F00:1049       #/* 50 */
F00:1050       	.2byte nullroutine ;0
               S01:00000F64:  9E 0C
F00:1051       	.2byte nullroutine ;0
               S01:00000F66:  9E 0C
F00:1052       	.2byte nullroutine ;0
               S01:00000F68:  9E 0C
F00:1053       	.2byte nullroutine ;0
               S01:00000F6A:  9E 0C
F00:1054       	.2byte nullroutine ;0
               S01:00000F6C:  9E 0C
F00:1055       	.2byte nullroutine ;0
               S01:00000F6E:  9E 0C
F00:1056       	.2byte nullroutine ;0
               S01:00000F70:  9E 0C
F00:1057       	.2byte nullroutine ;0
               S01:00000F72:  9E 0C
F00:1058       	.2byte nullroutine ;0
               S01:00000F74:  9E 0C
F00:1059       	.2byte nullroutine ;0
               S01:00000F76:  9E 0C
F00:1060       #/* 60 */
F00:1061       	.2byte nullroutine ;0
               S01:00000F78:  9E 0C
F00:1062       	.2byte nullroutine ;0
               S01:00000F7A:  9E 0C
F00:1063       	.2byte nullroutine ;0
               S01:00000F7C:  9E 0C
F00:1064       	.2byte nullroutine ;0
               S01:00000F7E:  9E 0C
F00:1065       	.2byte nullroutine ;0
               S01:00000F80:  9E 0C
F00:1066       	.2byte nullroutine ;0
               S01:00000F82:  9E 0C
F00:1067       	.2byte nullroutine ;0
               S01:00000F84:  9E 0C
F00:1068       	.2byte nullroutine ;0
               S01:00000F86:  9E 0C
F00:1069       	.2byte nullroutine ;0
               S01:00000F88:  9E 0C
F00:1070       	.2byte nullroutine ;0
               S01:00000F8A:  9E 0C
F00:1071       #/* 70 */
F00:1072       	.2byte nullroutine ;0
               S01:00000F8C:  9E 0C
F00:1073       	.2byte nullroutine ;0
               S01:00000F8E:  9E 0C
F00:1074       	.2byte nullroutine ;0
               S01:00000F90:  9E 0C
F00:1075       	.2byte nullroutine ;0
               S01:00000F92:  9E 0C
F00:1076       	.2byte nullroutine ;0
               S01:00000F94:  9E 0C
F00:1077       	.2byte nullroutine ;0
               S01:00000F96:  9E 0C
F00:1078       	.2byte nullroutine ;0
               S01:00000F98:  9E 0C
F00:1079       	.2byte nullroutine ;0
               S01:00000F9A:  9E 0C
F00:1080       	.2byte nullroutine ;0
               S01:00000F9C:  9E 0C
F00:1081       	.2byte nullroutine ;0
               S01:00000F9E:  9E 0C
F00:1082       #/* 80 */
F00:1083       	.2byte nullroutine ;0
               S01:00000FA0:  9E 0C
F00:1084       	.2byte nullroutine ;0
               S01:00000FA2:  9E 0C
F00:1085       	.2byte nullroutine ;0
               S01:00000FA4:  9E 0C
F00:1086       	.2byte nullroutine ;0
               S01:00000FA6:  9E 0C
F00:1087       	.2byte nullroutine ;0
               S01:00000FA8:  9E 0C
F00:1088       	.2byte nullroutine ;0
               S01:00000FAA:  9E 0C
F00:1089       	.2byte nullroutine ;0
               S01:00000FAC:  9E 0C
F00:1090       	.2byte nullroutine ;0
               S01:00000FAE:  9E 0C
F00:1091       	.2byte nullroutine ;0
               S01:00000FB0:  9E 0C
F00:1092       	.2byte nullroutine ;0
               S01:00000FB2:  9E 0C
F00:1093       #/* 90 */
F00:1094       	.2byte nullroutine ;0
               S01:00000FB4:  9E 0C
F00:1095       	.2byte nullroutine ;0
               S01:00000FB6:  9E 0C
F00:1096       	.2byte nullroutine ;0
               S01:00000FB8:  9E 0C
F00:1097       	.2byte nullroutine ;0
               S01:00000FBA:  9E 0C
F00:1098       	.2byte nullroutine ;0
               S01:00000FBC:  9E 0C
F00:1099       	.2byte nullroutine ;0
               S01:00000FBE:  9E 0C
F00:1100       	.2byte nullroutine ;0
               S01:00000FC0:  9E 0C
F00:1101       	.2byte nullroutine ;0
               S01:00000FC2:  9E 0C
F00:1102       	.2byte nullroutine ;0
               S01:00000FC4:  9E 0C
F00:1103       	.2byte nullroutine ;0
               S01:00000FC6:  9E 0C
F00:1104       #/* 100 */
F00:1105       	.2byte nullroutine ;0
               S01:00000FC8:  9E 0C
F00:1106       	.2byte nullroutine ;0
               S01:00000FCA:  9E 0C
F00:1107       	.2byte nullroutine ;0
               S01:00000FCC:  9E 0C
F00:1108       	.2byte nullroutine ;0
               S01:00000FCE:  9E 0C
F00:1109       	.2byte nullroutine ;0
               S01:00000FD0:  9E 0C
F00:1110       	.2byte nullroutine ;0
               S01:00000FD2:  9E 0C
F00:1111       	.2byte nullroutine ;0
               S01:00000FD4:  9E 0C
F00:1112       	.2byte nullroutine ;0
               S01:00000FD6:  9E 0C
F00:1113       	.2byte nullroutine ;0
               S01:00000FD8:  9E 0C
F00:1114       	.2byte nullroutine ;0
               S01:00000FDA:  9E 0C
F00:1115       #/* 110 */
F00:1116       	.2byte nullroutine ;0
               S01:00000FDC:  9E 0C
F00:1117       	.2byte nullroutine ;0
               S01:00000FDE:  9E 0C
F00:1118       	.2byte nullroutine ;0
               S01:00000FE0:  9E 0C
F00:1119       	.2byte nullroutine ;0
               S01:00000FE2:  9E 0C
F00:1120       	.2byte nullroutine ;0
               S01:00000FE4:  9E 0C
F00:1121       	.2byte nullroutine ;0
               S01:00000FE6:  9E 0C
F00:1122       	.2byte nullroutine ;0
               S01:00000FE8:  9E 0C
F00:1123       	.2byte nullroutine ;0
               S01:00000FEA:  9E 0C
F00:1124       	.2byte nullroutine ;0
               S01:00000FEC:  9E 0C
F00:1125       	.2byte nullroutine ;0
               S01:00000FEE:  9E 0C
F00:1126       #/* 120 */
F00:1127       	.2byte nullroutine ;0
               S01:00000FF0:  9E 0C
F00:1128       	.2byte nullroutine ;0
               S01:00000FF2:  9E 0C
F00:1129       	.2byte nullroutine ;0
               S01:00000FF4:  9E 0C
F00:1130       	.2byte nullroutine ;0
               S01:00000FF6:  9E 0C
F00:1131       	.2byte nullroutine ;0
               S01:00000FF8:  9E 0C
F00:1132       	.2byte nullroutine ;0
               S01:00000FFA:  9E 0C
F00:1133       	.2byte nullroutine ;0
               S01:00000FFC:  9E 0C
F00:1134       	.2byte nullroutine ;0
               S01:00000FFE:  9E 0C
F00:1135       
F00:1136       	ENDOFLINE:
F00:1137       	.if (ENDOFLINE > 0x01fff)
F00:1138       		.abort "PROGRAM TOO LARGE TO FIT BELOW <0x2000"
F00:1139       	.endif
F00:1140       	


Sections:
S01  seg800


Sources:
F00  RAM.s
F01  SDCARD.inc
F02  Routines.inc
F03  SERIAL.inc
F04  SDCARD.inc
F05  debughex
F06  debug
F07  REPEAT:RAM.s:line 692
F08  debug
F09  debug
F10  debug
F11  debug


Symbols:
ENDOFLINE EXPR(4096=0x1000) ABS 
 serialport _1$ EXPR(3242=0xcaa) ABS 
serialport EXPR(3233=0xca1) ABS 
nullroutine EXPR(3230=0xc9e) ABS 
addressfailedmsg EXPR(3304=0xce8) ABS 
_loadaddress23$ EXPR(3217=0xc91) ABS 
_loadaddress22$ EXPR(3208=0xc88) ABS 
_loadaddress21$ EXPR(3199=0xc7f) ABS 
_loadaddress20$ EXPR(3190=0xc76) ABS 
_loadaddress19$ EXPR(3181=0xc6d) ABS 
_loadaddress18$ EXPR(3172=0xc64) ABS 
_loadaddress$17 EXPR(3163=0xc5b) ABS 
_loadaddress$16 EXPR(3154=0xc52) ABS 
_loadaddress$15 EXPR(3145=0xc49) ABS 
_loadaddress$14 EXPR(3136=0xc40) ABS 
_loadaddress$13 EXPR(3127=0xc37) ABS 
_loadaddress$12 EXPR(3118=0xc2e) ABS 
_loadaddress$11 EXPR(3109=0xc25) ABS 
_loadaddress$10 EXPR(3100=0xc1c) ABS 
_loadaddress$9 EXPR(3091=0xc13) ABS 
_loadaddress$8 EXPR(3082=0xc0a) ABS 
_loadaddress$7 EXPR(3073=0xc01) ABS 
_loadaddress$6 EXPR(3064=0xbf8) ABS 
_loadaddress$5 EXPR(3055=0xbef) ABS 
_loadaddress$4 EXPR(3046=0xbe6) ABS 
_loadaddress$3 EXPR(3037=0xbdd) ABS 
_loadaddress$2 EXPR(3028=0xbd4) ABS 
Mul8bSkip EXPR(3016=0xbc8) ABS 
Mul8bLoop EXPR(3011=0xbc3) ABS 
Div8NextBit EXPR(3003=0xbbb) ABS 
Div8Loop EXPR(2995=0xbb3) ABS 
Div8 EXPR(2992=0xbb0) ABS 
 setresetpage 4$ EXPR(2957=0xb8d) ABS 
 setresetpage 6$ EXPR(2954=0xb8a) ABS 
 setresetpage 2$ EXPR(2938=0xb7a) ABS 
 setresetpage 1$ EXPR(2933=0xb75) ABS 
getmallocrelativebase EXPR(2960=0xb90) ABS 
setresetpage EXPR(2902=0xb56) ABS 
malloctable EXPR(3584=0xe00) ABS 
getmalloctable EXPR(2888=0xb48) ABS 
getcommandparams EXPR(2875=0xb3b) ABS 
endprocesstable EXPR(2875=0xb3b) UNUSED ABS 
maxprocesses EXPR(2849=0xb21) UNUSED ABS 
lastprogramid EXPR(2848=0xb20) UNUSED ABS 
 nextprocessinfo 1$ EXPR(2838=0xb16) ABS 
processtable EXPR(2851=0xb23) ABS 
Mul8b EXPR(3006=0xbbe) ABS 
nextprocessinfo EXPR(2810=0xafa) ABS 
currentprocessinfo EXPR(2850=0xb22) ABS 
startprocessinfo EXPR(2802=0xaf2) ABS 
progloadaddress EXPR(2727=0xaa7) ABS 
 createProcess _4$ EXPR(2720=0xaa0) ABS 
_progloadaddr EXPR(2728=0xaa8) ABS 
_createProcesserr$1 EXPR(2730=0xaaa) ABS 
theprocessmsg EXPR(2735=0xaaf) ABS 
thecommandlinemsg EXPR(2744=0xab8) ABS 
theparams EXPR(2752=0xac0) ABS 
createProcess EXPR(2624=0xa40) ABS 
_exitgetfilename EXPR(2618=0xa3a) ABS 
_getfilename$1 EXPR(2602=0xa2a) ABS 
getfilename EXPR(2596=0xa24) ABS 
nextfile EXPR(2589=0xa1d) ABS 
directoryopen EXPR(2582=0xa16) ABS 
hextobytenumber EXPR(2579=0xa13) ABS 
workhextobyte EXPR(2571=0xa0b) ABS 
hextobyte EXPR(2552=0x9f8) ABS 
stackpages EXPR(2551=0x9f7) UNUSED ABS 
hisize EXPR(2547=0x9f3) UNUSED ABS 
losize EXPR(2546=0x9f2) ABS 
sizeincrement EXPR(2522=0x9da) ABS 
 available _1$ EXPR(2456=0x998) ABS 
_$nextbyte EXPR(2471=0x9a7) ABS 
 loadheader _1$ EXPR(2423=0x977) ABS 
 loadheader _2$ EXPR(2399=0x95f) ABS 
reservemalloc EXPR(2892=0xb4c) ABS 
 testloadaddress 45$ EXPR(2370=0x942) ABS 
memorypages EXPR(2550=0x9f6) ABS 
 testloadaddress _4$ EXPR(2392=0x958) ABS 
loadheader EXPR(2395=0x95b) ABS 
available EXPR(2436=0x984) ABS 
sizeloaded EXPR(2488=0x9b8) ABS 
testloadaddress EXPR(2334=0x91e) ABS 
_$openfile EXPR(2315=0x90b) ABS 
_$getnextchar EXPR(2298=0x8fa) ABS 
startaddress EXPR(2548=0x9f4) ABS 
sizereset EXPR(2503=0x9c7) ABS 
putc EXPR(2272=0x8e0) ABS 
_$ EXPR(2259=0x8d3) ABS 
printhexL EXPR(2237=0x8bd) ABS 
_$2 EXPR(2234=0x8ba) ABS 
_$1 EXPR(2223=0x8af) ABS 
crlf EXPR(3247=0xcaf) ABS 
nextcharacter EXPR(2185=0x889) ABS 
converttouppercaseletter EXPR(2182=0x886) ABS 
goagain EXPR(2173=0x87d) ABS 
touppercase EXPR(2171=0x87b) ABS 
_strcpyexit$1 EXPR(2167=0x877) ABS 
 strcpy _1$ EXPR(2155=0x86b) ABS 
strcpy EXPR(2152=0x868) ABS 
strncpy EXPR(2149=0x865) ABS 
strlenexit EXPR(2146=0x862) ABS 
_strlen$ EXPR(2135=0x857) ABS 
strlen EXPR(2131=0x853) ABS 
_metset$1 EXPR(2124=0x84c) ABS 
memset EXPR(2122=0x84a) ABS 
errorloadingmsg EXPR(3278=0xcce) ABS 
printhex EXPR(2250=0x8ca) ABS 
commandline EXPR(2119=0x847) ABS 
println EXPR(2195=0x893) ABS 
_cmdlne EXPR(2120=0x848) ABS 
errorloading EXPR(2107=0x83b) ABS 
loadFILE EXPR(2275=0x8e3) ABS 
commandprocessor EXPR(3274=0xcca) ABS 
commandprocessloop EXPR(2078=0x81e) ABS 
loadedmsg EXPR(3250=0xcb2) ABS 
jumptable EXPR(3840=0xf00) ABS 
print EXPR(2209=0x8a1) ABS 
readymsg EXPR(3259=0xcbb) ABS 
loadaddress EXPR(3019=0xbcb) ABS 
start EXPR(2052=0x804) UNUSED ABS 
boot EXPR(2055=0x807) ABS 
NEXTNUMBER EXPR(26=0x1a) UNUSED 
NEXTPROCESSINFO EXPR(23=0x17) 
STARTPROCESSINFO EXPR(22=0x16) 
SETRESETPAGE EXPR(20=0x14) 
DIV8 EXPR(19=0x13) 
GETMALLOCTABLE EXPR(18=0x12) 
GETFILENAME EXPR(15=0xf) 
DIRECTORYNEXTFILE EXPR(14=0xe) UNUSED 
DIRECTORYOPEN EXPR(13=0xd) 
GETCOMMANDPARAMS EXPR(17=0x11) 
CREATEPROCESS EXPR(16=0x10) 
HEXTOBYTE EXPR(8=0x8) 
TOUPPERCASE EXPR(7=0x7) 
PUTC EXPR(6=0x6) 
STRNCPY EXPR(10=0xa) 
STRCPY EXPR(24=0x18) 
STRLEN EXPR(5=0x5) 
MEMSET EXPR(4=0x4) 
LOADFILE EXPR(3=0x3) 
PRINTHEXL EXPR(21=0x15) 
PRINTHEX EXPR(2=0x2) 
PRINTLN EXPR(9=0x9) 
PRINT EXPR(1=0x1) 
GetAddress EXPR(2052=0x804) UNUSED 
FALSE EXPR(0=0x0) UNUSED 
TRUE EXPR(1=0x1) UNUSED 
libMemory EXPR(61440=0xf000) UNUSED 
userMemory EXPR(12288=0x3000) 
commandMemory EXPR(8192=0x2000) UNUSED 
SERIALPORT2 EXPR(2=0x2) UNUSED 
SERIALPORT EXPR(1=0x1) 
NEXTFILE EXPR(50=0x32) 
OPENDIRECTORY EXPR(49=0x31) 
NAMEAVAILABLE EXPR(33=0x21) 
GETNAME EXPR(32=0x20) 
WRITEBYTE EXPR(8=0x8) UNUSED 
OPENWRITE EXPR(7=0x7) UNUSED 
AVAILABLE EXPR(6=0x6) 
READNEXTBYTE EXPR(5=0x5) 
FILENAMEAPPEND EXPR(4=0x4) 
CLOSE EXPR(3=0x3) UNUSED 
OPEN EXPR(2=0x2) 
FILENAMECLEAR EXPR(1=0x1) 
SDCARD EXPR(5=0x5) 
PROCINFOSIZE EXPR(6=0x6) 
MAXPROCESSES EXPR(4=0x4) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
